
f412-gettingstarted.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004bd4  08004bd4  00014bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c40  08004c40  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c40  08004c40  00014c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c48  08004c48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000070  08004cc0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  08004cc0  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee07  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a5  00000000  00000000  0002eea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00031250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  00031df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e22  00000000  00000000  000328b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edc7  00000000  00000000  000536da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8dcb  00000000  00000000  000624a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b26c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003438  00000000  00000000  0012b2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004bbc 	.word	0x08004bbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004bbc 	.word	0x08004bbc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <DWT_Init+0x28>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <DWT_Init+0x28>)
 80005ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005d2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <DWT_Init+0x2c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <DWT_Init+0x2c>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000edf0 	.word	0xe000edf0
 80005f0:	e0001000 	.word	0xe0001000

080005f4 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <micros+0x24>)
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <micros+0x28>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4907      	ldr	r1, [pc, #28]	; (8000620 <micros+0x2c>)
 8000602:	fba1 1303 	umull	r1, r3, r1, r3
 8000606:	0c9b      	lsrs	r3, r3, #18
 8000608:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e0001000 	.word	0xe0001000
 800061c:	20000000 	.word	0x20000000
 8000620:	431bde83 	.word	0x431bde83

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint32_t value[4];
	char* buf;
	uint32_t t1;
	uint32_t t0 = micros();
 800062a:	f7ff ffe3 	bl	80005f4 <micros>
 800062e:	61f8      	str	r0, [r7, #28]
	long int dt = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fce2 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f858 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f9dc 	bl	80009f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 f9ba 	bl	80009b8 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000644:	f000 f988 	bl	8000958 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000648:	f000 f8bc 	bl	80007c4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800064c:	f000 f930 	bl	80008b0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000650:	f000 f958 	bl	8000904 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, value, 4);
 8000654:	463b      	mov	r3, r7
 8000656:	2204      	movs	r2, #4
 8000658:	4619      	mov	r1, r3
 800065a:	481f      	ldr	r0, [pc, #124]	; (80006d8 <main+0xb4>)
 800065c:	f000 fda8 	bl	80011b0 <HAL_ADC_Start_DMA>
  DWT_Init();
 8000660:	f7ff ffb0 	bl	80005c4 <DWT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buf = (char *) malloc(sizeof(value[0]+value[1]+value[2]+value[3])+8);
 8000664:	200c      	movs	r0, #12
 8000666:	f003 fe23 	bl	80042b0 <malloc>
 800066a:	4603      	mov	r3, r0
 800066c:	617b      	str	r3, [r7, #20]
	  t1 = micros();
 800066e:	f7ff ffc1 	bl	80005f4 <micros>
 8000672:	6138      	str	r0, [r7, #16]
	  dt = ((t1%1000000)-(t0%1000000));
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	4a19      	ldr	r2, [pc, #100]	; (80006dc <main+0xb8>)
 8000678:	fba2 1203 	umull	r1, r2, r2, r3
 800067c:	0c92      	lsrs	r2, r2, #18
 800067e:	4918      	ldr	r1, [pc, #96]	; (80006e0 <main+0xbc>)
 8000680:	fb01 f202 	mul.w	r2, r1, r2
 8000684:	1a9a      	subs	r2, r3, r2
 8000686:	69f9      	ldr	r1, [r7, #28]
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <main+0xb8>)
 800068a:	fba3 0301 	umull	r0, r3, r3, r1
 800068e:	0c9b      	lsrs	r3, r3, #18
 8000690:	4813      	ldr	r0, [pc, #76]	; (80006e0 <main+0xbc>)
 8000692:	fb00 f303 	mul.w	r3, r0, r3
 8000696:	1acb      	subs	r3, r1, r3
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	61bb      	str	r3, [r7, #24]
	  sprintf(buf ,"%0x,%0x,%0x,%0x,%0x\r\n",dt,value[0], value[1], value[2], value[3]);
 800069c:	6838      	ldr	r0, [r7, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	68f9      	ldr	r1, [r7, #12]
 80006a4:	9102      	str	r1, [sp, #8]
 80006a6:	9201      	str	r2, [sp, #4]
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4603      	mov	r3, r0
 80006ac:	69ba      	ldr	r2, [r7, #24]
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <main+0xc0>)
 80006b0:	6978      	ldr	r0, [r7, #20]
 80006b2:	f003 ff05 	bl	80044c0 <siprintf>
//	  sprintf(buf ,"%i,%i,%i,%i,%i\r\n",t1%1000000,value[0], value[1], value[2], value[3]);
	  HAL_UART_Transmit(&huart6, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80006b6:	6978      	ldr	r0, [r7, #20]
 80006b8:	f7ff fdaa 	bl	8000210 <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	6979      	ldr	r1, [r7, #20]
 80006c6:	4808      	ldr	r0, [pc, #32]	; (80006e8 <main+0xc4>)
 80006c8:	f002 ff57 	bl	800357a <HAL_UART_Transmit>
	  free(buf);
 80006cc:	6978      	ldr	r0, [r7, #20]
 80006ce:	f003 fdf7 	bl	80042c0 <free>
	  t0 = t1;
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	61fb      	str	r3, [r7, #28]
  {
 80006d6:	e7c5      	b.n	8000664 <main+0x40>
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	431bde83 	.word	0x431bde83
 80006e0:	000f4240 	.word	0x000f4240
 80006e4:	08004bd4 	.word	0x08004bd4
 80006e8:	20000178 	.word	0x20000178

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fde8 	bl	80042d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <SystemClock_Config+0xd0>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a28      	ldr	r2, [pc, #160]	; (80007bc <SystemClock_Config+0xd0>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <SystemClock_Config+0xd0>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <SystemClock_Config+0xd4>)
 8000736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <SystemClock_Config+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000748:	2301      	movs	r3, #1
 800074a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800074c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000750:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800075c:	2308      	movs	r3, #8
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000760:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000764:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000766:	2304      	movs	r3, #4
 8000768:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800076a:	2308      	movs	r3, #8
 800076c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fc2e 	bl	8002fd8 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000782:	f000 f9e7 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2103      	movs	r1, #3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 f82a 	bl	80027fc <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ae:	f000 f9d1 	bl	8000b54 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007d6:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <MX_ADC1_Init+0xe0>)
 80007d8:	4a33      	ldr	r2, [pc, #204]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007dc:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <MX_ADC1_Init+0xe0>)
 80007de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <MX_ADC1_Init+0xe0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <MX_ADC1_Init+0xe0>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <MX_ADC1_Init+0xe0>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_ADC1_Init+0xe0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fe:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_ADC1_Init+0xe0>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_ADC1_Init+0xe0>)
 8000806:	4a29      	ldr	r2, [pc, #164]	; (80008ac <MX_ADC1_Init+0xe8>)
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_ADC1_Init+0xe0>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000810:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_ADC1_Init+0xe0>)
 8000812:	2204      	movs	r2, #4
 8000814:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_ADC1_Init+0xe0>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_ADC1_Init+0xe0>)
 8000820:	2201      	movs	r2, #1
 8000822:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000824:	481f      	ldr	r0, [pc, #124]	; (80008a4 <MX_ADC1_Init+0xe0>)
 8000826:	f000 fc7f 	bl	8001128 <HAL_ADC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000830:	f000 f990 	bl	8000b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000834:	2303      	movs	r3, #3
 8000836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	4817      	ldr	r0, [pc, #92]	; (80008a4 <MX_ADC1_Init+0xe0>)
 8000846:	f000 fdc1 	bl	80013cc <HAL_ADC_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000850:	f000 f980 	bl	8000b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4811      	ldr	r0, [pc, #68]	; (80008a4 <MX_ADC1_Init+0xe0>)
 800085e:	f000 fdb5 	bl	80013cc <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000868:	f000 f974 	bl	8000b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800086c:	2303      	movs	r3, #3
 800086e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_ADC1_Init+0xe0>)
 8000876:	f000 fda9 	bl	80013cc <HAL_ADC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000880:	f000 f968 	bl	8000b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_ADC1_Init+0xe0>)
 800088e:	f000 fd9d 	bl	80013cc <HAL_ADC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000898:	f000 f95c 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2000008c 	.word	0x2000008c
 80008a8:	40012000 	.word	0x40012000
 80008ac:	0f000001 	.word	0x0f000001

080008b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART3_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_USART3_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART3_UART_Init+0x4c>)
 80008bc:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80008c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART3_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART3_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART3_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART3_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART3_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART3_UART_Init+0x4c>)
 80008e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008e6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_USART3_UART_Init+0x4c>)
 80008ea:	f002 fdf9 	bl	80034e0 <HAL_UART_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 80008f4:	f000 f92e 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000134 	.word	0x20000134
 8000900:	40004800 	.word	0x40004800

08000904 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART6_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_USART6_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 256000;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USART6_UART_Init+0x4c>)
 8000910:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8000914:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART6_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART6_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART6_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART6_UART_Init+0x4c>)
 800092a:	2208      	movs	r2, #8
 800092c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART6_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART6_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART6_UART_Init+0x4c>)
 800093c:	f002 fdd0 	bl	80034e0 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f905 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000178 	.word	0x20000178
 8000954:	40011400 	.word	0x40011400

08000958 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000962:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000966:	2206      	movs	r2, #6
 8000968:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096c:	2202      	movs	r2, #2
 800096e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000978:	2202      	movs	r2, #2
 800097a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097e:	2201      	movs	r2, #1
 8000980:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000990:	2201      	movs	r2, #1
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000996:	2201      	movs	r2, #1
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a2:	f001 fde2 	bl	800256a <HAL_PCD_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80009ac:	f000 f8d2 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200001bc 	.word	0x200001bc

080009b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_DMA_Init+0x3c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <MX_DMA_Init+0x3c>)
 80009c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_DMA_Init+0x3c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2038      	movs	r0, #56	; 0x38
 80009e0:	f001 f86f 	bl	8001ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009e4:	2038      	movs	r0, #56	; 0x38
 80009e6:	f001 f888 	bl	8001afa <HAL_NVIC_EnableIRQ>

}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	4b4c      	ldr	r3, [pc, #304]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a4b      	ldr	r2, [pc, #300]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b49      	ldr	r3, [pc, #292]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a44      	ldr	r2, [pc, #272]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b42      	ldr	r3, [pc, #264]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b3e      	ldr	r3, [pc, #248]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a3d      	ldr	r2, [pc, #244]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a36      	ldr	r2, [pc, #216]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a2f      	ldr	r2, [pc, #188]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a28      	ldr	r2, [pc, #160]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000abc:	4822      	ldr	r0, [pc, #136]	; (8000b48 <MX_GPIO_Init+0x150>)
 8000abe:	f001 fd3b 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	4821      	ldr	r0, [pc, #132]	; (8000b4c <MX_GPIO_Init+0x154>)
 8000ac8:	f001 fd36 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481b      	ldr	r0, [pc, #108]	; (8000b50 <MX_GPIO_Init+0x158>)
 8000ae4:	f001 fb94 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ae8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_GPIO_Init+0x150>)
 8000b02:	f001 fb85 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480b      	ldr	r0, [pc, #44]	; (8000b4c <MX_GPIO_Init+0x154>)
 8000b1e:	f001 fb77 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_GPIO_Init+0x154>)
 8000b36:	f001 fb6b 	bl	8002210 <HAL_GPIO_Init>

}
 8000b3a:	bf00      	nop
 8000b3c:	3730      	adds	r7, #48	; 0x30
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	40021800 	.word	0x40021800
 8000b50:	40020800 	.word	0x40020800

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_MspInit+0x4c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a3c      	ldr	r2, [pc, #240]	; (8000cc0 <HAL_ADC_MspInit+0x110>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d171      	bne.n	8000cb6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <HAL_ADC_MspInit+0x114>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a3a      	ldr	r2, [pc, #232]	; (8000cc4 <HAL_ADC_MspInit+0x114>)
 8000bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <HAL_ADC_MspInit+0x114>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <HAL_ADC_MspInit+0x114>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a33      	ldr	r2, [pc, #204]	; (8000cc4 <HAL_ADC_MspInit+0x114>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <HAL_ADC_MspInit+0x114>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <HAL_ADC_MspInit+0x114>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a2c      	ldr	r2, [pc, #176]	; (8000cc4 <HAL_ADC_MspInit+0x114>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <HAL_ADC_MspInit+0x114>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000c26:	230b      	movs	r3, #11
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4823      	ldr	r0, [pc, #140]	; (8000cc8 <HAL_ADC_MspInit+0x118>)
 8000c3a:	f001 fae9 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c42:	2303      	movs	r3, #3
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	481e      	ldr	r0, [pc, #120]	; (8000ccc <HAL_ADC_MspInit+0x11c>)
 8000c52:	f001 fadd 	bl	8002210 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000c58:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <HAL_ADC_MspInit+0x124>)
 8000c5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000c78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000c80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000c9c:	f000 ff48 	bl	8001b30 <HAL_DMA_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000ca6:	f7ff ff55 	bl	8000b54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000cae:	639a      	str	r2, [r3, #56]	; 0x38
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_ADC_MspInit+0x120>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40012000 	.word	0x40012000
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020800 	.word	0x40020800
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	200000d4 	.word	0x200000d4
 8000cd4:	40026410 	.word	0x40026410

08000cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <HAL_UART_MspInit+0xe8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d12d      	bne.n	8000d56 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a30      	ldr	r2, [pc, #192]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d44:	2307      	movs	r3, #7
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <HAL_UART_MspInit+0xf0>)
 8000d50:	f001 fa5e 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d54:	e030      	b.n	8000db8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <HAL_UART_MspInit+0xf4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d12b      	bne.n	8000db8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d68:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d6a:	f043 0320 	orr.w	r3, r3, #32
 8000d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_UART_MspInit+0xec>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d98:	23c0      	movs	r3, #192	; 0xc0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000da8:	2308      	movs	r3, #8
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <HAL_UART_MspInit+0xf8>)
 8000db4:	f001 fa2c 	bl	8002210 <HAL_GPIO_Init>
}
 8000db8:	bf00      	nop
 8000dba:	3730      	adds	r7, #48	; 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020c00 	.word	0x40020c00
 8000dcc:	40011400 	.word	0x40011400
 8000dd0:	40020800 	.word	0x40020800

08000dd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b098      	sub	sp, #96	; 0x60
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	223c      	movs	r2, #60	; 0x3c
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 fa6b 	bl	80042d0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e02:	d14d      	bne.n	8000ea0 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e04:	2320      	movs	r3, #32
 8000e06:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 ff13 	bl	8002c3c <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000e1c:	f7ff fe9a 	bl	8000b54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_PCD_MspInit+0xd4>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <HAL_PCD_MspInit+0xd4>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_PCD_MspInit+0xd4>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e3c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e40:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e56:	4619      	mov	r1, r3
 8000e58:	4814      	ldr	r0, [pc, #80]	; (8000eac <HAL_PCD_MspInit+0xd8>)
 8000e5a:	f001 f9d9 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e62:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e70:	4619      	mov	r1, r3
 8000e72:	480e      	ldr	r0, [pc, #56]	; (8000eac <HAL_PCD_MspInit+0xd8>)
 8000e74:	f001 f9cc 	bl	8002210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_PCD_MspInit+0xd4>)
 8000e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_PCD_MspInit+0xd4>)
 8000e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e82:	6353      	str	r3, [r2, #52]	; 0x34
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_PCD_MspInit+0xd4>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_PCD_MspInit+0xd4>)
 8000e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e92:	6453      	str	r3, [r2, #68]	; 0x44
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HAL_PCD_MspInit+0xd4>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3760      	adds	r7, #96	; 0x60
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f8d0 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <DMA2_Stream0_IRQHandler+0x10>)
 8000f0a:	f000 ff17 	bl	8001d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000d4 	.word	0x200000d4

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f003 f988 	bl	800425c <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20040000 	.word	0x20040000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	200006c8 	.word	0x200006c8
 8000f80:	200006e0 	.word	0x200006e0

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fae:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc4:	4c0b      	ldr	r4, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd2:	f7ff ffd7 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f003 f947 	bl	8004268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff fb23 	bl	8000624 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fe0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fec:	08004c50 	.word	0x08004c50
  ldr r2, =_sbss
 8000ff0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ff4:	200006e0 	.word	0x200006e0

08000ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_Init+0x40>)
 8001006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_Init+0x40>)
 8001012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_Init+0x40>)
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 fd41 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f808 	bl	8001040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001030:	f7ff fd96 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023c00 	.word	0x40023c00

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x54>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x58>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	fbb3 f3f1 	udiv	r3, r3, r1
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fd59 	bl	8001b16 <HAL_SYSTICK_Config>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00e      	b.n	800108c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d80a      	bhi.n	800108a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f000 fd21 	bl	8001ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_InitTick+0x5c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000000 	.word	0x20000000
 8001098:	20000008 	.word	0x20000008
 800109c:	20000004 	.word	0x20000004

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	200006cc 	.word	0x200006cc

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200006cc 	.word	0x200006cc

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff ffee 	bl	80010c8 <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Delay+0x44>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001106:	bf00      	nop
 8001108:	f7ff ffde 	bl	80010c8 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8f7      	bhi.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008

08001128 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e033      	b.n	80011a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	2b00      	cmp	r3, #0
 8001144:	d109      	bne.n	800115a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fd32 	bl	8000bb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	d118      	bne.n	8001198 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800116e:	f023 0302 	bic.w	r3, r3, #2
 8001172:	f043 0202 	orr.w	r2, r3, #2
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 fa48 	bl	8001610 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f023 0303 	bic.w	r3, r3, #3
 800118e:	f043 0201 	orr.w	r2, r3, #1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
 8001196:	e001      	b.n	800119c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d101      	bne.n	80011ce <HAL_ADC_Start_DMA+0x1e>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e0ce      	b.n	800136c <HAL_ADC_Start_DMA+0x1bc>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d018      	beq.n	8001216 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011f4:	4b5f      	ldr	r3, [pc, #380]	; (8001374 <HAL_ADC_Start_DMA+0x1c4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a5f      	ldr	r2, [pc, #380]	; (8001378 <HAL_ADC_Start_DMA+0x1c8>)
 80011fa:	fba2 2303 	umull	r2, r3, r2, r3
 80011fe:	0c9a      	lsrs	r2, r3, #18
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001208:	e002      	b.n	8001210 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	3b01      	subs	r3, #1
 800120e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f9      	bne.n	800120a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001224:	d107      	bne.n	8001236 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001234:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b01      	cmp	r3, #1
 8001242:	f040 8086 	bne.w	8001352 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800124e:	f023 0301 	bic.w	r3, r3, #1
 8001252:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001270:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001284:	d106      	bne.n	8001294 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f023 0206 	bic.w	r2, r3, #6
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	645a      	str	r2, [r3, #68]	; 0x44
 8001292:	e002      	b.n	800129a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a2:	4b36      	ldr	r3, [pc, #216]	; (800137c <HAL_ADC_Start_DMA+0x1cc>)
 80012a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012aa:	4a35      	ldr	r2, [pc, #212]	; (8001380 <HAL_ADC_Start_DMA+0x1d0>)
 80012ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b2:	4a34      	ldr	r2, [pc, #208]	; (8001384 <HAL_ADC_Start_DMA+0x1d4>)
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ba:	4a33      	ldr	r2, [pc, #204]	; (8001388 <HAL_ADC_Start_DMA+0x1d8>)
 80012bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80012d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	334c      	adds	r3, #76	; 0x4c
 80012f2:	4619      	mov	r1, r3
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f000 fcc8 	bl	8001c8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10f      	bne.n	8001328 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d129      	bne.n	800136a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	e020      	b.n	800136a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a17      	ldr	r2, [pc, #92]	; (800138c <HAL_ADC_Start_DMA+0x1dc>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d11b      	bne.n	800136a <HAL_ADC_Start_DMA+0x1ba>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d114      	bne.n	800136a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	e00b      	b.n	800136a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000000 	.word	0x20000000
 8001378:	431bde83 	.word	0x431bde83
 800137c:	40012300 	.word	0x40012300
 8001380:	08001809 	.word	0x08001809
 8001384:	080018c3 	.word	0x080018c3
 8001388:	080018df 	.word	0x080018df
 800138c:	40012000 	.word	0x40012000

08001390 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x1c>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e105      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x228>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b09      	cmp	r3, #9
 80013f6:	d925      	bls.n	8001444 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68d9      	ldr	r1, [r3, #12]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	3b1e      	subs	r3, #30
 800140e:	2207      	movs	r2, #7
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43da      	mvns	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	400a      	ands	r2, r1
 800141c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68d9      	ldr	r1, [r3, #12]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	4618      	mov	r0, r3
 8001430:	4603      	mov	r3, r0
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4403      	add	r3, r0
 8001436:	3b1e      	subs	r3, #30
 8001438:	409a      	lsls	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	e022      	b.n	800148a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6919      	ldr	r1, [r3, #16]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	2207      	movs	r2, #7
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	400a      	ands	r2, r1
 8001466:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6919      	ldr	r1, [r3, #16]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	4603      	mov	r3, r0
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4403      	add	r3, r0
 8001480:	409a      	lsls	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b06      	cmp	r3, #6
 8001490:	d824      	bhi.n	80014dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3b05      	subs	r3, #5
 80014a4:	221f      	movs	r2, #31
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	400a      	ands	r2, r1
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	3b05      	subs	r3, #5
 80014ce:	fa00 f203 	lsl.w	r2, r0, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34
 80014da:	e04c      	b.n	8001576 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d824      	bhi.n	800152e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b23      	subs	r3, #35	; 0x23
 80014f6:	221f      	movs	r2, #31
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43da      	mvns	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	400a      	ands	r2, r1
 8001504:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	3b23      	subs	r3, #35	; 0x23
 8001520:	fa00 f203 	lsl.w	r2, r0, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
 800152c:	e023      	b.n	8001576 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b41      	subs	r3, #65	; 0x41
 8001540:	221f      	movs	r2, #31
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	400a      	ands	r2, r1
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	3b41      	subs	r3, #65	; 0x41
 800156a:	fa00 f203 	lsl.w	r2, r0, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_ADC_ConfigChannel+0x234>)
 8001578:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a21      	ldr	r2, [pc, #132]	; (8001604 <HAL_ADC_ConfigChannel+0x238>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d109      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x1cc>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b12      	cmp	r3, #18
 800158a:	d105      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a19      	ldr	r2, [pc, #100]	; (8001604 <HAL_ADC_ConfigChannel+0x238>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d123      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x21e>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d003      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x1e6>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b11      	cmp	r3, #17
 80015b0:	d11b      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d111      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_ADC_ConfigChannel+0x23c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_ADC_ConfigChannel+0x240>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	0c9a      	lsrs	r2, r3, #18
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40012300 	.word	0x40012300
 8001604:	40012000 	.word	0x40012000
 8001608:	20000000 	.word	0x20000000
 800160c:	431bde83 	.word	0x431bde83

08001610 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001618:	4b79      	ldr	r3, [pc, #484]	; (8001800 <ADC_Init+0x1f0>)
 800161a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	431a      	orrs	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	021a      	lsls	r2, r3, #8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6899      	ldr	r1, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	4a58      	ldr	r2, [pc, #352]	; (8001804 <ADC_Init+0x1f4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d022      	beq.n	80016ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6899      	ldr	r1, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6899      	ldr	r1, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	e00f      	b.n	800170e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800170c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0202 	bic.w	r2, r2, #2
 800171c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6899      	ldr	r1, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7e1b      	ldrb	r3, [r3, #24]
 8001728:	005a      	lsls	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01b      	beq.n	8001774 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800174a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800175a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6859      	ldr	r1, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	3b01      	subs	r3, #1
 8001768:	035a      	lsls	r2, r3, #13
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	e007      	b.n	8001784 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001782:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	3b01      	subs	r3, #1
 80017a0:	051a      	lsls	r2, r3, #20
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6899      	ldr	r1, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017c6:	025a      	lsls	r2, r3, #9
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6899      	ldr	r1, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	029a      	lsls	r2, r3, #10
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	609a      	str	r2, [r3, #8]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40012300 	.word	0x40012300
 8001804:	0f000001 	.word	0x0f000001

08001808 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800181e:	2b00      	cmp	r3, #0
 8001820:	d13c      	bne.n	800189c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d12b      	bne.n	8001894 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001840:	2b00      	cmp	r3, #0
 8001842:	d127      	bne.n	8001894 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800185c:	2b00      	cmp	r3, #0
 800185e:	d119      	bne.n	8001894 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0220 	bic.w	r2, r2, #32
 800186e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff fd7b 	bl	8001390 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800189a:	e00e      	b.n	80018ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f7ff fd85 	bl	80013b8 <HAL_ADC_ErrorCallback>
}
 80018ae:	e004      	b.n	80018ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fd67 	bl	80013a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2240      	movs	r2, #64	; 0x40
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f043 0204 	orr.w	r2, r3, #4
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff fd5a 	bl	80013b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001928:	4013      	ands	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60d3      	str	r3, [r2, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <__NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db0b      	blt.n	800199a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4907      	ldr	r1, [pc, #28]	; (80019a8 <__NVIC_EnableIRQ+0x38>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2001      	movs	r0, #1
 8001992:	fa00 f202 	lsl.w	r2, r0, r2
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f7ff ff8e 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff29 	bl	800190c <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff3e 	bl	8001954 <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff8e 	bl	8001a00 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5d 	bl	80019ac <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff31 	bl	8001970 <__NVIC_EnableIRQ>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffa2 	bl	8001a68 <SysTick_Config>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff fac4 	bl	80010c8 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e099      	b.n	8001c80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b6c:	e00f      	b.n	8001b8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b6e:	f7ff faab 	bl	80010c8 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d908      	bls.n	8001b8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2203      	movs	r2, #3
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e078      	b.n	8001c80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1e8      	bne.n	8001b6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <HAL_DMA_Init+0x158>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d107      	bne.n	8001bf8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f023 0307 	bic.w	r3, r3, #7
 8001c0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d117      	bne.n	8001c52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00e      	beq.n	8001c52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fa6f 	bl	8002118 <DMA_CheckFifoParam>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2240      	movs	r2, #64	; 0x40
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e016      	b.n	8001c80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 fa26 	bl	80020ac <DMA_CalcBaseAndBitshift>
 8001c60:	4603      	mov	r3, r0
 8001c62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	223f      	movs	r2, #63	; 0x3f
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	f010803f 	.word	0xf010803f

08001c8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_DMA_Start_IT+0x26>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e040      	b.n	8001d34 <HAL_DMA_Start_IT+0xa8>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d12f      	bne.n	8001d26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f9b8 	bl	8002050 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	223f      	movs	r2, #63	; 0x3f
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0216 	orr.w	r2, r2, #22
 8001cfa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0208 	orr.w	r2, r2, #8
 8001d12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	e005      	b.n	8001d32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d48:	4b8e      	ldr	r3, [pc, #568]	; (8001f84 <HAL_DMA_IRQHandler+0x248>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a8e      	ldr	r2, [pc, #568]	; (8001f88 <HAL_DMA_IRQHandler+0x24c>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0a9b      	lsrs	r3, r3, #10
 8001d54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	2208      	movs	r2, #8
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01a      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d013      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0204 	bic.w	r2, r2, #4
 8001d8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2208      	movs	r2, #8
 8001d96:	409a      	lsls	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	2201      	movs	r2, #1
 8001dae:	409a      	lsls	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d012      	beq.n	8001dde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	2201      	movs	r2, #1
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	f043 0202 	orr.w	r2, r3, #2
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	2204      	movs	r2, #4
 8001de4:	409a      	lsls	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d012      	beq.n	8001e14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	2204      	movs	r2, #4
 8001e02:	409a      	lsls	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f043 0204 	orr.w	r2, r3, #4
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	2210      	movs	r2, #16
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d043      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d03c      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	2210      	movs	r2, #16
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d018      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d108      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d024      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
 8001e6a:	e01f      	b.n	8001eac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
 8001e7c:	e016      	b.n	8001eac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d107      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0208 	bic.w	r2, r2, #8
 8001e9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 808f 	beq.w	8001fdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8087 	beq.w	8001fdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d136      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0216 	bic.w	r2, r2, #22
 8001ef4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <HAL_DMA_IRQHandler+0x1da>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0208 	bic.w	r2, r2, #8
 8001f24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	223f      	movs	r2, #63	; 0x3f
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d07e      	beq.n	8002048 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
        }
        return;
 8001f52:	e079      	b.n	8002048 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d01d      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10d      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d031      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
 8001f80:	e02c      	b.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
 8001f82:	bf00      	nop
 8001f84:	20000000 	.word	0x20000000
 8001f88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d023      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
 8001f9c:	e01e      	b.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10f      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0210 	bic.w	r2, r2, #16
 8001fba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d032      	beq.n	800204a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d022      	beq.n	8002036 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3301      	adds	r3, #1
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	d307      	bcc.n	8002024 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f2      	bne.n	8002008 <HAL_DMA_IRQHandler+0x2cc>
 8002022:	e000      	b.n	8002026 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002024:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
 8002046:	e000      	b.n	800204a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002048:	bf00      	nop
    }
  }
}
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800206c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b40      	cmp	r3, #64	; 0x40
 800207c:	d108      	bne.n	8002090 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800208e:	e007      	b.n	80020a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	60da      	str	r2, [r3, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	3b10      	subs	r3, #16
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <DMA_CalcBaseAndBitshift+0x64>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020c6:	4a13      	ldr	r2, [pc, #76]	; (8002114 <DMA_CalcBaseAndBitshift+0x68>)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d909      	bls.n	80020ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	1d1a      	adds	r2, r3, #4
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	659a      	str	r2, [r3, #88]	; 0x58
 80020ec:	e007      	b.n	80020fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	aaaaaaab 	.word	0xaaaaaaab
 8002114:	08004c04 	.word	0x08004c04

08002118 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d11f      	bne.n	8002172 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d856      	bhi.n	80021e6 <DMA_CheckFifoParam+0xce>
 8002138:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <DMA_CheckFifoParam+0x28>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002151 	.word	0x08002151
 8002144:	08002163 	.word	0x08002163
 8002148:	08002151 	.word	0x08002151
 800214c:	080021e7 	.word	0x080021e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d046      	beq.n	80021ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002160:	e043      	b.n	80021ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800216a:	d140      	bne.n	80021ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002170:	e03d      	b.n	80021ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800217a:	d121      	bne.n	80021c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d837      	bhi.n	80021f2 <DMA_CheckFifoParam+0xda>
 8002182:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <DMA_CheckFifoParam+0x70>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	08002199 	.word	0x08002199
 800218c:	0800219f 	.word	0x0800219f
 8002190:	08002199 	.word	0x08002199
 8002194:	080021b1 	.word	0x080021b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
      break;
 800219c:	e030      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d025      	beq.n	80021f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ae:	e022      	b.n	80021f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021b8:	d11f      	bne.n	80021fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021be:	e01c      	b.n	80021fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d903      	bls.n	80021ce <DMA_CheckFifoParam+0xb6>
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d003      	beq.n	80021d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021cc:	e018      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
      break;
 80021d2:	e015      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00e      	beq.n	80021fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
      break;
 80021e4:	e00b      	b.n	80021fe <DMA_CheckFifoParam+0xe6>
      break;
 80021e6:	bf00      	nop
 80021e8:	e00a      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
 80021ec:	e008      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;
 80021ee:	bf00      	nop
 80021f0:	e006      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;
 80021f2:	bf00      	nop
 80021f4:	e004      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;
 80021f6:	bf00      	nop
 80021f8:	e002      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;   
 80021fa:	bf00      	nop
 80021fc:	e000      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;
 80021fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e165      	b.n	80024f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800222c:	2201      	movs	r2, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	f040 8154 	bne.w	80024f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d005      	beq.n	8002262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	2b02      	cmp	r3, #2
 8002260:	d130      	bne.n	80022c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002298:	2201      	movs	r2, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 0201 	and.w	r2, r3, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d017      	beq.n	8002300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d123      	bne.n	8002354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	08da      	lsrs	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3208      	adds	r2, #8
 8002314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	08da      	lsrs	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3208      	adds	r2, #8
 800234e:	69b9      	ldr	r1, [r7, #24]
 8002350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0203 	and.w	r2, r3, #3
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80ae 	beq.w	80024f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	4b5d      	ldr	r3, [pc, #372]	; (8002510 <HAL_GPIO_Init+0x300>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a5c      	ldr	r2, [pc, #368]	; (8002510 <HAL_GPIO_Init+0x300>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b5a      	ldr	r3, [pc, #360]	; (8002510 <HAL_GPIO_Init+0x300>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b2:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_GPIO_Init+0x304>)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x308>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d025      	beq.n	800242a <HAL_GPIO_Init+0x21a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_GPIO_Init+0x30c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <HAL_GPIO_Init+0x216>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4d      	ldr	r2, [pc, #308]	; (8002520 <HAL_GPIO_Init+0x310>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0x212>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <HAL_GPIO_Init+0x314>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x20e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4b      	ldr	r2, [pc, #300]	; (8002528 <HAL_GPIO_Init+0x318>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x20a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4a      	ldr	r2, [pc, #296]	; (800252c <HAL_GPIO_Init+0x31c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x206>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a49      	ldr	r2, [pc, #292]	; (8002530 <HAL_GPIO_Init+0x320>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x202>
 800240e:	2306      	movs	r3, #6
 8002410:	e00c      	b.n	800242c <HAL_GPIO_Init+0x21c>
 8002412:	2307      	movs	r3, #7
 8002414:	e00a      	b.n	800242c <HAL_GPIO_Init+0x21c>
 8002416:	2305      	movs	r3, #5
 8002418:	e008      	b.n	800242c <HAL_GPIO_Init+0x21c>
 800241a:	2304      	movs	r3, #4
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x21c>
 800241e:	2303      	movs	r3, #3
 8002420:	e004      	b.n	800242c <HAL_GPIO_Init+0x21c>
 8002422:	2302      	movs	r3, #2
 8002424:	e002      	b.n	800242c <HAL_GPIO_Init+0x21c>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_GPIO_Init+0x21c>
 800242a:	2300      	movs	r3, #0
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	f002 0203 	and.w	r2, r2, #3
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	4093      	lsls	r3, r2
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800243c:	4935      	ldr	r1, [pc, #212]	; (8002514 <HAL_GPIO_Init+0x304>)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244a:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_GPIO_Init+0x324>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246e:	4a31      	ldr	r2, [pc, #196]	; (8002534 <HAL_GPIO_Init+0x324>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002474:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <HAL_GPIO_Init+0x324>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002498:	4a26      	ldr	r2, [pc, #152]	; (8002534 <HAL_GPIO_Init+0x324>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <HAL_GPIO_Init+0x324>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c2:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <HAL_GPIO_Init+0x324>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_GPIO_Init+0x324>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ec:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_GPIO_Init+0x324>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b0f      	cmp	r3, #15
 80024fc:	f67f ae96 	bls.w	800222c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40013800 	.word	0x40013800
 8002518:	40020000 	.word	0x40020000
 800251c:	40020400 	.word	0x40020400
 8002520:	40020800 	.word	0x40020800
 8002524:	40020c00 	.word	0x40020c00
 8002528:	40021000 	.word	0x40021000
 800252c:	40021400 	.word	0x40021400
 8002530:	40021800 	.word	0x40021800
 8002534:	40013c00 	.word	0x40013c00

08002538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
 8002544:	4613      	mov	r3, r2
 8002546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002548:	787b      	ldrb	r3, [r7, #1]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002554:	e003      	b.n	800255e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	041a      	lsls	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	619a      	str	r2, [r3, #24]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800256a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256c:	b08f      	sub	sp, #60	; 0x3c
 800256e:	af0a      	add	r7, sp, #40	; 0x28
 8002570:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e116      	b.n	80027aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fc1c 	bl	8000dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2203      	movs	r2, #3
 80025a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 fbb3 	bl	8003d26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	687e      	ldr	r6, [r7, #4]
 80025c8:	466d      	mov	r5, sp
 80025ca:	f106 0410 	add.w	r4, r6, #16
 80025ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025da:	e885 0003 	stmia.w	r5, {r0, r1}
 80025de:	1d33      	adds	r3, r6, #4
 80025e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e2:	6838      	ldr	r0, [r7, #0]
 80025e4:	f001 fb3e 	bl	8003c64 <USB_CoreInit>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0d7      	b.n	80027aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f001 fba1 	bl	8003d48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	e04a      	b.n	80026a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	333d      	adds	r3, #61	; 0x3d
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	333c      	adds	r3, #60	; 0x3c
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	b298      	uxth	r0, r3
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3344      	adds	r3, #68	; 0x44
 8002648:	4602      	mov	r2, r0
 800264a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3340      	adds	r3, #64	; 0x40
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3348      	adds	r3, #72	; 0x48
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334c      	adds	r3, #76	; 0x4c
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3354      	adds	r3, #84	; 0x54
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	3301      	adds	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d3af      	bcc.n	800260c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e044      	b.n	800273c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	3301      	adds	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	429a      	cmp	r2, r3
 8002744:	d3b5      	bcc.n	80026b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	687e      	ldr	r6, [r7, #4]
 800274e:	466d      	mov	r5, sp
 8002750:	f106 0410 	add.w	r4, r6, #16
 8002754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002760:	e885 0003 	stmia.w	r5, {r0, r1}
 8002764:	1d33      	adds	r3, r6, #4
 8002766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002768:	6838      	ldr	r0, [r7, #0]
 800276a:	f001 fb39 	bl	8003de0 <USB_DevInit>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e014      	b.n	80027aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b01      	cmp	r3, #1
 8002796:	d102      	bne.n	800279e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f80a 	bl	80027b2 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 fcf7 	bl	8004196 <USB_DevDisconnect>

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	f043 0303 	orr.w	r3, r3, #3
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0cc      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d90c      	bls.n	8002838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b65      	ldr	r3, [pc, #404]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0b8      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002850:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002868:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a52      	ldr	r2, [pc, #328]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	494d      	ldr	r1, [pc, #308]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d044      	beq.n	800291c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d119      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e07f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e06f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ca:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e067      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028da:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4934      	ldr	r1, [pc, #208]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ec:	f7fe fbec 	bl	80010c8 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7fe fbe8 	bl	80010c8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e04f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 020c 	and.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d1eb      	bne.n	80028f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d20c      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e032      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4916      	ldr	r1, [pc, #88]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	490e      	ldr	r1, [pc, #56]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002982:	f000 f821 	bl	80029c8 <HAL_RCC_GetSysClockFreq>
 8002986:	4602      	mov	r2, r0
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	490a      	ldr	r1, [pc, #40]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	5ccb      	ldrb	r3, [r1, r3]
 8002996:	fa22 f303 	lsr.w	r3, r2, r3
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fb4c 	bl	8001040 <HAL_InitTick>

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023c00 	.word	0x40023c00
 80029b8:	40023800 	.word	0x40023800
 80029bc:	08004bec 	.word	0x08004bec
 80029c0:	20000000 	.word	0x20000000
 80029c4:	20000004 	.word	0x20000004

080029c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029cc:	b094      	sub	sp, #80	; 0x50
 80029ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	647b      	str	r3, [r7, #68]	; 0x44
 80029d4:	2300      	movs	r3, #0
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d8:	2300      	movs	r3, #0
 80029da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e0:	4b79      	ldr	r3, [pc, #484]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d00d      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x40>
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	f200 80e1 	bhi.w	8002bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x34>
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80029fa:	e0db      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029fc:	4b73      	ldr	r3, [pc, #460]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x204>)
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a00:	e0db      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a02:	4b73      	ldr	r3, [pc, #460]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a06:	e0d8      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a08:	4b6f      	ldr	r3, [pc, #444]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1e:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	099b      	lsrs	r3, r3, #6
 8002a24:	2200      	movs	r2, #0
 8002a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
 8002a32:	2300      	movs	r3, #0
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
 8002a36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	f04f 0000 	mov.w	r0, #0
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	0159      	lsls	r1, r3, #5
 8002a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4c:	0150      	lsls	r0, r2, #5
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4621      	mov	r1, r4
 8002a54:	1a51      	subs	r1, r2, r1
 8002a56:	6139      	str	r1, [r7, #16]
 8002a58:	4629      	mov	r1, r5
 8002a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a6c:	4659      	mov	r1, fp
 8002a6e:	018b      	lsls	r3, r1, #6
 8002a70:	4651      	mov	r1, sl
 8002a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a76:	4651      	mov	r1, sl
 8002a78:	018a      	lsls	r2, r1, #6
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a80:	4659      	mov	r1, fp
 8002a82:	eb63 0901 	sbc.w	r9, r3, r1
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	eb18 0303 	adds.w	r3, r8, r3
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	462b      	mov	r3, r5
 8002aa8:	eb49 0303 	adc.w	r3, r9, r3
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aba:	4629      	mov	r1, r5
 8002abc:	024b      	lsls	r3, r1, #9
 8002abe:	4621      	mov	r1, r4
 8002ac0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	024a      	lsls	r2, r1, #9
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ace:	2200      	movs	r2, #0
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ad8:	f7fd fbf2 	bl	80002c0 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae4:	e058      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	2200      	movs	r2, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	4611      	mov	r1, r2
 8002af2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002af6:	623b      	str	r3, [r7, #32]
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	f04f 0000 	mov.w	r0, #0
 8002b08:	f04f 0100 	mov.w	r1, #0
 8002b0c:	0159      	lsls	r1, r3, #5
 8002b0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b12:	0150      	lsls	r0, r2, #5
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4641      	mov	r1, r8
 8002b1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b1e:	4649      	mov	r1, r9
 8002b20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b38:	ebb2 040a 	subs.w	r4, r2, sl
 8002b3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	00eb      	lsls	r3, r5, #3
 8002b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4e:	00e2      	lsls	r2, r4, #3
 8002b50:	4614      	mov	r4, r2
 8002b52:	461d      	mov	r5, r3
 8002b54:	4643      	mov	r3, r8
 8002b56:	18e3      	adds	r3, r4, r3
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	eb45 0303 	adc.w	r3, r5, r3
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b6e:	4629      	mov	r1, r5
 8002b70:	028b      	lsls	r3, r1, #10
 8002b72:	4621      	mov	r1, r4
 8002b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b78:	4621      	mov	r1, r4
 8002b7a:	028a      	lsls	r2, r1, #10
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b82:	2200      	movs	r2, #0
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	61fa      	str	r2, [r7, #28]
 8002b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b8c:	f7fd fb98 	bl	80002c0 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x204>)
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3750      	adds	r7, #80	; 0x50
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	00f42400 	.word	0x00f42400
 8002bd0:	007a1200 	.word	0x007a1200

08002bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000000 	.word	0x20000000

08002bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bf0:	f7ff fff0 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0a9b      	lsrs	r3, r3, #10
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08004bfc 	.word	0x08004bfc

08002c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c18:	f7ff ffdc 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0b5b      	lsrs	r3, r3, #13
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	; (8002c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	08004bfc 	.word	0x08004bfc

08002c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d010      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002c5c:	4b87      	ldr	r3, [pc, #540]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c62:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4984      	ldr	r1, [pc, #528]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d010      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c8a:	4b7c      	ldr	r3, [pc, #496]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c90:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	4978      	ldr	r1, [pc, #480]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8083 	beq.w	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	4b6f      	ldr	r3, [pc, #444]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a6e      	ldr	r2, [pc, #440]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a69      	ldr	r2, [pc, #420]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce2:	f7fe f9f1 	bl	80010c8 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fe f9ed 	bl	80010c8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e162      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cfc:	4b60      	ldr	r3, [pc, #384]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d08:	4b5c      	ldr	r3, [pc, #368]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02f      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d028      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d26:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d30:	4b54      	ldr	r3, [pc, #336]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d36:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d3c:	4a4f      	ldr	r2, [pc, #316]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d42:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d114      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fe f9bb 	bl	80010c8 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe f9b7 	bl	80010c8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e12a      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d84:	d10d      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002d86:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9a:	4938      	ldr	r1, [pc, #224]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]
 8002da0:	e005      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4a35      	ldr	r2, [pc, #212]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002da8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dac:	6093      	str	r3, [r2, #8]
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dba:	4930      	ldr	r1, [pc, #192]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002dd2:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dd4:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	4922      	ldr	r1, [pc, #136]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d011      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	491a      	ldr	r1, [pc, #104]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e22:	d101      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002e24:	2301      	movs	r3, #1
 8002e26:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	490e      	ldr	r1, [pc, #56]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d004      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b80      	cmp	r3, #128	; 0x80
 8002e56:	f040 8091 	bne.w	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e60:	f7fe f932 	bl	80010c8 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e66:	e013      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e68:	f7fe f92e 	bl	80010c8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d90c      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0a3      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40007000 	.word	0x40007000
 8002e84:	42470e40 	.word	0x42470e40
 8002e88:	424711e0 	.word	0x424711e0
 8002e8c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e90:	4b4e      	ldr	r3, [pc, #312]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e5      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002e9c:	4a4c      	ldr	r2, [pc, #304]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d023      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d019      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee0:	d00e      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d019      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d115      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002efe:	d110      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	019b      	lsls	r3, r3, #6
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	071b      	lsls	r3, r3, #28
 8002f1a:	492c      	ldr	r1, [pc, #176]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	019b      	lsls	r3, r3, #6
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	061b      	lsls	r3, r3, #24
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	071b      	lsls	r3, r3, #28
 8002f48:	4920      	ldr	r1, [pc, #128]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f56:	f7fe f8b7 	bl	80010c8 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f5e:	f7fe f8b3 	bl	80010c8 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e028      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f88:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	490d      	ldr	r1, [pc, #52]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	4904      	ldr	r1, [pc, #16]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	424710d8 	.word	0x424710d8
 8002fd4:	42470068 	.word	0x42470068

08002fd8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e273      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d075      	beq.n	80030e2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ff6:	4b88      	ldr	r3, [pc, #544]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d00c      	beq.n	800301c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003002:	4b85      	ldr	r3, [pc, #532]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800300a:	2b08      	cmp	r3, #8
 800300c:	d112      	bne.n	8003034 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300e:	4b82      	ldr	r3, [pc, #520]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301a:	d10b      	bne.n	8003034 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	4b7e      	ldr	r3, [pc, #504]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d05b      	beq.n	80030e0 <HAL_RCC_OscConfig+0x108>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d157      	bne.n	80030e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e24e      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303c:	d106      	bne.n	800304c <HAL_RCC_OscConfig+0x74>
 800303e:	4b76      	ldr	r3, [pc, #472]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a75      	ldr	r2, [pc, #468]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e01d      	b.n	8003088 <HAL_RCC_OscConfig+0xb0>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003054:	d10c      	bne.n	8003070 <HAL_RCC_OscConfig+0x98>
 8003056:	4b70      	ldr	r3, [pc, #448]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a6f      	ldr	r2, [pc, #444]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 800305c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	4b6d      	ldr	r3, [pc, #436]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a6c      	ldr	r2, [pc, #432]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e00b      	b.n	8003088 <HAL_RCC_OscConfig+0xb0>
 8003070:	4b69      	ldr	r3, [pc, #420]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a68      	ldr	r2, [pc, #416]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b66      	ldr	r3, [pc, #408]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a65      	ldr	r2, [pc, #404]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d013      	beq.n	80030b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe f81a 	bl	80010c8 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003098:	f7fe f816 	bl	80010c8 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	; 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e213      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030aa:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0xc0>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe f806 	bl	80010c8 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fe f802 	bl	80010c8 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e1ff      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d2:	4b51      	ldr	r3, [pc, #324]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0xe8>
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d063      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030ee:	4b4a      	ldr	r3, [pc, #296]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003102:	2b08      	cmp	r3, #8
 8003104:	d11c      	bne.n	8003140 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003106:	4b44      	ldr	r3, [pc, #272]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d116      	bne.n	8003140 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003112:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d005      	beq.n	800312a <HAL_RCC_OscConfig+0x152>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d001      	beq.n	800312a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e1d3      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312a:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4937      	ldr	r1, [pc, #220]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313e:	e03a      	b.n	80031b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d020      	beq.n	800318a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003148:	4b34      	ldr	r3, [pc, #208]	; (800321c <HAL_RCC_OscConfig+0x244>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314e:	f7fd ffbb 	bl	80010c8 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003156:	f7fd ffb7 	bl	80010c8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e1b4      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003168:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003174:	4b28      	ldr	r3, [pc, #160]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4925      	ldr	r1, [pc, #148]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 8003184:	4313      	orrs	r3, r2
 8003186:	600b      	str	r3, [r1, #0]
 8003188:	e015      	b.n	80031b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_OscConfig+0x244>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fd ff9a 	bl	80010c8 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003198:	f7fd ff96 	bl	80010c8 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e193      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031aa:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d036      	beq.n	8003230 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <HAL_RCC_OscConfig+0x248>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d0:	f7fd ff7a 	bl	80010c8 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d8:	f7fd ff76 	bl	80010c8 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e173      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_OscConfig+0x240>)
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x200>
 80031f6:	e01b      	b.n	8003230 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_OscConfig+0x248>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fd ff63 	bl	80010c8 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003204:	e00e      	b.n	8003224 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003206:	f7fd ff5f 	bl	80010c8 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d907      	bls.n	8003224 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e15c      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
 8003218:	40023800 	.word	0x40023800
 800321c:	42470000 	.word	0x42470000
 8003220:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	4b8a      	ldr	r3, [pc, #552]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 8003226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ea      	bne.n	8003206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8097 	beq.w	800336c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003242:	4b83      	ldr	r3, [pc, #524]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	4b7f      	ldr	r3, [pc, #508]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a7e      	ldr	r2, [pc, #504]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 8003258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
 800325e:	4b7c      	ldr	r3, [pc, #496]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326a:	2301      	movs	r3, #1
 800326c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326e:	4b79      	ldr	r3, [pc, #484]	; (8003454 <HAL_RCC_OscConfig+0x47c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d118      	bne.n	80032ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327a:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x47c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a75      	ldr	r2, [pc, #468]	; (8003454 <HAL_RCC_OscConfig+0x47c>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003286:	f7fd ff1f 	bl	80010c8 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328e:	f7fd ff1b 	bl	80010c8 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e118      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	4b6c      	ldr	r3, [pc, #432]	; (8003454 <HAL_RCC_OscConfig+0x47c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d106      	bne.n	80032c2 <HAL_RCC_OscConfig+0x2ea>
 80032b4:	4b66      	ldr	r3, [pc, #408]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	4a65      	ldr	r2, [pc, #404]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6713      	str	r3, [r2, #112]	; 0x70
 80032c0:	e01c      	b.n	80032fc <HAL_RCC_OscConfig+0x324>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x30c>
 80032ca:	4b61      	ldr	r3, [pc, #388]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	4a60      	ldr	r2, [pc, #384]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80032d0:	f043 0304 	orr.w	r3, r3, #4
 80032d4:	6713      	str	r3, [r2, #112]	; 0x70
 80032d6:	4b5e      	ldr	r3, [pc, #376]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	4a5d      	ldr	r2, [pc, #372]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0x324>
 80032e4:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a59      	ldr	r2, [pc, #356]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	4b57      	ldr	r3, [pc, #348]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	4a56      	ldr	r2, [pc, #344]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80032f6:	f023 0304 	bic.w	r3, r3, #4
 80032fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d015      	beq.n	8003330 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fd fee0 	bl	80010c8 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330a:	e00a      	b.n	8003322 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7fd fedc 	bl	80010c8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0d7      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	4b4b      	ldr	r3, [pc, #300]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0ee      	beq.n	800330c <HAL_RCC_OscConfig+0x334>
 800332e:	e014      	b.n	800335a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fd feca 	bl	80010c8 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003336:	e00a      	b.n	800334e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003338:	f7fd fec6 	bl	80010c8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	; 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e0c1      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334e:	4b40      	ldr	r3, [pc, #256]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1ee      	bne.n	8003338 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003360:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	4a3a      	ldr	r2, [pc, #232]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 8003366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80ad 	beq.w	80034d0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003376:	4b36      	ldr	r3, [pc, #216]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b08      	cmp	r3, #8
 8003380:	d060      	beq.n	8003444 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d145      	bne.n	8003416 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338a:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_RCC_OscConfig+0x480>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fd fe9a 	bl	80010c8 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003398:	f7fd fe96 	bl	80010c8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e093      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033aa:	4b29      	ldr	r3, [pc, #164]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69da      	ldr	r2, [r3, #28]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	019b      	lsls	r3, r3, #6
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	3b01      	subs	r3, #1
 80033d0:	041b      	lsls	r3, r3, #16
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	071b      	lsls	r3, r3, #28
 80033e2:	491b      	ldr	r1, [pc, #108]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <HAL_RCC_OscConfig+0x480>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ee:	f7fd fe6b 	bl	80010c8 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f6:	f7fd fe67 	bl	80010c8 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e064      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x41e>
 8003414:	e05c      	b.n	80034d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCC_OscConfig+0x480>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fd fe54 	bl	80010c8 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003424:	f7fd fe50 	bl	80010c8 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e04d      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_RCC_OscConfig+0x478>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x44c>
 8003442:	e045      	b.n	80034d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d107      	bne.n	800345c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e040      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000
 8003458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800345c:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <HAL_RCC_OscConfig+0x504>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d030      	beq.n	80034cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d129      	bne.n	80034cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d122      	bne.n	80034cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800348c:	4013      	ands	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003494:	4293      	cmp	r3, r2
 8003496:	d119      	bne.n	80034cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	3b01      	subs	r3, #1
 80034a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d10f      	bne.n	80034cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800

080034e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e03f      	b.n	8003572 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fd fbe6 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2224      	movs	r2, #36	; 0x24
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f929 	bl	800377c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b08a      	sub	sp, #40	; 0x28
 800357e:	af02      	add	r7, sp, #8
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b20      	cmp	r3, #32
 8003598:	d17c      	bne.n	8003694 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_UART_Transmit+0x2c>
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e075      	b.n	8003696 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_UART_Transmit+0x3e>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e06e      	b.n	8003696 <HAL_UART_Transmit+0x11c>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2221      	movs	r2, #33	; 0x21
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ce:	f7fd fd7b 	bl	80010c8 <HAL_GetTick>
 80035d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	88fa      	ldrh	r2, [r7, #6]
 80035de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e8:	d108      	bne.n	80035fc <HAL_UART_Transmit+0x82>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	e003      	b.n	8003604 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800360c:	e02a      	b.n	8003664 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	2180      	movs	r1, #128	; 0x80
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f840 	bl	800369e <UART_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e036      	b.n	8003696 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10b      	bne.n	8003646 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800363c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	3302      	adds	r3, #2
 8003642:	61bb      	str	r3, [r7, #24]
 8003644:	e007      	b.n	8003656 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	3301      	adds	r3, #1
 8003654:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1cf      	bne.n	800360e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2200      	movs	r2, #0
 8003676:	2140      	movs	r1, #64	; 0x40
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 f810 	bl	800369e <UART_WaitOnFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e006      	b.n	8003696 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b090      	sub	sp, #64	; 0x40
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4613      	mov	r3, r2
 80036ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ae:	e050      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b6:	d04c      	beq.n	8003752 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0x30>
 80036be:	f7fd fd03 	bl	80010c8 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d241      	bcs.n	8003752 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	330c      	adds	r3, #12
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	330c      	adds	r3, #12
 80036ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ee:	637a      	str	r2, [r7, #52]	; 0x34
 80036f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e5      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3314      	adds	r3, #20
 8003708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	613b      	str	r3, [r7, #16]
   return(result);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	63bb      	str	r3, [r7, #56]	; 0x38
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3314      	adds	r3, #20
 8003720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003722:	623a      	str	r2, [r7, #32]
 8003724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	69f9      	ldr	r1, [r7, #28]
 8003728:	6a3a      	ldr	r2, [r7, #32]
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e5      	bne.n	8003702 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e00f      	b.n	8003772 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	bf0c      	ite	eq
 8003762:	2301      	moveq	r3, #1
 8003764:	2300      	movne	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	429a      	cmp	r2, r3
 800376e:	d09f      	beq.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3740      	adds	r7, #64	; 0x40
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800377c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003780:	b0c0      	sub	sp, #256	; 0x100
 8003782:	af00      	add	r7, sp, #0
 8003784:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	68d9      	ldr	r1, [r3, #12]
 800379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	ea40 0301 	orr.w	r3, r0, r1
 80037a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037d4:	f021 010c 	bic.w	r1, r1, #12
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037e2:	430b      	orrs	r3, r1
 80037e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f6:	6999      	ldr	r1, [r3, #24]
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	ea40 0301 	orr.w	r3, r0, r1
 8003802:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b8f      	ldr	r3, [pc, #572]	; (8003a48 <UART_SetConfig+0x2cc>)
 800380c:	429a      	cmp	r2, r3
 800380e:	d005      	beq.n	800381c <UART_SetConfig+0xa0>
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b8d      	ldr	r3, [pc, #564]	; (8003a4c <UART_SetConfig+0x2d0>)
 8003818:	429a      	cmp	r2, r3
 800381a:	d104      	bne.n	8003826 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800381c:	f7ff f9fa 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 8003820:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003824:	e003      	b.n	800382e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003826:	f7ff f9e1 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 800382a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003838:	f040 810c 	bne.w	8003a54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800383c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003840:	2200      	movs	r2, #0
 8003842:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003846:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800384a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800384e:	4622      	mov	r2, r4
 8003850:	462b      	mov	r3, r5
 8003852:	1891      	adds	r1, r2, r2
 8003854:	65b9      	str	r1, [r7, #88]	; 0x58
 8003856:	415b      	adcs	r3, r3
 8003858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800385a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800385e:	4621      	mov	r1, r4
 8003860:	eb12 0801 	adds.w	r8, r2, r1
 8003864:	4629      	mov	r1, r5
 8003866:	eb43 0901 	adc.w	r9, r3, r1
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800387a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800387e:	4690      	mov	r8, r2
 8003880:	4699      	mov	r9, r3
 8003882:	4623      	mov	r3, r4
 8003884:	eb18 0303 	adds.w	r3, r8, r3
 8003888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800388c:	462b      	mov	r3, r5
 800388e:	eb49 0303 	adc.w	r3, r9, r3
 8003892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038aa:	460b      	mov	r3, r1
 80038ac:	18db      	adds	r3, r3, r3
 80038ae:	653b      	str	r3, [r7, #80]	; 0x50
 80038b0:	4613      	mov	r3, r2
 80038b2:	eb42 0303 	adc.w	r3, r2, r3
 80038b6:	657b      	str	r3, [r7, #84]	; 0x54
 80038b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038c0:	f7fc fcfe 	bl	80002c0 <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4b61      	ldr	r3, [pc, #388]	; (8003a50 <UART_SetConfig+0x2d4>)
 80038ca:	fba3 2302 	umull	r2, r3, r3, r2
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	011c      	lsls	r4, r3, #4
 80038d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038e4:	4642      	mov	r2, r8
 80038e6:	464b      	mov	r3, r9
 80038e8:	1891      	adds	r1, r2, r2
 80038ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80038ec:	415b      	adcs	r3, r3
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038f4:	4641      	mov	r1, r8
 80038f6:	eb12 0a01 	adds.w	sl, r2, r1
 80038fa:	4649      	mov	r1, r9
 80038fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800390c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003914:	4692      	mov	sl, r2
 8003916:	469b      	mov	fp, r3
 8003918:	4643      	mov	r3, r8
 800391a:	eb1a 0303 	adds.w	r3, sl, r3
 800391e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003922:	464b      	mov	r3, r9
 8003924:	eb4b 0303 	adc.w	r3, fp, r3
 8003928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003938:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800393c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003940:	460b      	mov	r3, r1
 8003942:	18db      	adds	r3, r3, r3
 8003944:	643b      	str	r3, [r7, #64]	; 0x40
 8003946:	4613      	mov	r3, r2
 8003948:	eb42 0303 	adc.w	r3, r2, r3
 800394c:	647b      	str	r3, [r7, #68]	; 0x44
 800394e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003952:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003956:	f7fc fcb3 	bl	80002c0 <__aeabi_uldivmod>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4611      	mov	r1, r2
 8003960:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003962:	fba3 2301 	umull	r2, r3, r3, r1
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2264      	movs	r2, #100	; 0x64
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	1acb      	subs	r3, r1, r3
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003976:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003978:	fba3 2302 	umull	r2, r3, r3, r2
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003984:	441c      	add	r4, r3
 8003986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800398a:	2200      	movs	r2, #0
 800398c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003990:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003994:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003998:	4642      	mov	r2, r8
 800399a:	464b      	mov	r3, r9
 800399c:	1891      	adds	r1, r2, r2
 800399e:	63b9      	str	r1, [r7, #56]	; 0x38
 80039a0:	415b      	adcs	r3, r3
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039a8:	4641      	mov	r1, r8
 80039aa:	1851      	adds	r1, r2, r1
 80039ac:	6339      	str	r1, [r7, #48]	; 0x30
 80039ae:	4649      	mov	r1, r9
 80039b0:	414b      	adcs	r3, r1
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039c0:	4659      	mov	r1, fp
 80039c2:	00cb      	lsls	r3, r1, #3
 80039c4:	4651      	mov	r1, sl
 80039c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ca:	4651      	mov	r1, sl
 80039cc:	00ca      	lsls	r2, r1, #3
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	4642      	mov	r2, r8
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039dc:	464b      	mov	r3, r9
 80039de:	460a      	mov	r2, r1
 80039e0:	eb42 0303 	adc.w	r3, r2, r3
 80039e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039fc:	460b      	mov	r3, r1
 80039fe:	18db      	adds	r3, r3, r3
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a02:	4613      	mov	r3, r2
 8003a04:	eb42 0303 	adc.w	r3, r2, r3
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a12:	f7fc fc55 	bl	80002c0 <__aeabi_uldivmod>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	2164      	movs	r1, #100	; 0x64
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	3332      	adds	r3, #50	; 0x32
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <UART_SetConfig+0x2d4>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	f003 0207 	and.w	r2, r3, #7
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4422      	add	r2, r4
 8003a42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a44:	e105      	b.n	8003c52 <UART_SetConfig+0x4d6>
 8003a46:	bf00      	nop
 8003a48:	40011000 	.word	0x40011000
 8003a4c:	40011400 	.word	0x40011400
 8003a50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a66:	4642      	mov	r2, r8
 8003a68:	464b      	mov	r3, r9
 8003a6a:	1891      	adds	r1, r2, r2
 8003a6c:	6239      	str	r1, [r7, #32]
 8003a6e:	415b      	adcs	r3, r3
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a76:	4641      	mov	r1, r8
 8003a78:	1854      	adds	r4, r2, r1
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	eb43 0501 	adc.w	r5, r3, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	00eb      	lsls	r3, r5, #3
 8003a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a8e:	00e2      	lsls	r2, r4, #3
 8003a90:	4614      	mov	r4, r2
 8003a92:	461d      	mov	r5, r3
 8003a94:	4643      	mov	r3, r8
 8003a96:	18e3      	adds	r3, r4, r3
 8003a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	eb45 0303 	adc.w	r3, r5, r3
 8003aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ab2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	008b      	lsls	r3, r1, #2
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003acc:	4621      	mov	r1, r4
 8003ace:	008a      	lsls	r2, r1, #2
 8003ad0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ad4:	f7fc fbf4 	bl	80002c0 <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4b60      	ldr	r3, [pc, #384]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003ade:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	011c      	lsls	r4, r3, #4
 8003ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003af0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003af4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003af8:	4642      	mov	r2, r8
 8003afa:	464b      	mov	r3, r9
 8003afc:	1891      	adds	r1, r2, r2
 8003afe:	61b9      	str	r1, [r7, #24]
 8003b00:	415b      	adcs	r3, r3
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b08:	4641      	mov	r1, r8
 8003b0a:	1851      	adds	r1, r2, r1
 8003b0c:	6139      	str	r1, [r7, #16]
 8003b0e:	4649      	mov	r1, r9
 8003b10:	414b      	adcs	r3, r1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b20:	4659      	mov	r1, fp
 8003b22:	00cb      	lsls	r3, r1, #3
 8003b24:	4651      	mov	r1, sl
 8003b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2a:	4651      	mov	r1, sl
 8003b2c:	00ca      	lsls	r2, r1, #3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	4642      	mov	r2, r8
 8003b36:	189b      	adds	r3, r3, r2
 8003b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	460a      	mov	r2, r1
 8003b40:	eb42 0303 	adc.w	r3, r2, r3
 8003b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b60:	4649      	mov	r1, r9
 8003b62:	008b      	lsls	r3, r1, #2
 8003b64:	4641      	mov	r1, r8
 8003b66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	008a      	lsls	r2, r1, #2
 8003b6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b72:	f7fc fba5 	bl	80002c0 <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	2164      	movs	r1, #100	; 0x64
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	3332      	adds	r3, #50	; 0x32
 8003b8e:	4a34      	ldr	r2, [pc, #208]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b9a:	441c      	add	r4, r3
 8003b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ba4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ba6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003baa:	4642      	mov	r2, r8
 8003bac:	464b      	mov	r3, r9
 8003bae:	1891      	adds	r1, r2, r2
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bba:	4641      	mov	r1, r8
 8003bbc:	1851      	adds	r1, r2, r1
 8003bbe:	6039      	str	r1, [r7, #0]
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	414b      	adcs	r3, r1
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bd2:	4659      	mov	r1, fp
 8003bd4:	00cb      	lsls	r3, r1, #3
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bdc:	4651      	mov	r1, sl
 8003bde:	00ca      	lsls	r2, r1, #3
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	4603      	mov	r3, r0
 8003be6:	4642      	mov	r2, r8
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bec:	464b      	mov	r3, r9
 8003bee:	460a      	mov	r2, r1
 8003bf0:	eb42 0303 	adc.w	r3, r2, r3
 8003bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8003c00:	667a      	str	r2, [r7, #100]	; 0x64
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c0e:	4649      	mov	r1, r9
 8003c10:	008b      	lsls	r3, r1, #2
 8003c12:	4641      	mov	r1, r8
 8003c14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c18:	4641      	mov	r1, r8
 8003c1a:	008a      	lsls	r2, r1, #2
 8003c1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c20:	f7fc fb4e 	bl	80002c0 <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2164      	movs	r1, #100	; 0x64
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	3332      	adds	r3, #50	; 0x32
 8003c3c:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <UART_SetConfig+0x4e4>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	f003 020f 	and.w	r2, r3, #15
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4422      	add	r2, r4
 8003c50:	609a      	str	r2, [r3, #8]
}
 8003c52:	bf00      	nop
 8003c54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	51eb851f 	.word	0x51eb851f

08003c64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c64:	b084      	sub	sp, #16
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	f107 001c 	add.w	r0, r7, #28
 8003c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d122      	bne.n	8003cc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d105      	bne.n	8003cb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fa9c 	bl	80041f4 <USB_CoreReset>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	e01a      	b.n	8003cf8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa90 	bl	80041f4 <USB_CoreReset>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
 8003cea:	e005      	b.n	8003cf8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d10b      	bne.n	8003d16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f043 0206 	orr.w	r2, r3, #6
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f043 0220 	orr.w	r2, r3, #32
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d22:	b004      	add	sp, #16
 8003d24:	4770      	bx	lr

08003d26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d115      	bne.n	8003d96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d76:	2001      	movs	r0, #1
 8003d78:	f7fd f9b2 	bl	80010e0 <HAL_Delay>
      ms++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa28 	bl	80041d8 <USB_GetMode>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d01e      	beq.n	8003dcc <USB_SetCurrentMode+0x84>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b31      	cmp	r3, #49	; 0x31
 8003d92:	d9f0      	bls.n	8003d76 <USB_SetCurrentMode+0x2e>
 8003d94:	e01a      	b.n	8003dcc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d115      	bne.n	8003dc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7fd f999 	bl	80010e0 <HAL_Delay>
      ms++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3301      	adds	r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fa0f 	bl	80041d8 <USB_GetMode>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <USB_SetCurrentMode+0x84>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b31      	cmp	r3, #49	; 0x31
 8003dc4:	d9f0      	bls.n	8003da8 <USB_SetCurrentMode+0x60>
 8003dc6:	e001      	b.n	8003dcc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e005      	b.n	8003dd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b32      	cmp	r3, #50	; 0x32
 8003dd0:	d101      	bne.n	8003dd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003de0:	b084      	sub	sp, #16
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	e009      	b.n	8003e14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	3340      	adds	r3, #64	; 0x40
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3301      	adds	r3, #1
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b0e      	cmp	r3, #14
 8003e18:	d9f2      	bls.n	8003e00 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11c      	bne.n	8003e5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e2e:	f043 0302 	orr.w	r3, r3, #2
 8003e32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e005      	b.n	8003e66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e78:	4619      	mov	r1, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e80:	461a      	mov	r2, r3
 8003e82:	680b      	ldr	r3, [r1, #0]
 8003e84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10c      	bne.n	8003ea6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e92:	2100      	movs	r1, #0
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f965 	bl	8004164 <USB_SetDevSpeed>
 8003e9a:	e008      	b.n	8003eae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f960 	bl	8004164 <USB_SetDevSpeed>
 8003ea4:	e003      	b.n	8003eae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ea6:	2103      	movs	r1, #3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f95b 	bl	8004164 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003eae:	2110      	movs	r1, #16
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f8f3 	bl	800409c <USB_FlushTxFifo>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f91f 	bl	8004104 <USB_FlushRxFifo>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2300      	movs	r3, #0
 8003eda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	461a      	mov	r2, r3
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	e043      	b.n	8003f82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f10:	d118      	bne.n	8003f44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10a      	bne.n	8003f2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f24:	461a      	mov	r2, r3
 8003f26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e013      	b.n	8003f56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e008      	b.n	8003f56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	461a      	mov	r2, r3
 8003f52:	2300      	movs	r3, #0
 8003f54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	461a      	mov	r2, r3
 8003f64:	2300      	movs	r3, #0
 8003f66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f74:	461a      	mov	r2, r3
 8003f76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d3b7      	bcc.n	8003efa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	e043      	b.n	8004018 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fa6:	d118      	bne.n	8003fda <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e013      	b.n	8003fec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	e008      	b.n	8003fec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2300      	movs	r3, #0
 8003fea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400a:	461a      	mov	r2, r3
 800400c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004010:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	3301      	adds	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	429a      	cmp	r2, r3
 800401e:	d3b7      	bcc.n	8003f90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800402e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004032:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004040:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f043 0210 	orr.w	r2, r3, #16
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <USB_DevInit+0x2b8>)
 800405a:	4313      	orrs	r3, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f043 0208 	orr.w	r2, r3, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d107      	bne.n	8004088 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004080:	f043 0304 	orr.w	r3, r3, #4
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004088:	7dfb      	ldrb	r3, [r7, #23]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004094:	b004      	add	sp, #16
 8004096:	4770      	bx	lr
 8004098:	803c3800 	.word	0x803c3800

0800409c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3301      	adds	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a13      	ldr	r2, [pc, #76]	; (8004100 <USB_FlushTxFifo+0x64>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e01b      	b.n	80040f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	daf2      	bge.n	80040aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	019b      	lsls	r3, r3, #6
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3301      	adds	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a08      	ldr	r2, [pc, #32]	; (8004100 <USB_FlushTxFifo+0x64>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e006      	b.n	80040f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d0f0      	beq.n	80040d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	00030d40 	.word	0x00030d40

08004104 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3301      	adds	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4a11      	ldr	r2, [pc, #68]	; (8004160 <USB_FlushRxFifo+0x5c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e018      	b.n	8004154 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	daf2      	bge.n	8004110 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2210      	movs	r2, #16
 8004132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3301      	adds	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a08      	ldr	r2, [pc, #32]	; (8004160 <USB_FlushRxFifo+0x5c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e006      	b.n	8004154 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b10      	cmp	r3, #16
 8004150:	d0f0      	beq.n	8004134 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	00030d40 	.word	0x00030d40

08004164 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004184:	4313      	orrs	r3, r2
 8004186:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004196:	b480      	push	{r7}
 8004198:	b085      	sub	sp, #20
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041b0:	f023 0303 	bic.w	r3, r3, #3
 80041b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0301 	and.w	r3, r3, #1
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3301      	adds	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a13      	ldr	r2, [pc, #76]	; (8004258 <USB_CoreReset+0x64>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e01b      	b.n	800424a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	daf2      	bge.n	8004200 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f043 0201 	orr.w	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3301      	adds	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a09      	ldr	r2, [pc, #36]	; (8004258 <USB_CoreReset+0x64>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e006      	b.n	800424a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d0f0      	beq.n	800422a <USB_CoreReset+0x36>

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	00030d40 	.word	0x00030d40

0800425c <__errno>:
 800425c:	4b01      	ldr	r3, [pc, #4]	; (8004264 <__errno+0x8>)
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	2000000c 	.word	0x2000000c

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4d0d      	ldr	r5, [pc, #52]	; (80042a0 <__libc_init_array+0x38>)
 800426c:	4c0d      	ldr	r4, [pc, #52]	; (80042a4 <__libc_init_array+0x3c>)
 800426e:	1b64      	subs	r4, r4, r5
 8004270:	10a4      	asrs	r4, r4, #2
 8004272:	2600      	movs	r6, #0
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	4d0b      	ldr	r5, [pc, #44]	; (80042a8 <__libc_init_array+0x40>)
 800427a:	4c0c      	ldr	r4, [pc, #48]	; (80042ac <__libc_init_array+0x44>)
 800427c:	f000 fc9e 	bl	8004bbc <_init>
 8004280:	1b64      	subs	r4, r4, r5
 8004282:	10a4      	asrs	r4, r4, #2
 8004284:	2600      	movs	r6, #0
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	f855 3b04 	ldr.w	r3, [r5], #4
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	08004c48 	.word	0x08004c48
 80042a4:	08004c48 	.word	0x08004c48
 80042a8:	08004c48 	.word	0x08004c48
 80042ac:	08004c4c 	.word	0x08004c4c

080042b0 <malloc>:
 80042b0:	4b02      	ldr	r3, [pc, #8]	; (80042bc <malloc+0xc>)
 80042b2:	4601      	mov	r1, r0
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	f000 b87f 	b.w	80043b8 <_malloc_r>
 80042ba:	bf00      	nop
 80042bc:	2000000c 	.word	0x2000000c

080042c0 <free>:
 80042c0:	4b02      	ldr	r3, [pc, #8]	; (80042cc <free+0xc>)
 80042c2:	4601      	mov	r1, r0
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	f000 b80b 	b.w	80042e0 <_free_r>
 80042ca:	bf00      	nop
 80042cc:	2000000c 	.word	0x2000000c

080042d0 <memset>:
 80042d0:	4402      	add	r2, r0
 80042d2:	4603      	mov	r3, r0
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d100      	bne.n	80042da <memset+0xa>
 80042d8:	4770      	bx	lr
 80042da:	f803 1b01 	strb.w	r1, [r3], #1
 80042de:	e7f9      	b.n	80042d4 <memset+0x4>

080042e0 <_free_r>:
 80042e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042e2:	2900      	cmp	r1, #0
 80042e4:	d044      	beq.n	8004370 <_free_r+0x90>
 80042e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ea:	9001      	str	r0, [sp, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f1a1 0404 	sub.w	r4, r1, #4
 80042f2:	bfb8      	it	lt
 80042f4:	18e4      	addlt	r4, r4, r3
 80042f6:	f000 f903 	bl	8004500 <__malloc_lock>
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <_free_r+0x94>)
 80042fc:	9801      	ldr	r0, [sp, #4]
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	b933      	cbnz	r3, 8004310 <_free_r+0x30>
 8004302:	6063      	str	r3, [r4, #4]
 8004304:	6014      	str	r4, [r2, #0]
 8004306:	b003      	add	sp, #12
 8004308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800430c:	f000 b8fe 	b.w	800450c <__malloc_unlock>
 8004310:	42a3      	cmp	r3, r4
 8004312:	d908      	bls.n	8004326 <_free_r+0x46>
 8004314:	6825      	ldr	r5, [r4, #0]
 8004316:	1961      	adds	r1, r4, r5
 8004318:	428b      	cmp	r3, r1
 800431a:	bf01      	itttt	eq
 800431c:	6819      	ldreq	r1, [r3, #0]
 800431e:	685b      	ldreq	r3, [r3, #4]
 8004320:	1949      	addeq	r1, r1, r5
 8004322:	6021      	streq	r1, [r4, #0]
 8004324:	e7ed      	b.n	8004302 <_free_r+0x22>
 8004326:	461a      	mov	r2, r3
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	b10b      	cbz	r3, 8004330 <_free_r+0x50>
 800432c:	42a3      	cmp	r3, r4
 800432e:	d9fa      	bls.n	8004326 <_free_r+0x46>
 8004330:	6811      	ldr	r1, [r2, #0]
 8004332:	1855      	adds	r5, r2, r1
 8004334:	42a5      	cmp	r5, r4
 8004336:	d10b      	bne.n	8004350 <_free_r+0x70>
 8004338:	6824      	ldr	r4, [r4, #0]
 800433a:	4421      	add	r1, r4
 800433c:	1854      	adds	r4, r2, r1
 800433e:	42a3      	cmp	r3, r4
 8004340:	6011      	str	r1, [r2, #0]
 8004342:	d1e0      	bne.n	8004306 <_free_r+0x26>
 8004344:	681c      	ldr	r4, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	6053      	str	r3, [r2, #4]
 800434a:	4421      	add	r1, r4
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	e7da      	b.n	8004306 <_free_r+0x26>
 8004350:	d902      	bls.n	8004358 <_free_r+0x78>
 8004352:	230c      	movs	r3, #12
 8004354:	6003      	str	r3, [r0, #0]
 8004356:	e7d6      	b.n	8004306 <_free_r+0x26>
 8004358:	6825      	ldr	r5, [r4, #0]
 800435a:	1961      	adds	r1, r4, r5
 800435c:	428b      	cmp	r3, r1
 800435e:	bf04      	itt	eq
 8004360:	6819      	ldreq	r1, [r3, #0]
 8004362:	685b      	ldreq	r3, [r3, #4]
 8004364:	6063      	str	r3, [r4, #4]
 8004366:	bf04      	itt	eq
 8004368:	1949      	addeq	r1, r1, r5
 800436a:	6021      	streq	r1, [r4, #0]
 800436c:	6054      	str	r4, [r2, #4]
 800436e:	e7ca      	b.n	8004306 <_free_r+0x26>
 8004370:	b003      	add	sp, #12
 8004372:	bd30      	pop	{r4, r5, pc}
 8004374:	200006d0 	.word	0x200006d0

08004378 <sbrk_aligned>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	4e0e      	ldr	r6, [pc, #56]	; (80043b4 <sbrk_aligned+0x3c>)
 800437c:	460c      	mov	r4, r1
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	4605      	mov	r5, r0
 8004382:	b911      	cbnz	r1, 800438a <sbrk_aligned+0x12>
 8004384:	f000 f88c 	bl	80044a0 <_sbrk_r>
 8004388:	6030      	str	r0, [r6, #0]
 800438a:	4621      	mov	r1, r4
 800438c:	4628      	mov	r0, r5
 800438e:	f000 f887 	bl	80044a0 <_sbrk_r>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	d00a      	beq.n	80043ac <sbrk_aligned+0x34>
 8004396:	1cc4      	adds	r4, r0, #3
 8004398:	f024 0403 	bic.w	r4, r4, #3
 800439c:	42a0      	cmp	r0, r4
 800439e:	d007      	beq.n	80043b0 <sbrk_aligned+0x38>
 80043a0:	1a21      	subs	r1, r4, r0
 80043a2:	4628      	mov	r0, r5
 80043a4:	f000 f87c 	bl	80044a0 <_sbrk_r>
 80043a8:	3001      	adds	r0, #1
 80043aa:	d101      	bne.n	80043b0 <sbrk_aligned+0x38>
 80043ac:	f04f 34ff 	mov.w	r4, #4294967295
 80043b0:	4620      	mov	r0, r4
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	200006d4 	.word	0x200006d4

080043b8 <_malloc_r>:
 80043b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043bc:	1ccd      	adds	r5, r1, #3
 80043be:	f025 0503 	bic.w	r5, r5, #3
 80043c2:	3508      	adds	r5, #8
 80043c4:	2d0c      	cmp	r5, #12
 80043c6:	bf38      	it	cc
 80043c8:	250c      	movcc	r5, #12
 80043ca:	2d00      	cmp	r5, #0
 80043cc:	4607      	mov	r7, r0
 80043ce:	db01      	blt.n	80043d4 <_malloc_r+0x1c>
 80043d0:	42a9      	cmp	r1, r5
 80043d2:	d905      	bls.n	80043e0 <_malloc_r+0x28>
 80043d4:	230c      	movs	r3, #12
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	2600      	movs	r6, #0
 80043da:	4630      	mov	r0, r6
 80043dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e0:	4e2e      	ldr	r6, [pc, #184]	; (800449c <_malloc_r+0xe4>)
 80043e2:	f000 f88d 	bl	8004500 <__malloc_lock>
 80043e6:	6833      	ldr	r3, [r6, #0]
 80043e8:	461c      	mov	r4, r3
 80043ea:	bb34      	cbnz	r4, 800443a <_malloc_r+0x82>
 80043ec:	4629      	mov	r1, r5
 80043ee:	4638      	mov	r0, r7
 80043f0:	f7ff ffc2 	bl	8004378 <sbrk_aligned>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	4604      	mov	r4, r0
 80043f8:	d14d      	bne.n	8004496 <_malloc_r+0xde>
 80043fa:	6834      	ldr	r4, [r6, #0]
 80043fc:	4626      	mov	r6, r4
 80043fe:	2e00      	cmp	r6, #0
 8004400:	d140      	bne.n	8004484 <_malloc_r+0xcc>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	4631      	mov	r1, r6
 8004406:	4638      	mov	r0, r7
 8004408:	eb04 0803 	add.w	r8, r4, r3
 800440c:	f000 f848 	bl	80044a0 <_sbrk_r>
 8004410:	4580      	cmp	r8, r0
 8004412:	d13a      	bne.n	800448a <_malloc_r+0xd2>
 8004414:	6821      	ldr	r1, [r4, #0]
 8004416:	3503      	adds	r5, #3
 8004418:	1a6d      	subs	r5, r5, r1
 800441a:	f025 0503 	bic.w	r5, r5, #3
 800441e:	3508      	adds	r5, #8
 8004420:	2d0c      	cmp	r5, #12
 8004422:	bf38      	it	cc
 8004424:	250c      	movcc	r5, #12
 8004426:	4629      	mov	r1, r5
 8004428:	4638      	mov	r0, r7
 800442a:	f7ff ffa5 	bl	8004378 <sbrk_aligned>
 800442e:	3001      	adds	r0, #1
 8004430:	d02b      	beq.n	800448a <_malloc_r+0xd2>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	442b      	add	r3, r5
 8004436:	6023      	str	r3, [r4, #0]
 8004438:	e00e      	b.n	8004458 <_malloc_r+0xa0>
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	1b52      	subs	r2, r2, r5
 800443e:	d41e      	bmi.n	800447e <_malloc_r+0xc6>
 8004440:	2a0b      	cmp	r2, #11
 8004442:	d916      	bls.n	8004472 <_malloc_r+0xba>
 8004444:	1961      	adds	r1, r4, r5
 8004446:	42a3      	cmp	r3, r4
 8004448:	6025      	str	r5, [r4, #0]
 800444a:	bf18      	it	ne
 800444c:	6059      	strne	r1, [r3, #4]
 800444e:	6863      	ldr	r3, [r4, #4]
 8004450:	bf08      	it	eq
 8004452:	6031      	streq	r1, [r6, #0]
 8004454:	5162      	str	r2, [r4, r5]
 8004456:	604b      	str	r3, [r1, #4]
 8004458:	4638      	mov	r0, r7
 800445a:	f104 060b 	add.w	r6, r4, #11
 800445e:	f000 f855 	bl	800450c <__malloc_unlock>
 8004462:	f026 0607 	bic.w	r6, r6, #7
 8004466:	1d23      	adds	r3, r4, #4
 8004468:	1af2      	subs	r2, r6, r3
 800446a:	d0b6      	beq.n	80043da <_malloc_r+0x22>
 800446c:	1b9b      	subs	r3, r3, r6
 800446e:	50a3      	str	r3, [r4, r2]
 8004470:	e7b3      	b.n	80043da <_malloc_r+0x22>
 8004472:	6862      	ldr	r2, [r4, #4]
 8004474:	42a3      	cmp	r3, r4
 8004476:	bf0c      	ite	eq
 8004478:	6032      	streq	r2, [r6, #0]
 800447a:	605a      	strne	r2, [r3, #4]
 800447c:	e7ec      	b.n	8004458 <_malloc_r+0xa0>
 800447e:	4623      	mov	r3, r4
 8004480:	6864      	ldr	r4, [r4, #4]
 8004482:	e7b2      	b.n	80043ea <_malloc_r+0x32>
 8004484:	4634      	mov	r4, r6
 8004486:	6876      	ldr	r6, [r6, #4]
 8004488:	e7b9      	b.n	80043fe <_malloc_r+0x46>
 800448a:	230c      	movs	r3, #12
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	4638      	mov	r0, r7
 8004490:	f000 f83c 	bl	800450c <__malloc_unlock>
 8004494:	e7a1      	b.n	80043da <_malloc_r+0x22>
 8004496:	6025      	str	r5, [r4, #0]
 8004498:	e7de      	b.n	8004458 <_malloc_r+0xa0>
 800449a:	bf00      	nop
 800449c:	200006d0 	.word	0x200006d0

080044a0 <_sbrk_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4d06      	ldr	r5, [pc, #24]	; (80044bc <_sbrk_r+0x1c>)
 80044a4:	2300      	movs	r3, #0
 80044a6:	4604      	mov	r4, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	f7fc fd34 	bl	8000f18 <_sbrk>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_sbrk_r+0x1a>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_sbrk_r+0x1a>
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	200006d8 	.word	0x200006d8

080044c0 <siprintf>:
 80044c0:	b40e      	push	{r1, r2, r3}
 80044c2:	b500      	push	{lr}
 80044c4:	b09c      	sub	sp, #112	; 0x70
 80044c6:	ab1d      	add	r3, sp, #116	; 0x74
 80044c8:	9002      	str	r0, [sp, #8]
 80044ca:	9006      	str	r0, [sp, #24]
 80044cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044d0:	4809      	ldr	r0, [pc, #36]	; (80044f8 <siprintf+0x38>)
 80044d2:	9107      	str	r1, [sp, #28]
 80044d4:	9104      	str	r1, [sp, #16]
 80044d6:	4909      	ldr	r1, [pc, #36]	; (80044fc <siprintf+0x3c>)
 80044d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044dc:	9105      	str	r1, [sp, #20]
 80044de:	6800      	ldr	r0, [r0, #0]
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	a902      	add	r1, sp, #8
 80044e4:	f000 f874 	bl	80045d0 <_svfiprintf_r>
 80044e8:	9b02      	ldr	r3, [sp, #8]
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	b01c      	add	sp, #112	; 0x70
 80044f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044f4:	b003      	add	sp, #12
 80044f6:	4770      	bx	lr
 80044f8:	2000000c 	.word	0x2000000c
 80044fc:	ffff0208 	.word	0xffff0208

08004500 <__malloc_lock>:
 8004500:	4801      	ldr	r0, [pc, #4]	; (8004508 <__malloc_lock+0x8>)
 8004502:	f000 baf9 	b.w	8004af8 <__retarget_lock_acquire_recursive>
 8004506:	bf00      	nop
 8004508:	200006dc 	.word	0x200006dc

0800450c <__malloc_unlock>:
 800450c:	4801      	ldr	r0, [pc, #4]	; (8004514 <__malloc_unlock+0x8>)
 800450e:	f000 baf4 	b.w	8004afa <__retarget_lock_release_recursive>
 8004512:	bf00      	nop
 8004514:	200006dc 	.word	0x200006dc

08004518 <__ssputs_r>:
 8004518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	688e      	ldr	r6, [r1, #8]
 800451e:	429e      	cmp	r6, r3
 8004520:	4682      	mov	sl, r0
 8004522:	460c      	mov	r4, r1
 8004524:	4690      	mov	r8, r2
 8004526:	461f      	mov	r7, r3
 8004528:	d838      	bhi.n	800459c <__ssputs_r+0x84>
 800452a:	898a      	ldrh	r2, [r1, #12]
 800452c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004530:	d032      	beq.n	8004598 <__ssputs_r+0x80>
 8004532:	6825      	ldr	r5, [r4, #0]
 8004534:	6909      	ldr	r1, [r1, #16]
 8004536:	eba5 0901 	sub.w	r9, r5, r1
 800453a:	6965      	ldr	r5, [r4, #20]
 800453c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004544:	3301      	adds	r3, #1
 8004546:	444b      	add	r3, r9
 8004548:	106d      	asrs	r5, r5, #1
 800454a:	429d      	cmp	r5, r3
 800454c:	bf38      	it	cc
 800454e:	461d      	movcc	r5, r3
 8004550:	0553      	lsls	r3, r2, #21
 8004552:	d531      	bpl.n	80045b8 <__ssputs_r+0xa0>
 8004554:	4629      	mov	r1, r5
 8004556:	f7ff ff2f 	bl	80043b8 <_malloc_r>
 800455a:	4606      	mov	r6, r0
 800455c:	b950      	cbnz	r0, 8004574 <__ssputs_r+0x5c>
 800455e:	230c      	movs	r3, #12
 8004560:	f8ca 3000 	str.w	r3, [sl]
 8004564:	89a3      	ldrh	r3, [r4, #12]
 8004566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456a:	81a3      	strh	r3, [r4, #12]
 800456c:	f04f 30ff 	mov.w	r0, #4294967295
 8004570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004574:	6921      	ldr	r1, [r4, #16]
 8004576:	464a      	mov	r2, r9
 8004578:	f000 fac0 	bl	8004afc <memcpy>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	6126      	str	r6, [r4, #16]
 800458a:	6165      	str	r5, [r4, #20]
 800458c:	444e      	add	r6, r9
 800458e:	eba5 0509 	sub.w	r5, r5, r9
 8004592:	6026      	str	r6, [r4, #0]
 8004594:	60a5      	str	r5, [r4, #8]
 8004596:	463e      	mov	r6, r7
 8004598:	42be      	cmp	r6, r7
 800459a:	d900      	bls.n	800459e <__ssputs_r+0x86>
 800459c:	463e      	mov	r6, r7
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	4632      	mov	r2, r6
 80045a2:	4641      	mov	r1, r8
 80045a4:	f000 fab8 	bl	8004b18 <memmove>
 80045a8:	68a3      	ldr	r3, [r4, #8]
 80045aa:	1b9b      	subs	r3, r3, r6
 80045ac:	60a3      	str	r3, [r4, #8]
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	4433      	add	r3, r6
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	2000      	movs	r0, #0
 80045b6:	e7db      	b.n	8004570 <__ssputs_r+0x58>
 80045b8:	462a      	mov	r2, r5
 80045ba:	f000 fac7 	bl	8004b4c <_realloc_r>
 80045be:	4606      	mov	r6, r0
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d1e1      	bne.n	8004588 <__ssputs_r+0x70>
 80045c4:	6921      	ldr	r1, [r4, #16]
 80045c6:	4650      	mov	r0, sl
 80045c8:	f7ff fe8a 	bl	80042e0 <_free_r>
 80045cc:	e7c7      	b.n	800455e <__ssputs_r+0x46>
	...

080045d0 <_svfiprintf_r>:
 80045d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d4:	4698      	mov	r8, r3
 80045d6:	898b      	ldrh	r3, [r1, #12]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	b09d      	sub	sp, #116	; 0x74
 80045dc:	4607      	mov	r7, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	4614      	mov	r4, r2
 80045e2:	d50e      	bpl.n	8004602 <_svfiprintf_r+0x32>
 80045e4:	690b      	ldr	r3, [r1, #16]
 80045e6:	b963      	cbnz	r3, 8004602 <_svfiprintf_r+0x32>
 80045e8:	2140      	movs	r1, #64	; 0x40
 80045ea:	f7ff fee5 	bl	80043b8 <_malloc_r>
 80045ee:	6028      	str	r0, [r5, #0]
 80045f0:	6128      	str	r0, [r5, #16]
 80045f2:	b920      	cbnz	r0, 80045fe <_svfiprintf_r+0x2e>
 80045f4:	230c      	movs	r3, #12
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
 80045fc:	e0d1      	b.n	80047a2 <_svfiprintf_r+0x1d2>
 80045fe:	2340      	movs	r3, #64	; 0x40
 8004600:	616b      	str	r3, [r5, #20]
 8004602:	2300      	movs	r3, #0
 8004604:	9309      	str	r3, [sp, #36]	; 0x24
 8004606:	2320      	movs	r3, #32
 8004608:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800460c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004610:	2330      	movs	r3, #48	; 0x30
 8004612:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80047bc <_svfiprintf_r+0x1ec>
 8004616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800461a:	f04f 0901 	mov.w	r9, #1
 800461e:	4623      	mov	r3, r4
 8004620:	469a      	mov	sl, r3
 8004622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004626:	b10a      	cbz	r2, 800462c <_svfiprintf_r+0x5c>
 8004628:	2a25      	cmp	r2, #37	; 0x25
 800462a:	d1f9      	bne.n	8004620 <_svfiprintf_r+0x50>
 800462c:	ebba 0b04 	subs.w	fp, sl, r4
 8004630:	d00b      	beq.n	800464a <_svfiprintf_r+0x7a>
 8004632:	465b      	mov	r3, fp
 8004634:	4622      	mov	r2, r4
 8004636:	4629      	mov	r1, r5
 8004638:	4638      	mov	r0, r7
 800463a:	f7ff ff6d 	bl	8004518 <__ssputs_r>
 800463e:	3001      	adds	r0, #1
 8004640:	f000 80aa 	beq.w	8004798 <_svfiprintf_r+0x1c8>
 8004644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004646:	445a      	add	r2, fp
 8004648:	9209      	str	r2, [sp, #36]	; 0x24
 800464a:	f89a 3000 	ldrb.w	r3, [sl]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80a2 	beq.w	8004798 <_svfiprintf_r+0x1c8>
 8004654:	2300      	movs	r3, #0
 8004656:	f04f 32ff 	mov.w	r2, #4294967295
 800465a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800465e:	f10a 0a01 	add.w	sl, sl, #1
 8004662:	9304      	str	r3, [sp, #16]
 8004664:	9307      	str	r3, [sp, #28]
 8004666:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800466a:	931a      	str	r3, [sp, #104]	; 0x68
 800466c:	4654      	mov	r4, sl
 800466e:	2205      	movs	r2, #5
 8004670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004674:	4851      	ldr	r0, [pc, #324]	; (80047bc <_svfiprintf_r+0x1ec>)
 8004676:	f7fb fdd3 	bl	8000220 <memchr>
 800467a:	9a04      	ldr	r2, [sp, #16]
 800467c:	b9d8      	cbnz	r0, 80046b6 <_svfiprintf_r+0xe6>
 800467e:	06d0      	lsls	r0, r2, #27
 8004680:	bf44      	itt	mi
 8004682:	2320      	movmi	r3, #32
 8004684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004688:	0711      	lsls	r1, r2, #28
 800468a:	bf44      	itt	mi
 800468c:	232b      	movmi	r3, #43	; 0x2b
 800468e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004692:	f89a 3000 	ldrb.w	r3, [sl]
 8004696:	2b2a      	cmp	r3, #42	; 0x2a
 8004698:	d015      	beq.n	80046c6 <_svfiprintf_r+0xf6>
 800469a:	9a07      	ldr	r2, [sp, #28]
 800469c:	4654      	mov	r4, sl
 800469e:	2000      	movs	r0, #0
 80046a0:	f04f 0c0a 	mov.w	ip, #10
 80046a4:	4621      	mov	r1, r4
 80046a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046aa:	3b30      	subs	r3, #48	; 0x30
 80046ac:	2b09      	cmp	r3, #9
 80046ae:	d94e      	bls.n	800474e <_svfiprintf_r+0x17e>
 80046b0:	b1b0      	cbz	r0, 80046e0 <_svfiprintf_r+0x110>
 80046b2:	9207      	str	r2, [sp, #28]
 80046b4:	e014      	b.n	80046e0 <_svfiprintf_r+0x110>
 80046b6:	eba0 0308 	sub.w	r3, r0, r8
 80046ba:	fa09 f303 	lsl.w	r3, r9, r3
 80046be:	4313      	orrs	r3, r2
 80046c0:	9304      	str	r3, [sp, #16]
 80046c2:	46a2      	mov	sl, r4
 80046c4:	e7d2      	b.n	800466c <_svfiprintf_r+0x9c>
 80046c6:	9b03      	ldr	r3, [sp, #12]
 80046c8:	1d19      	adds	r1, r3, #4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	9103      	str	r1, [sp, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bfbb      	ittet	lt
 80046d2:	425b      	neglt	r3, r3
 80046d4:	f042 0202 	orrlt.w	r2, r2, #2
 80046d8:	9307      	strge	r3, [sp, #28]
 80046da:	9307      	strlt	r3, [sp, #28]
 80046dc:	bfb8      	it	lt
 80046de:	9204      	strlt	r2, [sp, #16]
 80046e0:	7823      	ldrb	r3, [r4, #0]
 80046e2:	2b2e      	cmp	r3, #46	; 0x2e
 80046e4:	d10c      	bne.n	8004700 <_svfiprintf_r+0x130>
 80046e6:	7863      	ldrb	r3, [r4, #1]
 80046e8:	2b2a      	cmp	r3, #42	; 0x2a
 80046ea:	d135      	bne.n	8004758 <_svfiprintf_r+0x188>
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	1d1a      	adds	r2, r3, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	9203      	str	r2, [sp, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bfb8      	it	lt
 80046f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80046fc:	3402      	adds	r4, #2
 80046fe:	9305      	str	r3, [sp, #20]
 8004700:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047cc <_svfiprintf_r+0x1fc>
 8004704:	7821      	ldrb	r1, [r4, #0]
 8004706:	2203      	movs	r2, #3
 8004708:	4650      	mov	r0, sl
 800470a:	f7fb fd89 	bl	8000220 <memchr>
 800470e:	b140      	cbz	r0, 8004722 <_svfiprintf_r+0x152>
 8004710:	2340      	movs	r3, #64	; 0x40
 8004712:	eba0 000a 	sub.w	r0, r0, sl
 8004716:	fa03 f000 	lsl.w	r0, r3, r0
 800471a:	9b04      	ldr	r3, [sp, #16]
 800471c:	4303      	orrs	r3, r0
 800471e:	3401      	adds	r4, #1
 8004720:	9304      	str	r3, [sp, #16]
 8004722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004726:	4826      	ldr	r0, [pc, #152]	; (80047c0 <_svfiprintf_r+0x1f0>)
 8004728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800472c:	2206      	movs	r2, #6
 800472e:	f7fb fd77 	bl	8000220 <memchr>
 8004732:	2800      	cmp	r0, #0
 8004734:	d038      	beq.n	80047a8 <_svfiprintf_r+0x1d8>
 8004736:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <_svfiprintf_r+0x1f4>)
 8004738:	bb1b      	cbnz	r3, 8004782 <_svfiprintf_r+0x1b2>
 800473a:	9b03      	ldr	r3, [sp, #12]
 800473c:	3307      	adds	r3, #7
 800473e:	f023 0307 	bic.w	r3, r3, #7
 8004742:	3308      	adds	r3, #8
 8004744:	9303      	str	r3, [sp, #12]
 8004746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004748:	4433      	add	r3, r6
 800474a:	9309      	str	r3, [sp, #36]	; 0x24
 800474c:	e767      	b.n	800461e <_svfiprintf_r+0x4e>
 800474e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004752:	460c      	mov	r4, r1
 8004754:	2001      	movs	r0, #1
 8004756:	e7a5      	b.n	80046a4 <_svfiprintf_r+0xd4>
 8004758:	2300      	movs	r3, #0
 800475a:	3401      	adds	r4, #1
 800475c:	9305      	str	r3, [sp, #20]
 800475e:	4619      	mov	r1, r3
 8004760:	f04f 0c0a 	mov.w	ip, #10
 8004764:	4620      	mov	r0, r4
 8004766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800476a:	3a30      	subs	r2, #48	; 0x30
 800476c:	2a09      	cmp	r2, #9
 800476e:	d903      	bls.n	8004778 <_svfiprintf_r+0x1a8>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0c5      	beq.n	8004700 <_svfiprintf_r+0x130>
 8004774:	9105      	str	r1, [sp, #20]
 8004776:	e7c3      	b.n	8004700 <_svfiprintf_r+0x130>
 8004778:	fb0c 2101 	mla	r1, ip, r1, r2
 800477c:	4604      	mov	r4, r0
 800477e:	2301      	movs	r3, #1
 8004780:	e7f0      	b.n	8004764 <_svfiprintf_r+0x194>
 8004782:	ab03      	add	r3, sp, #12
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	462a      	mov	r2, r5
 8004788:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <_svfiprintf_r+0x1f8>)
 800478a:	a904      	add	r1, sp, #16
 800478c:	4638      	mov	r0, r7
 800478e:	f3af 8000 	nop.w
 8004792:	1c42      	adds	r2, r0, #1
 8004794:	4606      	mov	r6, r0
 8004796:	d1d6      	bne.n	8004746 <_svfiprintf_r+0x176>
 8004798:	89ab      	ldrh	r3, [r5, #12]
 800479a:	065b      	lsls	r3, r3, #25
 800479c:	f53f af2c 	bmi.w	80045f8 <_svfiprintf_r+0x28>
 80047a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047a2:	b01d      	add	sp, #116	; 0x74
 80047a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a8:	ab03      	add	r3, sp, #12
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	462a      	mov	r2, r5
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <_svfiprintf_r+0x1f8>)
 80047b0:	a904      	add	r1, sp, #16
 80047b2:	4638      	mov	r0, r7
 80047b4:	f000 f87a 	bl	80048ac <_printf_i>
 80047b8:	e7eb      	b.n	8004792 <_svfiprintf_r+0x1c2>
 80047ba:	bf00      	nop
 80047bc:	08004c0c 	.word	0x08004c0c
 80047c0:	08004c16 	.word	0x08004c16
 80047c4:	00000000 	.word	0x00000000
 80047c8:	08004519 	.word	0x08004519
 80047cc:	08004c12 	.word	0x08004c12

080047d0 <_printf_common>:
 80047d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	4616      	mov	r6, r2
 80047d6:	4699      	mov	r9, r3
 80047d8:	688a      	ldr	r2, [r1, #8]
 80047da:	690b      	ldr	r3, [r1, #16]
 80047dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047e0:	4293      	cmp	r3, r2
 80047e2:	bfb8      	it	lt
 80047e4:	4613      	movlt	r3, r2
 80047e6:	6033      	str	r3, [r6, #0]
 80047e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ec:	4607      	mov	r7, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	b10a      	cbz	r2, 80047f6 <_printf_common+0x26>
 80047f2:	3301      	adds	r3, #1
 80047f4:	6033      	str	r3, [r6, #0]
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	0699      	lsls	r1, r3, #26
 80047fa:	bf42      	ittt	mi
 80047fc:	6833      	ldrmi	r3, [r6, #0]
 80047fe:	3302      	addmi	r3, #2
 8004800:	6033      	strmi	r3, [r6, #0]
 8004802:	6825      	ldr	r5, [r4, #0]
 8004804:	f015 0506 	ands.w	r5, r5, #6
 8004808:	d106      	bne.n	8004818 <_printf_common+0x48>
 800480a:	f104 0a19 	add.w	sl, r4, #25
 800480e:	68e3      	ldr	r3, [r4, #12]
 8004810:	6832      	ldr	r2, [r6, #0]
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	42ab      	cmp	r3, r5
 8004816:	dc26      	bgt.n	8004866 <_printf_common+0x96>
 8004818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800481c:	1e13      	subs	r3, r2, #0
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	bf18      	it	ne
 8004822:	2301      	movne	r3, #1
 8004824:	0692      	lsls	r2, r2, #26
 8004826:	d42b      	bmi.n	8004880 <_printf_common+0xb0>
 8004828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800482c:	4649      	mov	r1, r9
 800482e:	4638      	mov	r0, r7
 8004830:	47c0      	blx	r8
 8004832:	3001      	adds	r0, #1
 8004834:	d01e      	beq.n	8004874 <_printf_common+0xa4>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	68e5      	ldr	r5, [r4, #12]
 800483a:	6832      	ldr	r2, [r6, #0]
 800483c:	f003 0306 	and.w	r3, r3, #6
 8004840:	2b04      	cmp	r3, #4
 8004842:	bf08      	it	eq
 8004844:	1aad      	subeq	r5, r5, r2
 8004846:	68a3      	ldr	r3, [r4, #8]
 8004848:	6922      	ldr	r2, [r4, #16]
 800484a:	bf0c      	ite	eq
 800484c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004850:	2500      	movne	r5, #0
 8004852:	4293      	cmp	r3, r2
 8004854:	bfc4      	itt	gt
 8004856:	1a9b      	subgt	r3, r3, r2
 8004858:	18ed      	addgt	r5, r5, r3
 800485a:	2600      	movs	r6, #0
 800485c:	341a      	adds	r4, #26
 800485e:	42b5      	cmp	r5, r6
 8004860:	d11a      	bne.n	8004898 <_printf_common+0xc8>
 8004862:	2000      	movs	r0, #0
 8004864:	e008      	b.n	8004878 <_printf_common+0xa8>
 8004866:	2301      	movs	r3, #1
 8004868:	4652      	mov	r2, sl
 800486a:	4649      	mov	r1, r9
 800486c:	4638      	mov	r0, r7
 800486e:	47c0      	blx	r8
 8004870:	3001      	adds	r0, #1
 8004872:	d103      	bne.n	800487c <_printf_common+0xac>
 8004874:	f04f 30ff 	mov.w	r0, #4294967295
 8004878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487c:	3501      	adds	r5, #1
 800487e:	e7c6      	b.n	800480e <_printf_common+0x3e>
 8004880:	18e1      	adds	r1, r4, r3
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	2030      	movs	r0, #48	; 0x30
 8004886:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800488a:	4422      	add	r2, r4
 800488c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004890:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004894:	3302      	adds	r3, #2
 8004896:	e7c7      	b.n	8004828 <_printf_common+0x58>
 8004898:	2301      	movs	r3, #1
 800489a:	4622      	mov	r2, r4
 800489c:	4649      	mov	r1, r9
 800489e:	4638      	mov	r0, r7
 80048a0:	47c0      	blx	r8
 80048a2:	3001      	adds	r0, #1
 80048a4:	d0e6      	beq.n	8004874 <_printf_common+0xa4>
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7d9      	b.n	800485e <_printf_common+0x8e>
	...

080048ac <_printf_i>:
 80048ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	7e0f      	ldrb	r7, [r1, #24]
 80048b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048b4:	2f78      	cmp	r7, #120	; 0x78
 80048b6:	4691      	mov	r9, r2
 80048b8:	4680      	mov	r8, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	469a      	mov	sl, r3
 80048be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048c2:	d807      	bhi.n	80048d4 <_printf_i+0x28>
 80048c4:	2f62      	cmp	r7, #98	; 0x62
 80048c6:	d80a      	bhi.n	80048de <_printf_i+0x32>
 80048c8:	2f00      	cmp	r7, #0
 80048ca:	f000 80d8 	beq.w	8004a7e <_printf_i+0x1d2>
 80048ce:	2f58      	cmp	r7, #88	; 0x58
 80048d0:	f000 80a3 	beq.w	8004a1a <_printf_i+0x16e>
 80048d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048dc:	e03a      	b.n	8004954 <_printf_i+0xa8>
 80048de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048e2:	2b15      	cmp	r3, #21
 80048e4:	d8f6      	bhi.n	80048d4 <_printf_i+0x28>
 80048e6:	a101      	add	r1, pc, #4	; (adr r1, 80048ec <_printf_i+0x40>)
 80048e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048ec:	08004945 	.word	0x08004945
 80048f0:	08004959 	.word	0x08004959
 80048f4:	080048d5 	.word	0x080048d5
 80048f8:	080048d5 	.word	0x080048d5
 80048fc:	080048d5 	.word	0x080048d5
 8004900:	080048d5 	.word	0x080048d5
 8004904:	08004959 	.word	0x08004959
 8004908:	080048d5 	.word	0x080048d5
 800490c:	080048d5 	.word	0x080048d5
 8004910:	080048d5 	.word	0x080048d5
 8004914:	080048d5 	.word	0x080048d5
 8004918:	08004a65 	.word	0x08004a65
 800491c:	08004989 	.word	0x08004989
 8004920:	08004a47 	.word	0x08004a47
 8004924:	080048d5 	.word	0x080048d5
 8004928:	080048d5 	.word	0x080048d5
 800492c:	08004a87 	.word	0x08004a87
 8004930:	080048d5 	.word	0x080048d5
 8004934:	08004989 	.word	0x08004989
 8004938:	080048d5 	.word	0x080048d5
 800493c:	080048d5 	.word	0x080048d5
 8004940:	08004a4f 	.word	0x08004a4f
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	1d1a      	adds	r2, r3, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	602a      	str	r2, [r5, #0]
 800494c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004954:	2301      	movs	r3, #1
 8004956:	e0a3      	b.n	8004aa0 <_printf_i+0x1f4>
 8004958:	6820      	ldr	r0, [r4, #0]
 800495a:	6829      	ldr	r1, [r5, #0]
 800495c:	0606      	lsls	r6, r0, #24
 800495e:	f101 0304 	add.w	r3, r1, #4
 8004962:	d50a      	bpl.n	800497a <_printf_i+0xce>
 8004964:	680e      	ldr	r6, [r1, #0]
 8004966:	602b      	str	r3, [r5, #0]
 8004968:	2e00      	cmp	r6, #0
 800496a:	da03      	bge.n	8004974 <_printf_i+0xc8>
 800496c:	232d      	movs	r3, #45	; 0x2d
 800496e:	4276      	negs	r6, r6
 8004970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004974:	485e      	ldr	r0, [pc, #376]	; (8004af0 <_printf_i+0x244>)
 8004976:	230a      	movs	r3, #10
 8004978:	e019      	b.n	80049ae <_printf_i+0x102>
 800497a:	680e      	ldr	r6, [r1, #0]
 800497c:	602b      	str	r3, [r5, #0]
 800497e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004982:	bf18      	it	ne
 8004984:	b236      	sxthne	r6, r6
 8004986:	e7ef      	b.n	8004968 <_printf_i+0xbc>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	6820      	ldr	r0, [r4, #0]
 800498c:	1d19      	adds	r1, r3, #4
 800498e:	6029      	str	r1, [r5, #0]
 8004990:	0601      	lsls	r1, r0, #24
 8004992:	d501      	bpl.n	8004998 <_printf_i+0xec>
 8004994:	681e      	ldr	r6, [r3, #0]
 8004996:	e002      	b.n	800499e <_printf_i+0xf2>
 8004998:	0646      	lsls	r6, r0, #25
 800499a:	d5fb      	bpl.n	8004994 <_printf_i+0xe8>
 800499c:	881e      	ldrh	r6, [r3, #0]
 800499e:	4854      	ldr	r0, [pc, #336]	; (8004af0 <_printf_i+0x244>)
 80049a0:	2f6f      	cmp	r7, #111	; 0x6f
 80049a2:	bf0c      	ite	eq
 80049a4:	2308      	moveq	r3, #8
 80049a6:	230a      	movne	r3, #10
 80049a8:	2100      	movs	r1, #0
 80049aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ae:	6865      	ldr	r5, [r4, #4]
 80049b0:	60a5      	str	r5, [r4, #8]
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	bfa2      	ittt	ge
 80049b6:	6821      	ldrge	r1, [r4, #0]
 80049b8:	f021 0104 	bicge.w	r1, r1, #4
 80049bc:	6021      	strge	r1, [r4, #0]
 80049be:	b90e      	cbnz	r6, 80049c4 <_printf_i+0x118>
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	d04d      	beq.n	8004a60 <_printf_i+0x1b4>
 80049c4:	4615      	mov	r5, r2
 80049c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80049ca:	fb03 6711 	mls	r7, r3, r1, r6
 80049ce:	5dc7      	ldrb	r7, [r0, r7]
 80049d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049d4:	4637      	mov	r7, r6
 80049d6:	42bb      	cmp	r3, r7
 80049d8:	460e      	mov	r6, r1
 80049da:	d9f4      	bls.n	80049c6 <_printf_i+0x11a>
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d10b      	bne.n	80049f8 <_printf_i+0x14c>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	07de      	lsls	r6, r3, #31
 80049e4:	d508      	bpl.n	80049f8 <_printf_i+0x14c>
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	6861      	ldr	r1, [r4, #4]
 80049ea:	4299      	cmp	r1, r3
 80049ec:	bfde      	ittt	le
 80049ee:	2330      	movle	r3, #48	; 0x30
 80049f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049f8:	1b52      	subs	r2, r2, r5
 80049fa:	6122      	str	r2, [r4, #16]
 80049fc:	f8cd a000 	str.w	sl, [sp]
 8004a00:	464b      	mov	r3, r9
 8004a02:	aa03      	add	r2, sp, #12
 8004a04:	4621      	mov	r1, r4
 8004a06:	4640      	mov	r0, r8
 8004a08:	f7ff fee2 	bl	80047d0 <_printf_common>
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d14c      	bne.n	8004aaa <_printf_i+0x1fe>
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295
 8004a14:	b004      	add	sp, #16
 8004a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1a:	4835      	ldr	r0, [pc, #212]	; (8004af0 <_printf_i+0x244>)
 8004a1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a20:	6829      	ldr	r1, [r5, #0]
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a28:	6029      	str	r1, [r5, #0]
 8004a2a:	061d      	lsls	r5, r3, #24
 8004a2c:	d514      	bpl.n	8004a58 <_printf_i+0x1ac>
 8004a2e:	07df      	lsls	r7, r3, #31
 8004a30:	bf44      	itt	mi
 8004a32:	f043 0320 	orrmi.w	r3, r3, #32
 8004a36:	6023      	strmi	r3, [r4, #0]
 8004a38:	b91e      	cbnz	r6, 8004a42 <_printf_i+0x196>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	f023 0320 	bic.w	r3, r3, #32
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	2310      	movs	r3, #16
 8004a44:	e7b0      	b.n	80049a8 <_printf_i+0xfc>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	f043 0320 	orr.w	r3, r3, #32
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	2378      	movs	r3, #120	; 0x78
 8004a50:	4828      	ldr	r0, [pc, #160]	; (8004af4 <_printf_i+0x248>)
 8004a52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a56:	e7e3      	b.n	8004a20 <_printf_i+0x174>
 8004a58:	0659      	lsls	r1, r3, #25
 8004a5a:	bf48      	it	mi
 8004a5c:	b2b6      	uxthmi	r6, r6
 8004a5e:	e7e6      	b.n	8004a2e <_printf_i+0x182>
 8004a60:	4615      	mov	r5, r2
 8004a62:	e7bb      	b.n	80049dc <_printf_i+0x130>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	6826      	ldr	r6, [r4, #0]
 8004a68:	6961      	ldr	r1, [r4, #20]
 8004a6a:	1d18      	adds	r0, r3, #4
 8004a6c:	6028      	str	r0, [r5, #0]
 8004a6e:	0635      	lsls	r5, r6, #24
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	d501      	bpl.n	8004a78 <_printf_i+0x1cc>
 8004a74:	6019      	str	r1, [r3, #0]
 8004a76:	e002      	b.n	8004a7e <_printf_i+0x1d2>
 8004a78:	0670      	lsls	r0, r6, #25
 8004a7a:	d5fb      	bpl.n	8004a74 <_printf_i+0x1c8>
 8004a7c:	8019      	strh	r1, [r3, #0]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	6123      	str	r3, [r4, #16]
 8004a82:	4615      	mov	r5, r2
 8004a84:	e7ba      	b.n	80049fc <_printf_i+0x150>
 8004a86:	682b      	ldr	r3, [r5, #0]
 8004a88:	1d1a      	adds	r2, r3, #4
 8004a8a:	602a      	str	r2, [r5, #0]
 8004a8c:	681d      	ldr	r5, [r3, #0]
 8004a8e:	6862      	ldr	r2, [r4, #4]
 8004a90:	2100      	movs	r1, #0
 8004a92:	4628      	mov	r0, r5
 8004a94:	f7fb fbc4 	bl	8000220 <memchr>
 8004a98:	b108      	cbz	r0, 8004a9e <_printf_i+0x1f2>
 8004a9a:	1b40      	subs	r0, r0, r5
 8004a9c:	6060      	str	r0, [r4, #4]
 8004a9e:	6863      	ldr	r3, [r4, #4]
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa8:	e7a8      	b.n	80049fc <_printf_i+0x150>
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	462a      	mov	r2, r5
 8004aae:	4649      	mov	r1, r9
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	47d0      	blx	sl
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d0ab      	beq.n	8004a10 <_printf_i+0x164>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	079b      	lsls	r3, r3, #30
 8004abc:	d413      	bmi.n	8004ae6 <_printf_i+0x23a>
 8004abe:	68e0      	ldr	r0, [r4, #12]
 8004ac0:	9b03      	ldr	r3, [sp, #12]
 8004ac2:	4298      	cmp	r0, r3
 8004ac4:	bfb8      	it	lt
 8004ac6:	4618      	movlt	r0, r3
 8004ac8:	e7a4      	b.n	8004a14 <_printf_i+0x168>
 8004aca:	2301      	movs	r3, #1
 8004acc:	4632      	mov	r2, r6
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	47d0      	blx	sl
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d09b      	beq.n	8004a10 <_printf_i+0x164>
 8004ad8:	3501      	adds	r5, #1
 8004ada:	68e3      	ldr	r3, [r4, #12]
 8004adc:	9903      	ldr	r1, [sp, #12]
 8004ade:	1a5b      	subs	r3, r3, r1
 8004ae0:	42ab      	cmp	r3, r5
 8004ae2:	dcf2      	bgt.n	8004aca <_printf_i+0x21e>
 8004ae4:	e7eb      	b.n	8004abe <_printf_i+0x212>
 8004ae6:	2500      	movs	r5, #0
 8004ae8:	f104 0619 	add.w	r6, r4, #25
 8004aec:	e7f5      	b.n	8004ada <_printf_i+0x22e>
 8004aee:	bf00      	nop
 8004af0:	08004c1d 	.word	0x08004c1d
 8004af4:	08004c2e 	.word	0x08004c2e

08004af8 <__retarget_lock_acquire_recursive>:
 8004af8:	4770      	bx	lr

08004afa <__retarget_lock_release_recursive>:
 8004afa:	4770      	bx	lr

08004afc <memcpy>:
 8004afc:	440a      	add	r2, r1
 8004afe:	4291      	cmp	r1, r2
 8004b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b04:	d100      	bne.n	8004b08 <memcpy+0xc>
 8004b06:	4770      	bx	lr
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b12:	4291      	cmp	r1, r2
 8004b14:	d1f9      	bne.n	8004b0a <memcpy+0xe>
 8004b16:	bd10      	pop	{r4, pc}

08004b18 <memmove>:
 8004b18:	4288      	cmp	r0, r1
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	eb01 0402 	add.w	r4, r1, r2
 8004b20:	d902      	bls.n	8004b28 <memmove+0x10>
 8004b22:	4284      	cmp	r4, r0
 8004b24:	4623      	mov	r3, r4
 8004b26:	d807      	bhi.n	8004b38 <memmove+0x20>
 8004b28:	1e43      	subs	r3, r0, #1
 8004b2a:	42a1      	cmp	r1, r4
 8004b2c:	d008      	beq.n	8004b40 <memmove+0x28>
 8004b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b36:	e7f8      	b.n	8004b2a <memmove+0x12>
 8004b38:	4402      	add	r2, r0
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	428a      	cmp	r2, r1
 8004b3e:	d100      	bne.n	8004b42 <memmove+0x2a>
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b4a:	e7f7      	b.n	8004b3c <memmove+0x24>

08004b4c <_realloc_r>:
 8004b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b50:	4680      	mov	r8, r0
 8004b52:	4614      	mov	r4, r2
 8004b54:	460e      	mov	r6, r1
 8004b56:	b921      	cbnz	r1, 8004b62 <_realloc_r+0x16>
 8004b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	f7ff bc2b 	b.w	80043b8 <_malloc_r>
 8004b62:	b92a      	cbnz	r2, 8004b70 <_realloc_r+0x24>
 8004b64:	f7ff fbbc 	bl	80042e0 <_free_r>
 8004b68:	4625      	mov	r5, r4
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b70:	f000 f81b 	bl	8004baa <_malloc_usable_size_r>
 8004b74:	4284      	cmp	r4, r0
 8004b76:	4607      	mov	r7, r0
 8004b78:	d802      	bhi.n	8004b80 <_realloc_r+0x34>
 8004b7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b7e:	d812      	bhi.n	8004ba6 <_realloc_r+0x5a>
 8004b80:	4621      	mov	r1, r4
 8004b82:	4640      	mov	r0, r8
 8004b84:	f7ff fc18 	bl	80043b8 <_malloc_r>
 8004b88:	4605      	mov	r5, r0
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d0ed      	beq.n	8004b6a <_realloc_r+0x1e>
 8004b8e:	42bc      	cmp	r4, r7
 8004b90:	4622      	mov	r2, r4
 8004b92:	4631      	mov	r1, r6
 8004b94:	bf28      	it	cs
 8004b96:	463a      	movcs	r2, r7
 8004b98:	f7ff ffb0 	bl	8004afc <memcpy>
 8004b9c:	4631      	mov	r1, r6
 8004b9e:	4640      	mov	r0, r8
 8004ba0:	f7ff fb9e 	bl	80042e0 <_free_r>
 8004ba4:	e7e1      	b.n	8004b6a <_realloc_r+0x1e>
 8004ba6:	4635      	mov	r5, r6
 8004ba8:	e7df      	b.n	8004b6a <_realloc_r+0x1e>

08004baa <_malloc_usable_size_r>:
 8004baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bae:	1f18      	subs	r0, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bfbc      	itt	lt
 8004bb4:	580b      	ldrlt	r3, [r1, r0]
 8004bb6:	18c0      	addlt	r0, r0, r3
 8004bb8:	4770      	bx	lr
	...

08004bbc <_init>:
 8004bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbe:	bf00      	nop
 8004bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc2:	bc08      	pop	{r3}
 8004bc4:	469e      	mov	lr, r3
 8004bc6:	4770      	bx	lr

08004bc8 <_fini>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	bf00      	nop
 8004bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bce:	bc08      	pop	{r3}
 8004bd0:	469e      	mov	lr, r3
 8004bd2:	4770      	bx	lr
