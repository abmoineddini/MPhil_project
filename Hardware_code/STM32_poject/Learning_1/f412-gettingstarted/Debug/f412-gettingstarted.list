
f412-gettingstarted.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004acc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d28  08004d28  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d30  08004d30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d34  08004d34  00014d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000070  08004da8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  08004da8  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee6d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c7  00000000  00000000  0002ef0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  000312d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  00031e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e22  00000000  00000000  00032950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ede4  00000000  00000000  00053772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8e19  00000000  00000000  00062556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b36f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003454  00000000  00000000  0012b3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c84 	.word	0x08004c84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004c84 	.word	0x08004c84

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <DWT_Init+0x28>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <DWT_Init+0x28>)
 80005ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005d2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <DWT_Init+0x2c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <DWT_Init+0x2c>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000edf0 	.word	0xe000edf0
 80005f0:	e0001000 	.word	0xe0001000

080005f4 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <micros+0x24>)
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <micros+0x28>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4907      	ldr	r1, [pc, #28]	; (8000620 <micros+0x2c>)
 8000602:	fba1 1303 	umull	r1, r3, r1, r3
 8000606:	0c9b      	lsrs	r3, r3, #18
 8000608:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e0001000 	.word	0xe0001000
 800061c:	20000000 	.word	0x20000000
 8000620:	431bde83 	.word	0x431bde83

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af02      	add	r7, sp, #8
int main(void)
 800062a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800062e:	61bb      	str	r3, [r7, #24]
  /* USER CODE BEGIN 1 */
	uint32_t value[4];
	char* buf;
	uint32_t t1;
	uint32_t t0 = micros();
 8000630:	f7ff ffe0 	bl	80005f4 <micros>
 8000634:	6238      	str	r0, [r7, #32]
	long int dt = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f000 fd43 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f873 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f9ff 	bl	8000a44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000646:	f000 f9d5 	bl	80009f4 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800064a:	f000 f9a3 	bl	8000994 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800064e:	f000 f8d7 	bl	8000800 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000652:	f000 f94b 	bl	80008ec <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000656:	f000 f973 	bl	8000940 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, value, 4);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2204      	movs	r2, #4
 800065e:	4619      	mov	r1, r3
 8000660:	482b      	ldr	r0, [pc, #172]	; (8000710 <main+0xec>)
 8000662:	f000 fe09 	bl	8001278 <HAL_ADC_Start_DMA>
  DWT_Init();
 8000666:	f7ff ffad 	bl	80005c4 <DWT_Init>
  while (1)
  {
//	  HAL_UART_Receive_DMA(&huart6, (int)NoChannel, 4);

	  //buf = (char *) malloc(sizeof(value[0]+value[1]+value[2]+value[3])+8);
	  switch(NoChannel){
 800066a:	7d3b      	ldrb	r3, [r7, #20]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d01e      	beq.n	80006ae <main+0x8a>
 8000670:	2b03      	cmp	r3, #3
 8000672:	dc2b      	bgt.n	80006cc <main+0xa8>
 8000674:	2b01      	cmp	r3, #1
 8000676:	d002      	beq.n	800067e <main+0x5a>
 8000678:	2b02      	cmp	r3, #2
 800067a:	d00c      	beq.n	8000696 <main+0x72>
 800067c:	e026      	b.n	80006cc <main+0xa8>
	  case 1:
		  buf = (char *) malloc(sizeof(value[0])+8);
 800067e:	200c      	movs	r0, #12
 8000680:	f003 fe7a 	bl	8004378 <malloc>
 8000684:	4603      	mov	r3, r0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
		  sprintf(buf,"%0x\r\n",value[0]);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	461a      	mov	r2, r3
 800068c:	4921      	ldr	r1, [pc, #132]	; (8000714 <main+0xf0>)
 800068e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000690:	f003 ff7a 	bl	8004588 <siprintf>
		  break;
 8000694:	e02c      	b.n	80006f0 <main+0xcc>
	  case 2:
		  buf = (char *) malloc(sizeof(value[0]+value[1])+8);
 8000696:	200c      	movs	r0, #12
 8000698:	f003 fe6e 	bl	8004378 <malloc>
 800069c:	4603      	mov	r3, r0
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
		  sprintf(buf,"%0x,%0x\r\n",value[0], value[1]);
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	491c      	ldr	r1, [pc, #112]	; (8000718 <main+0xf4>)
 80006a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006a8:	f003 ff6e 	bl	8004588 <siprintf>
		  break;
 80006ac:	e020      	b.n	80006f0 <main+0xcc>
	  case 3:
		  buf = (char *) malloc(sizeof(value[0]+value[1]+value[2])+8);
 80006ae:	200c      	movs	r0, #12
 80006b0:	f003 fe62 	bl	8004378 <malloc>
 80006b4:	4603      	mov	r3, r0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
		  sprintf(buf,"%0x,%0x,%0x\r\n",value[0], value[1], value[2]);
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	460b      	mov	r3, r1
 80006c2:	4916      	ldr	r1, [pc, #88]	; (800071c <main+0xf8>)
 80006c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006c6:	f003 ff5f 	bl	8004588 <siprintf>
		  break;
 80006ca:	e011      	b.n	80006f0 <main+0xcc>
	  default:
		  buf = (char *) malloc(sizeof(value[0]+value[1]+value[2]+value[3])+8);
 80006cc:	200c      	movs	r0, #12
 80006ce:	f003 fe53 	bl	8004378 <malloc>
 80006d2:	4603      	mov	r3, r0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
		  sprintf(buf,"%0x,%0x,%0x,%0x\r\n",value[0], value[1], value[2], value[3]);
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	68b8      	ldr	r0, [r7, #8]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	693a      	ldr	r2, [r7, #16]
 80006de:	9201      	str	r2, [sp, #4]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	490e      	ldr	r1, [pc, #56]	; (8000720 <main+0xfc>)
 80006e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006ea:	f003 ff4d 	bl	8004588 <siprintf>
		  break;
 80006ee:	bf00      	nop
	  }
//	  sprintf(buf,"%0x,%0x,%0x,%0x\r\n",value[0], value[1], value[2], value[3]);
//	  sprintf(buf,"%0x,%0x,%0x,%0x\r\n",value[0], value[1], value[2], value[3]);
	  HAL_UART_Transmit(&huart6, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80006f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006f2:	f7ff fd8d 	bl	8000210 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <main+0x100>)
 8000702:	f002 ff9e 	bl	8003642 <HAL_UART_Transmit>
	  free(buf);
 8000706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000708:	f003 fe3e 	bl	8004388 <free>
  {
 800070c:	e7ad      	b.n	800066a <main+0x46>
 800070e:	bf00      	nop
 8000710:	2000008c 	.word	0x2000008c
 8000714:	08004c9c 	.word	0x08004c9c
 8000718:	08004ca4 	.word	0x08004ca4
 800071c:	08004cb0 	.word	0x08004cb0
 8000720:	08004cc0 	.word	0x08004cc0
 8000724:	20000178 	.word	0x20000178

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2234      	movs	r2, #52	; 0x34
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fe2e 	bl	8004398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <SystemClock_Config+0xd0>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a28      	ldr	r2, [pc, #160]	; (80007f8 <SystemClock_Config+0xd0>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <SystemClock_Config+0xd0>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <SystemClock_Config+0xd4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a22      	ldr	r2, [pc, #136]	; (80007fc <SystemClock_Config+0xd4>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b20      	ldr	r3, [pc, #128]	; (80007fc <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000788:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800078c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000798:	2308      	movs	r3, #8
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 800079c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a2:	2304      	movs	r3, #4
 80007a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007a6:	2308      	movs	r3, #8
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 fc74 	bl	80030a0 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007be:	f000 f9ef 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2103      	movs	r1, #3
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 f870 	bl	80028c4 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ea:	f000 f9d9 	bl	8000ba0 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	; 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000812:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <MX_ADC1_Init+0xe0>)
 8000814:	4a33      	ldr	r2, [pc, #204]	; (80008e4 <MX_ADC1_Init+0xe4>)
 8000816:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000818:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <MX_ADC1_Init+0xe0>)
 800081a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800081e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <MX_ADC1_Init+0xe0>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <MX_ADC1_Init+0xe0>)
 8000828:	2201      	movs	r2, #1
 800082a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <MX_ADC1_Init+0xe0>)
 800082e:	2201      	movs	r2, #1
 8000830:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_ADC1_Init+0xe0>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_ADC1_Init+0xe0>)
 800083c:	2200      	movs	r2, #0
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000840:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_ADC1_Init+0xe0>)
 8000842:	4a29      	ldr	r2, [pc, #164]	; (80008e8 <MX_ADC1_Init+0xe8>)
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_ADC1_Init+0xe0>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_ADC1_Init+0xe0>)
 800084e:	2204      	movs	r2, #4
 8000850:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_ADC1_Init+0xe0>)
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_ADC1_Init+0xe0>)
 800085c:	2201      	movs	r2, #1
 800085e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000860:	481f      	ldr	r0, [pc, #124]	; (80008e0 <MX_ADC1_Init+0xe0>)
 8000862:	f000 fcc5 	bl	80011f0 <HAL_ADC_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800086c:	f000 f998 	bl	8000ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000870:	2303      	movs	r3, #3
 8000872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000874:	2301      	movs	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	4817      	ldr	r0, [pc, #92]	; (80008e0 <MX_ADC1_Init+0xe0>)
 8000882:	f000 fe07 	bl	8001494 <HAL_ADC_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800088c:	f000 f988 	bl	8000ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_ADC1_Init+0xe0>)
 800089a:	f000 fdfb 	bl	8001494 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80008a4:	f000 f97c 	bl	8000ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80008a8:	2303      	movs	r3, #3
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	480b      	ldr	r0, [pc, #44]	; (80008e0 <MX_ADC1_Init+0xe0>)
 80008b2:	f000 fdef 	bl	8001494 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80008bc:	f000 f970 	bl	8000ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_ADC1_Init+0xe0>)
 80008ca:	f000 fde3 	bl	8001494 <HAL_ADC_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80008d4:	f000 f964 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000008c 	.word	0x2000008c
 80008e4:	40012000 	.word	0x40012000
 80008e8:	0f000001 	.word	0x0f000001

080008ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART3_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 80008f8:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80008fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 800091e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000922:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000926:	f002 fe3f 	bl	80035a8 <HAL_UART_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8000930:	f000 f936 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000134 	.word	0x20000134
 800093c:	40004800 	.word	0x40004800

08000940 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART6_UART_Init+0x4c>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MX_USART6_UART_Init+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 256000;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_USART6_UART_Init+0x4c>)
 800094c:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8000950:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART6_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART6_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART6_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART6_UART_Init+0x4c>)
 8000966:	2208      	movs	r2, #8
 8000968:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART6_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART6_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART6_UART_Init+0x4c>)
 8000978:	f002 fe16 	bl	80035a8 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f90d 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000178 	.word	0x20000178
 8000990:	40011400 	.word	0x40011400

08000994 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800099e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a2:	2206      	movs	r2, #6
 80009a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009de:	f001 fe28 	bl	8002632 <HAL_PCD_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80009e8:	f000 f8da 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000021c 	.word	0x2000021c

080009f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_DMA_Init+0x4c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <MX_DMA_Init+0x4c>)
 8000a04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_DMA_Init+0x4c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2038      	movs	r0, #56	; 0x38
 8000a1c:	f001 f8b5 	bl	8001b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a20:	2038      	movs	r0, #56	; 0x38
 8000a22:	f001 f8ce 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2045      	movs	r0, #69	; 0x45
 8000a2c:	f001 f8ad 	bl	8001b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a30:	2045      	movs	r0, #69	; 0x45
 8000a32:	f001 f8c6 	bl	8001bc2 <HAL_NVIC_EnableIRQ>

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	4b4c      	ldr	r3, [pc, #304]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a4b      	ldr	r2, [pc, #300]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b49      	ldr	r3, [pc, #292]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	4b45      	ldr	r3, [pc, #276]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a44      	ldr	r2, [pc, #272]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a3d      	ldr	r2, [pc, #244]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a36      	ldr	r2, [pc, #216]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <MX_GPIO_Init+0x14c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b08:	4822      	ldr	r0, [pc, #136]	; (8000b94 <MX_GPIO_Init+0x150>)
 8000b0a:	f001 fd79 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2140      	movs	r1, #64	; 0x40
 8000b12:	4821      	ldr	r0, [pc, #132]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000b14:	f001 fd74 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	481b      	ldr	r0, [pc, #108]	; (8000b9c <MX_GPIO_Init+0x158>)
 8000b30:	f001 fbd2 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b34:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4811      	ldr	r0, [pc, #68]	; (8000b94 <MX_GPIO_Init+0x150>)
 8000b4e:	f001 fbc3 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b52:	2340      	movs	r3, #64	; 0x40
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000b6a:	f001 fbb5 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_GPIO_Init+0x154>)
 8000b82:	f001 fba9 	bl	80022d8 <HAL_GPIO_Init>

}
 8000b86:	bf00      	nop
 8000b88:	3730      	adds	r7, #48	; 0x30
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400
 8000b98:	40021800 	.word	0x40021800
 8000b9c:	40020800 	.word	0x40020800

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a3c      	ldr	r2, [pc, #240]	; (8000d0c <HAL_ADC_MspInit+0x110>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d171      	bne.n	8000d02 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <HAL_ADC_MspInit+0x114>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a3a      	ldr	r2, [pc, #232]	; (8000d10 <HAL_ADC_MspInit+0x114>)
 8000c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <HAL_ADC_MspInit+0x114>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <HAL_ADC_MspInit+0x114>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <HAL_ADC_MspInit+0x114>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <HAL_ADC_MspInit+0x114>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <HAL_ADC_MspInit+0x114>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a2c      	ldr	r2, [pc, #176]	; (8000d10 <HAL_ADC_MspInit+0x114>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <HAL_ADC_MspInit+0x114>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000c72:	230b      	movs	r3, #11
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c76:	2303      	movs	r3, #3
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4823      	ldr	r0, [pc, #140]	; (8000d14 <HAL_ADC_MspInit+0x118>)
 8000c86:	f001 fb27 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c8a:	2308      	movs	r3, #8
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	481e      	ldr	r0, [pc, #120]	; (8000d18 <HAL_ADC_MspInit+0x11c>)
 8000c9e:	f001 fb1b 	bl	80022d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000ca4:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <HAL_ADC_MspInit+0x124>)
 8000ca6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000ccc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000ce8:	f000 ff86 	bl	8001bf8 <HAL_DMA_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000cf2:	f7ff ff55 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cfa:	639a      	str	r2, [r3, #56]	; 0x38
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_ADC_MspInit+0x120>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	; 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40012000 	.word	0x40012000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020800 	.word	0x40020800
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	200000d4 	.word	0x200000d4
 8000d20:	40026410 	.word	0x40026410

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	; 0x30
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a4a      	ldr	r2, [pc, #296]	; (8000e6c <HAL_UART_MspInit+0x148>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12d      	bne.n	8000da2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	4b49      	ldr	r3, [pc, #292]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a48      	ldr	r2, [pc, #288]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	4b42      	ldr	r3, [pc, #264]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a41      	ldr	r2, [pc, #260]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b3f      	ldr	r3, [pc, #252]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d90:	2307      	movs	r3, #7
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4836      	ldr	r0, [pc, #216]	; (8000e74 <HAL_UART_MspInit+0x150>)
 8000d9c:	f001 fa9c 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000da0:	e05f      	b.n	8000e62 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART6)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <HAL_UART_MspInit+0x154>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d15a      	bne.n	8000e62 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db4:	4a2e      	ldr	r2, [pc, #184]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000db6:	f043 0320 	orr.w	r3, r3, #32
 8000dba:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	f003 0320 	and.w	r3, r3, #32
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a27      	ldr	r2, [pc, #156]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <HAL_UART_MspInit+0x14c>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000de4:	23c0      	movs	r3, #192	; 0xc0
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000df4:	2308      	movs	r3, #8
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	481f      	ldr	r0, [pc, #124]	; (8000e7c <HAL_UART_MspInit+0x158>)
 8000e00:	f001 fa6a 	bl	80022d8 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e06:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <HAL_UART_MspInit+0x160>)
 8000e08:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e0c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000e10:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e24:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e38:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000e46:	480e      	ldr	r0, [pc, #56]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e48:	f000 fed6 	bl	8001bf8 <HAL_DMA_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8000e52:	f7ff fea5 	bl	8000ba0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e5c:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_UART_MspInit+0x15c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e62:	bf00      	nop
 8000e64:	3730      	adds	r7, #48	; 0x30
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40004800 	.word	0x40004800
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	40011400 	.word	0x40011400
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	200001bc 	.word	0x200001bc
 8000e84:	400264a0 	.word	0x400264a0

08000e88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b098      	sub	sp, #96	; 0x60
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	223c      	movs	r2, #60	; 0x3c
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 fa75 	bl	8004398 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb6:	d14d      	bne.n	8000f54 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000eb8:	2320      	movs	r3, #32
 8000eba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f001 ff1d 	bl	8002d04 <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000ed0:	f7ff fe66 	bl	8000ba0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ef0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f02:	230a      	movs	r3, #10
 8000f04:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4814      	ldr	r0, [pc, #80]	; (8000f60 <HAL_PCD_MspInit+0xd8>)
 8000f0e:	f001 f9e3 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f24:	4619      	mov	r1, r3
 8000f26:	480e      	ldr	r0, [pc, #56]	; (8000f60 <HAL_PCD_MspInit+0xd8>)
 8000f28:	f001 f9d6 	bl	80022d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f36:	6353      	str	r3, [r2, #52]	; 0x34
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f46:	6453      	str	r3, [r2, #68]	; 0x44
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3760      	adds	r7, #96	; 0x60
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <NMI_Handler+0x4>

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb0:	f000 f8da 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <DMA2_Stream0_IRQHandler+0x10>)
 8000fbe:	f000 ff21 	bl	8001e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000d4 	.word	0x200000d4

08000fcc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <DMA2_Stream6_IRQHandler+0x10>)
 8000fd2:	f000 ff17 	bl	8001e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001bc 	.word	0x200001bc

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f003 f988 	bl	8004324 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20040000 	.word	0x20040000
 8001040:	00000400 	.word	0x00000400
 8001044:	20000728 	.word	0x20000728
 8001048:	20000740 	.word	0x20000740

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001076:	490e      	ldr	r1, [pc, #56]	; (80010b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800108c:	4c0b      	ldr	r4, [pc, #44]	; (80010bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800109a:	f7ff ffd7 	bl	800104c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f003 f947 	bl	8004330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fabf 	bl	8000624 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010a8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010b4:	08004d38 	.word	0x08004d38
  ldr r2, =_sbss
 80010b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010bc:	20000740 	.word	0x20000740

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 fd41 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fd58 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fd59 	bl	8001bde <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 fd21 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008
 800118c:	2000072c 	.word	0x2000072c

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2000072c 	.word	0x2000072c

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff ffee 	bl	8001190 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffde 	bl	8001190 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008

080011f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e033      	b.n	800126e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fcf4 	bl	8000bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	2b00      	cmp	r3, #0
 800122c:	d118      	bne.n	8001260 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001236:	f023 0302 	bic.w	r3, r3, #2
 800123a:	f043 0202 	orr.w	r2, r3, #2
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 fa48 	bl	80016d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f023 0303 	bic.w	r3, r3, #3
 8001256:	f043 0201 	orr.w	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
 800125e:	e001      	b.n	8001264 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Start_DMA+0x1e>
 8001292:	2302      	movs	r3, #2
 8001294:	e0ce      	b.n	8001434 <HAL_ADC_Start_DMA+0x1bc>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d018      	beq.n	80012de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0201 	orr.w	r2, r2, #1
 80012ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012bc:	4b5f      	ldr	r3, [pc, #380]	; (800143c <HAL_ADC_Start_DMA+0x1c4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a5f      	ldr	r2, [pc, #380]	; (8001440 <HAL_ADC_Start_DMA+0x1c8>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	0c9a      	lsrs	r2, r3, #18
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012d0:	e002      	b.n	80012d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f9      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ec:	d107      	bne.n	80012fe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b01      	cmp	r3, #1
 800130a:	f040 8086 	bne.w	800141a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001338:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800134c:	d106      	bne.n	800135c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f023 0206 	bic.w	r2, r3, #6
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
 800135a:	e002      	b.n	8001362 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <HAL_ADC_Start_DMA+0x1cc>)
 800136c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	4a35      	ldr	r2, [pc, #212]	; (8001448 <HAL_ADC_Start_DMA+0x1d0>)
 8001374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	4a34      	ldr	r2, [pc, #208]	; (800144c <HAL_ADC_Start_DMA+0x1d4>)
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	4a33      	ldr	r2, [pc, #204]	; (8001450 <HAL_ADC_Start_DMA+0x1d8>)
 8001384:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800138e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800139e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013ae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	334c      	adds	r3, #76	; 0x4c
 80013ba:	4619      	mov	r1, r3
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f000 fcc8 	bl	8001d54 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10f      	bne.n	80013f0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d129      	bne.n	8001432 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	e020      	b.n	8001432 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a17      	ldr	r2, [pc, #92]	; (8001454 <HAL_ADC_Start_DMA+0x1dc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d11b      	bne.n	8001432 <HAL_ADC_Start_DMA+0x1ba>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d114      	bne.n	8001432 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	e00b      	b.n	8001432 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f043 0210 	orr.w	r2, r3, #16
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	431bde83 	.word	0x431bde83
 8001444:	40012300 	.word	0x40012300
 8001448:	080018d1 	.word	0x080018d1
 800144c:	0800198b 	.word	0x0800198b
 8001450:	080019a7 	.word	0x080019a7
 8001454:	40012000 	.word	0x40012000

08001458 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x1c>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e105      	b.n	80016bc <HAL_ADC_ConfigChannel+0x228>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b09      	cmp	r3, #9
 80014be:	d925      	bls.n	800150c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68d9      	ldr	r1, [r3, #12]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	3b1e      	subs	r3, #30
 80014d6:	2207      	movs	r2, #7
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43da      	mvns	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	400a      	ands	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68d9      	ldr	r1, [r3, #12]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4403      	add	r3, r0
 80014fe:	3b1e      	subs	r3, #30
 8001500:	409a      	lsls	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	e022      	b.n	8001552 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6919      	ldr	r1, [r3, #16]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	2207      	movs	r2, #7
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	400a      	ands	r2, r1
 800152e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6919      	ldr	r1, [r3, #16]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	4603      	mov	r3, r0
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4403      	add	r3, r0
 8001548:	409a      	lsls	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b06      	cmp	r3, #6
 8001558:	d824      	bhi.n	80015a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b05      	subs	r3, #5
 800156c:	221f      	movs	r2, #31
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b05      	subs	r3, #5
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
 80015a2:	e04c      	b.n	800163e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	d824      	bhi.n	80015f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b23      	subs	r3, #35	; 0x23
 80015be:	221f      	movs	r2, #31
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43da      	mvns	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	400a      	ands	r2, r1
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	3b23      	subs	r3, #35	; 0x23
 80015e8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
 80015f4:	e023      	b.n	800163e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3b41      	subs	r3, #65	; 0x41
 8001608:	221f      	movs	r2, #31
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	400a      	ands	r2, r1
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	3b41      	subs	r3, #65	; 0x41
 8001632:	fa00 f203 	lsl.w	r2, r0, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_ADC_ConfigChannel+0x234>)
 8001640:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a21      	ldr	r2, [pc, #132]	; (80016cc <HAL_ADC_ConfigChannel+0x238>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d109      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1cc>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b12      	cmp	r3, #18
 8001652:	d105      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_ADC_ConfigChannel+0x238>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d123      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d003      	beq.n	800167a <HAL_ADC_ConfigChannel+0x1e6>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b11      	cmp	r3, #17
 8001678:	d11b      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b10      	cmp	r3, #16
 800168c:	d111      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_ADC_ConfigChannel+0x23c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_ADC_ConfigChannel+0x240>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9a      	lsrs	r2, r3, #18
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016a4:	e002      	b.n	80016ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f9      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40012300 	.word	0x40012300
 80016cc:	40012000 	.word	0x40012000
 80016d0:	20000000 	.word	0x20000000
 80016d4:	431bde83 	.word	0x431bde83

080016d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e0:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <ADC_Init+0x1f0>)
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800170c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	021a      	lsls	r2, r3, #8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6899      	ldr	r1, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	4a58      	ldr	r2, [pc, #352]	; (80018cc <ADC_Init+0x1f4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d022      	beq.n	80017b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800177e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6899      	ldr	r1, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	e00f      	b.n	80017d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0202 	bic.w	r2, r2, #2
 80017e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7e1b      	ldrb	r3, [r3, #24]
 80017f0:	005a      	lsls	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001812:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001822:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6859      	ldr	r1, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	3b01      	subs	r3, #1
 8001830:	035a      	lsls	r2, r3, #13
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	e007      	b.n	800184c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	3b01      	subs	r3, #1
 8001868:	051a      	lsls	r2, r3, #20
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001880:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6899      	ldr	r1, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800188e:	025a      	lsls	r2, r3, #9
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	029a      	lsls	r2, r3, #10
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	40012300 	.word	0x40012300
 80018cc:	0f000001 	.word	0x0f000001

080018d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d13c      	bne.n	8001964 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d12b      	bne.n	800195c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001908:	2b00      	cmp	r3, #0
 800190a:	d127      	bne.n	800195c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001924:	2b00      	cmp	r3, #0
 8001926:	d119      	bne.n	800195c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0220 	bic.w	r2, r2, #32
 8001936:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f043 0201 	orr.w	r2, r3, #1
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff fd7b 	bl	8001458 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001962:	e00e      	b.n	8001982 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff fd85 	bl	8001480 <HAL_ADC_ErrorCallback>
}
 8001976:	e004      	b.n	8001982 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001996:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff fd67 	bl	800146c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f043 0204 	orr.w	r2, r3, #4
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7ff fd5a 	bl	8001480 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db0b      	blt.n	8001a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	4907      	ldr	r1, [pc, #28]	; (8001a70 <__NVIC_EnableIRQ+0x38>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f7ff ff8e 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff29 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9c:	f7ff ff3e 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7ff ff8e 	bl	8001ac8 <NVIC_EncodePriority>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff5d 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff31 	bl	8001a38 <__NVIC_EnableIRQ>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffa2 	bl	8001b30 <SysTick_Config>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff fac4 	bl	8001190 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e099      	b.n	8001d48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c34:	e00f      	b.n	8001c56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c36:	f7ff faab 	bl	8001190 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b05      	cmp	r3, #5
 8001c42:	d908      	bls.n	8001c56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2220      	movs	r2, #32
 8001c48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e078      	b.n	8001d48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e8      	bne.n	8001c36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <HAL_DMA_Init+0x158>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d107      	bne.n	8001cc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f023 0307 	bic.w	r3, r3, #7
 8001cd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d117      	bne.n	8001d1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00e      	beq.n	8001d1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fa6f 	bl	80021e0 <DMA_CheckFifoParam>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d16:	2301      	movs	r3, #1
 8001d18:	e016      	b.n	8001d48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fa26 	bl	8002174 <DMA_CalcBaseAndBitshift>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	223f      	movs	r2, #63	; 0x3f
 8001d32:	409a      	lsls	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	f010803f 	.word	0xf010803f

08001d54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_DMA_Start_IT+0x26>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e040      	b.n	8001dfc <HAL_DMA_Start_IT+0xa8>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d12f      	bne.n	8001dee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2202      	movs	r2, #2
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f9b8 	bl	8002118 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	223f      	movs	r2, #63	; 0x3f
 8001dae:	409a      	lsls	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0216 	orr.w	r2, r2, #22
 8001dc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d007      	beq.n	8001ddc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0208 	orr.w	r2, r2, #8
 8001dda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e005      	b.n	8001dfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
 8001df8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e10:	4b8e      	ldr	r3, [pc, #568]	; (800204c <HAL_DMA_IRQHandler+0x248>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a8e      	ldr	r2, [pc, #568]	; (8002050 <HAL_DMA_IRQHandler+0x24c>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0a9b      	lsrs	r3, r3, #10
 8001e1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	2208      	movs	r2, #8
 8001e30:	409a      	lsls	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d01a      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0204 	bic.w	r2, r2, #4
 8001e56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	f043 0201 	orr.w	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2201      	movs	r2, #1
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d012      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2201      	movs	r2, #1
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f043 0202 	orr.w	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eaa:	2204      	movs	r2, #4
 8001eac:	409a      	lsls	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d012      	beq.n	8001edc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00b      	beq.n	8001edc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	2204      	movs	r2, #4
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f043 0204 	orr.w	r2, r3, #4
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d043      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d03c      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	2210      	movs	r2, #16
 8001f00:	409a      	lsls	r2, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d018      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d108      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d024      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	4798      	blx	r3
 8001f32:	e01f      	b.n	8001f74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01b      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
 8001f44:	e016      	b.n	8001f74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0208 	bic.w	r2, r2, #8
 8001f62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	2220      	movs	r2, #32
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 808f 	beq.w	80020a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8087 	beq.w	80020a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d136      	bne.n	800201c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0216 	bic.w	r2, r2, #22
 8001fbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d103      	bne.n	8001fde <HAL_DMA_IRQHandler+0x1da>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0208 	bic.w	r2, r2, #8
 8001fec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	223f      	movs	r2, #63	; 0x3f
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200e:	2b00      	cmp	r3, #0
 8002010:	d07e      	beq.n	8002110 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4798      	blx	r3
        }
        return;
 800201a:	e079      	b.n	8002110 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d01d      	beq.n	8002066 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10d      	bne.n	8002054 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	2b00      	cmp	r3, #0
 800203e:	d031      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
 8002048:	e02c      	b.n	80020a4 <HAL_DMA_IRQHandler+0x2a0>
 800204a:	bf00      	nop
 800204c:	20000000 	.word	0x20000000
 8002050:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d023      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e01e      	b.n	80020a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10f      	bne.n	8002094 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0210 	bic.w	r2, r2, #16
 8002082:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d032      	beq.n	8002112 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d022      	beq.n	80020fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2205      	movs	r2, #5
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d307      	bcc.n	80020ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f2      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x2cc>
 80020ea:	e000      	b.n	80020ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
 800210e:	e000      	b.n	8002112 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002110:	bf00      	nop
    }
  }
}
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002134:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b40      	cmp	r3, #64	; 0x40
 8002144:	d108      	bne.n	8002158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002156:	e007      	b.n	8002168 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3b10      	subs	r3, #16
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800218e:	4a13      	ldr	r2, [pc, #76]	; (80021dc <DMA_CalcBaseAndBitshift+0x68>)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d909      	bls.n	80021b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	1d1a      	adds	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	659a      	str	r2, [r3, #88]	; 0x58
 80021b4:	e007      	b.n	80021c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	aaaaaaab 	.word	0xaaaaaaab
 80021dc:	08004cec 	.word	0x08004cec

080021e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d11f      	bne.n	800223a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d856      	bhi.n	80022ae <DMA_CheckFifoParam+0xce>
 8002200:	a201      	add	r2, pc, #4	; (adr r2, 8002208 <DMA_CheckFifoParam+0x28>)
 8002202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002206:	bf00      	nop
 8002208:	08002219 	.word	0x08002219
 800220c:	0800222b 	.word	0x0800222b
 8002210:	08002219 	.word	0x08002219
 8002214:	080022af 	.word	0x080022af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d046      	beq.n	80022b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002228:	e043      	b.n	80022b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002232:	d140      	bne.n	80022b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002238:	e03d      	b.n	80022b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002242:	d121      	bne.n	8002288 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b03      	cmp	r3, #3
 8002248:	d837      	bhi.n	80022ba <DMA_CheckFifoParam+0xda>
 800224a:	a201      	add	r2, pc, #4	; (adr r2, 8002250 <DMA_CheckFifoParam+0x70>)
 800224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002250:	08002261 	.word	0x08002261
 8002254:	08002267 	.word	0x08002267
 8002258:	08002261 	.word	0x08002261
 800225c:	08002279 	.word	0x08002279
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      break;
 8002264:	e030      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d025      	beq.n	80022be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002276:	e022      	b.n	80022be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002280:	d11f      	bne.n	80022c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002286:	e01c      	b.n	80022c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d903      	bls.n	8002296 <DMA_CheckFifoParam+0xb6>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d003      	beq.n	800229c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002294:	e018      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
      break;
 800229a:	e015      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00e      	beq.n	80022c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
      break;
 80022ac:	e00b      	b.n	80022c6 <DMA_CheckFifoParam+0xe6>
      break;
 80022ae:	bf00      	nop
 80022b0:	e00a      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;
 80022b2:	bf00      	nop
 80022b4:	e008      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
 80022b8:	e006      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ba:	bf00      	nop
 80022bc:	e004      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;
 80022be:	bf00      	nop
 80022c0:	e002      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022c2:	bf00      	nop
 80022c4:	e000      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;
 80022c6:	bf00      	nop
    }
  } 
  
  return status; 
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e165      	b.n	80025c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	429a      	cmp	r2, r3
 800230e:	f040 8154 	bne.w	80025ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d005      	beq.n	800232a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002326:	2b02      	cmp	r3, #2
 8002328:	d130      	bne.n	800238c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 0201 	and.w	r2, r3, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b03      	cmp	r3, #3
 8002396:	d017      	beq.n	80023c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d123      	bne.n	800241c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	08da      	lsrs	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3208      	adds	r2, #8
 80023dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	69b9      	ldr	r1, [r7, #24]
 8002418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0203 	and.w	r2, r3, #3
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80ae 	beq.w	80025ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b5d      	ldr	r3, [pc, #372]	; (80025d8 <HAL_GPIO_Init+0x300>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a5c      	ldr	r2, [pc, #368]	; (80025d8 <HAL_GPIO_Init+0x300>)
 8002468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <HAL_GPIO_Init+0x300>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800247a:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_GPIO_Init+0x304>)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4f      	ldr	r2, [pc, #316]	; (80025e0 <HAL_GPIO_Init+0x308>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d025      	beq.n	80024f2 <HAL_GPIO_Init+0x21a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4e      	ldr	r2, [pc, #312]	; (80025e4 <HAL_GPIO_Init+0x30c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01f      	beq.n	80024ee <HAL_GPIO_Init+0x216>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <HAL_GPIO_Init+0x310>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d019      	beq.n	80024ea <HAL_GPIO_Init+0x212>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4c      	ldr	r2, [pc, #304]	; (80025ec <HAL_GPIO_Init+0x314>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_GPIO_Init+0x20e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4b      	ldr	r2, [pc, #300]	; (80025f0 <HAL_GPIO_Init+0x318>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00d      	beq.n	80024e2 <HAL_GPIO_Init+0x20a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4a      	ldr	r2, [pc, #296]	; (80025f4 <HAL_GPIO_Init+0x31c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <HAL_GPIO_Init+0x206>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a49      	ldr	r2, [pc, #292]	; (80025f8 <HAL_GPIO_Init+0x320>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d101      	bne.n	80024da <HAL_GPIO_Init+0x202>
 80024d6:	2306      	movs	r3, #6
 80024d8:	e00c      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024da:	2307      	movs	r3, #7
 80024dc:	e00a      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024de:	2305      	movs	r3, #5
 80024e0:	e008      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024e2:	2304      	movs	r3, #4
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024e6:	2303      	movs	r3, #3
 80024e8:	e004      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e002      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024f2:	2300      	movs	r3, #0
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	f002 0203 	and.w	r2, r2, #3
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	4093      	lsls	r3, r2
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002504:	4935      	ldr	r1, [pc, #212]	; (80025dc <HAL_GPIO_Init+0x304>)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	3302      	adds	r3, #2
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002512:	4b3a      	ldr	r3, [pc, #232]	; (80025fc <HAL_GPIO_Init+0x324>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002536:	4a31      	ldr	r2, [pc, #196]	; (80025fc <HAL_GPIO_Init+0x324>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800253c:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <HAL_GPIO_Init+0x324>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002560:	4a26      	ldr	r2, [pc, #152]	; (80025fc <HAL_GPIO_Init+0x324>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002566:	4b25      	ldr	r3, [pc, #148]	; (80025fc <HAL_GPIO_Init+0x324>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800258a:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <HAL_GPIO_Init+0x324>)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_GPIO_Init+0x324>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b4:	4a11      	ldr	r2, [pc, #68]	; (80025fc <HAL_GPIO_Init+0x324>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3301      	adds	r3, #1
 80025be:	61fb      	str	r3, [r7, #28]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b0f      	cmp	r3, #15
 80025c4:	f67f ae96 	bls.w	80022f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3724      	adds	r7, #36	; 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40013800 	.word	0x40013800
 80025e0:	40020000 	.word	0x40020000
 80025e4:	40020400 	.word	0x40020400
 80025e8:	40020800 	.word	0x40020800
 80025ec:	40020c00 	.word	0x40020c00
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40021400 	.word	0x40021400
 80025f8:	40021800 	.word	0x40021800
 80025fc:	40013c00 	.word	0x40013c00

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800261c:	e003      	b.n	8002626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	041a      	lsls	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	619a      	str	r2, [r3, #24]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002634:	b08f      	sub	sp, #60	; 0x3c
 8002636:	af0a      	add	r7, sp, #40	; 0x28
 8002638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e116      	b.n	8002872 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe fc12 	bl	8000e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2203      	movs	r2, #3
 8002668:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f001 fbb3 	bl	8003dee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	687e      	ldr	r6, [r7, #4]
 8002690:	466d      	mov	r5, sp
 8002692:	f106 0410 	add.w	r4, r6, #16
 8002696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026a6:	1d33      	adds	r3, r6, #4
 80026a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f001 fb3e 	bl	8003d2c <USB_CoreInit>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0d7      	b.n	8002872 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 fba1 	bl	8003e10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e04a      	b.n	800276a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	333d      	adds	r3, #61	; 0x3d
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	333c      	adds	r3, #60	; 0x3c
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	b298      	uxth	r0, r3
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3344      	adds	r3, #68	; 0x44
 8002710:	4602      	mov	r2, r0
 8002712:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3340      	adds	r3, #64	; 0x40
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	3348      	adds	r3, #72	; 0x48
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	334c      	adds	r3, #76	; 0x4c
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3354      	adds	r3, #84	; 0x54
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	3301      	adds	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	d3af      	bcc.n	80026d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e044      	b.n	8002804 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	3301      	adds	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	d3b5      	bcc.n	800277a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	687e      	ldr	r6, [r7, #4]
 8002816:	466d      	mov	r5, sp
 8002818:	f106 0410 	add.w	r4, r6, #16
 800281c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002828:	e885 0003 	stmia.w	r5, {r0, r1}
 800282c:	1d33      	adds	r3, r6, #4
 800282e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002830:	6838      	ldr	r0, [r7, #0]
 8002832:	f001 fb39 	bl	8003ea8 <USB_DevInit>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e014      	b.n	8002872 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	2b01      	cmp	r3, #1
 800285e:	d102      	bne.n	8002866 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f80a 	bl	800287a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f001 fcf7 	bl	800425e <USB_DevDisconnect>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800287a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ac:	f043 0303 	orr.w	r3, r3, #3
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0cc      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d90c      	bls.n	8002900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d044      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d119      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d003      	beq.n	8002982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	2b03      	cmp	r3, #3
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e06f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e067      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4934      	ldr	r1, [pc, #208]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fbec 	bl	8001190 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe fbe8 	bl	8001190 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e04f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d20c      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490a      	ldr	r1, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fb4c 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023c00 	.word	0x40023c00
 8002a80:	40023800 	.word	0x40023800
 8002a84:	08004cd4 	.word	0x08004cd4
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a94:	b094      	sub	sp, #80	; 0x50
 8002a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa8:	4b79      	ldr	r3, [pc, #484]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	f200 80e1 	bhi.w	8002c7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x3a>
 8002ac2:	e0db      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ac8:	e0db      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aca:	4b73      	ldr	r3, [pc, #460]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x208>)
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ace:	e0d8      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad0:	4b6f      	ldr	r3, [pc, #444]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d063      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	2200      	movs	r2, #0
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
 8002afa:	2300      	movs	r3, #0
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
 8002afe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b02:	4622      	mov	r2, r4
 8002b04:	462b      	mov	r3, r5
 8002b06:	f04f 0000 	mov.w	r0, #0
 8002b0a:	f04f 0100 	mov.w	r1, #0
 8002b0e:	0159      	lsls	r1, r3, #5
 8002b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b14:	0150      	lsls	r0, r2, #5
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	1a51      	subs	r1, r2, r1
 8002b1e:	6139      	str	r1, [r7, #16]
 8002b20:	4629      	mov	r1, r5
 8002b22:	eb63 0301 	sbc.w	r3, r3, r1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b34:	4659      	mov	r1, fp
 8002b36:	018b      	lsls	r3, r1, #6
 8002b38:	4651      	mov	r1, sl
 8002b3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b3e:	4651      	mov	r1, sl
 8002b40:	018a      	lsls	r2, r1, #6
 8002b42:	4651      	mov	r1, sl
 8002b44:	ebb2 0801 	subs.w	r8, r2, r1
 8002b48:	4659      	mov	r1, fp
 8002b4a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b62:	4690      	mov	r8, r2
 8002b64:	4699      	mov	r9, r3
 8002b66:	4623      	mov	r3, r4
 8002b68:	eb18 0303 	adds.w	r3, r8, r3
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	462b      	mov	r3, r5
 8002b70:	eb49 0303 	adc.w	r3, r9, r3
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b82:	4629      	mov	r1, r5
 8002b84:	024b      	lsls	r3, r1, #9
 8002b86:	4621      	mov	r1, r4
 8002b88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	024a      	lsls	r2, r1, #9
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b96:	2200      	movs	r2, #0
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ba0:	f7fd fb8e 	bl	80002c0 <__aeabi_uldivmod>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bac:	e058      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bae:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	4611      	mov	r1, r2
 8002bba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bbe:	623b      	str	r3, [r7, #32]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bc8:	4642      	mov	r2, r8
 8002bca:	464b      	mov	r3, r9
 8002bcc:	f04f 0000 	mov.w	r0, #0
 8002bd0:	f04f 0100 	mov.w	r1, #0
 8002bd4:	0159      	lsls	r1, r3, #5
 8002bd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bda:	0150      	lsls	r0, r2, #5
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4641      	mov	r1, r8
 8002be2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002be6:	4649      	mov	r1, r9
 8002be8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c00:	ebb2 040a 	subs.w	r4, r2, sl
 8002c04:	eb63 050b 	sbc.w	r5, r3, fp
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	00eb      	lsls	r3, r5, #3
 8002c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c16:	00e2      	lsls	r2, r4, #3
 8002c18:	4614      	mov	r4, r2
 8002c1a:	461d      	mov	r5, r3
 8002c1c:	4643      	mov	r3, r8
 8002c1e:	18e3      	adds	r3, r4, r3
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	464b      	mov	r3, r9
 8002c24:	eb45 0303 	adc.w	r3, r5, r3
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c36:	4629      	mov	r1, r5
 8002c38:	028b      	lsls	r3, r1, #10
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c40:	4621      	mov	r1, r4
 8002c42:	028a      	lsls	r2, r1, #10
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	61fa      	str	r2, [r7, #28]
 8002c50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c54:	f7fd fb34 	bl	80002c0 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c7a:	e002      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3750      	adds	r7, #80	; 0x50
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	00f42400 	.word	0x00f42400
 8002c98:	007a1200 	.word	0x007a1200

08002c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb8:	f7ff fff0 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0a9b      	lsrs	r3, r3, #10
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4903      	ldr	r1, [pc, #12]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	08004ce4 	.word	0x08004ce4

08002cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ce0:	f7ff ffdc 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0b5b      	lsrs	r3, r3, #13
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08004ce4 	.word	0x08004ce4

08002d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d010      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002d24:	4b87      	ldr	r3, [pc, #540]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d2a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	4984      	ldr	r1, [pc, #528]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8002d42:	2301      	movs	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d010      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002d52:	4b7c      	ldr	r3, [pc, #496]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d58:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	4978      	ldr	r1, [pc, #480]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8002d70:	2301      	movs	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8083 	beq.w	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	4b6f      	ldr	r3, [pc, #444]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4a6e      	ldr	r2, [pc, #440]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d90:	6413      	str	r3, [r2, #64]	; 0x40
 8002d92:	4b6c      	ldr	r3, [pc, #432]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a69      	ldr	r2, [pc, #420]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002daa:	f7fe f9f1 	bl	8001190 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002db2:	f7fe f9ed 	bl	8001190 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e162      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002dc4:	4b60      	ldr	r3, [pc, #384]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dd0:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd8:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02f      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d028      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dee:	4b55      	ldr	r3, [pc, #340]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df8:	4b54      	ldr	r3, [pc, #336]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dfe:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e04:	4a4f      	ldr	r2, [pc, #316]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e0a:	4b4e      	ldr	r3, [pc, #312]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d114      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe f9bb 	bl	8001190 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe f9b7 	bl	8001190 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e12a      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	4b43      	ldr	r3, [pc, #268]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ee      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e4c:	d10d      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e62:	4938      	ldr	r1, [pc, #224]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]
 8002e68:	e005      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002e6a:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	4a35      	ldr	r2, [pc, #212]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e70:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e74:	6093      	str	r3, [r2, #8]
 8002e76:	4b33      	ldr	r3, [pc, #204]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e82:	4930      	ldr	r1, [pc, #192]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d004      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e9c:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	4922      	ldr	r1, [pc, #136]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d011      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	491a      	ldr	r1, [pc, #104]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002eec:	2301      	movs	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d004      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b80      	cmp	r3, #128	; 0x80
 8002f1e:	f040 8091 	bne.w	8003044 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f28:	f7fe f932 	bl	8001190 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f2e:	e013      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f30:	f7fe f92e 	bl	8001190 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d90c      	bls.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0a3      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	42470e40 	.word	0x42470e40
 8002f50:	424711e0 	.word	0x424711e0
 8002f54:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f58:	4b4e      	ldr	r3, [pc, #312]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e5      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002f64:	4a4c      	ldr	r2, [pc, #304]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d023      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d019      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d004      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d019      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc6:	d110      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	019b      	lsls	r3, r3, #6
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	071b      	lsls	r3, r3, #28
 8002fe2:	492c      	ldr	r1, [pc, #176]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d010      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	019b      	lsls	r3, r3, #6
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	061b      	lsls	r3, r3, #24
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	071b      	lsls	r3, r3, #28
 8003010:	4920      	ldr	r1, [pc, #128]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003018:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800301e:	f7fe f8b7 	bl	8001190 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003026:	f7fe f8b3 	bl	8001190 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e028      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003038:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003050:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003056:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	490d      	ldr	r1, [pc, #52]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003078:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	424710d8 	.word	0x424710d8
 800309c:	42470068 	.word	0x42470068

080030a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e273      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d075      	beq.n	80031aa <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030be:	4b88      	ldr	r3, [pc, #544]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d00c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ca:	4b85      	ldr	r3, [pc, #532]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d112      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d6:	4b82      	ldr	r3, [pc, #520]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e2:	d10b      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	4b7e      	ldr	r3, [pc, #504]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d05b      	beq.n	80031a8 <HAL_RCC_OscConfig+0x108>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d157      	bne.n	80031a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e24e      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d106      	bne.n	8003114 <HAL_RCC_OscConfig+0x74>
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a75      	ldr	r2, [pc, #468]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e01d      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x98>
 800311e:	4b70      	ldr	r3, [pc, #448]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6f      	ldr	r2, [pc, #444]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6c      	ldr	r2, [pc, #432]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003138:	4b69      	ldr	r3, [pc, #420]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a68      	ldr	r2, [pc, #416]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe f81a 	bl	8001190 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe f816 	bl	8001190 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e213      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0xc0>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe f806 	bl	8001190 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003188:	f7fe f802 	bl	8001190 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1ff      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	4b51      	ldr	r3, [pc, #324]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0xe8>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d063      	beq.n	800327e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031b6:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d11c      	bne.n	8003208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ce:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x152>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1d3      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4937      	ldr	r1, [pc, #220]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	e03a      	b.n	800327e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_RCC_OscConfig+0x244>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fd ffbb 	bl	8001190 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321e:	f7fd ffb7 	bl	8001190 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e1b4      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4925      	ldr	r1, [pc, #148]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
 8003250:	e015      	b.n	800327e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_OscConfig+0x244>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fd ff9a 	bl	8001190 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003260:	f7fd ff96 	bl	8001190 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e193      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d036      	beq.n	80032f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_RCC_OscConfig+0x248>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7fd ff7a 	bl	8001190 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a0:	f7fd ff76 	bl	8001190 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e173      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80032b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x200>
 80032be:	e01b      	b.n	80032f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_RCC_OscConfig+0x248>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7fd ff63 	bl	8001190 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032cc:	e00e      	b.n	80032ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ce:	f7fd ff5f 	bl	8001190 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d907      	bls.n	80032ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e15c      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
 80032e0:	40023800 	.word	0x40023800
 80032e4:	42470000 	.word	0x42470000
 80032e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ec:	4b8a      	ldr	r3, [pc, #552]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80032ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1ea      	bne.n	80032ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8097 	beq.w	8003434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330a:	4b83      	ldr	r3, [pc, #524]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	4b7f      	ldr	r3, [pc, #508]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a7e      	ldr	r2, [pc, #504]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 8003320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b7c      	ldr	r3, [pc, #496]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003332:	2301      	movs	r3, #1
 8003334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003336:	4b79      	ldr	r3, [pc, #484]	; (800351c <HAL_RCC_OscConfig+0x47c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d118      	bne.n	8003374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003342:	4b76      	ldr	r3, [pc, #472]	; (800351c <HAL_RCC_OscConfig+0x47c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a75      	ldr	r2, [pc, #468]	; (800351c <HAL_RCC_OscConfig+0x47c>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334e:	f7fd ff1f 	bl	8001190 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003356:	f7fd ff1b 	bl	8001190 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e118      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003368:	4b6c      	ldr	r3, [pc, #432]	; (800351c <HAL_RCC_OscConfig+0x47c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d106      	bne.n	800338a <HAL_RCC_OscConfig+0x2ea>
 800337c:	4b66      	ldr	r3, [pc, #408]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4a65      	ldr	r2, [pc, #404]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6713      	str	r3, [r2, #112]	; 0x70
 8003388:	e01c      	b.n	80033c4 <HAL_RCC_OscConfig+0x324>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b05      	cmp	r3, #5
 8003390:	d10c      	bne.n	80033ac <HAL_RCC_OscConfig+0x30c>
 8003392:	4b61      	ldr	r3, [pc, #388]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a60      	ldr	r2, [pc, #384]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 8003398:	f043 0304 	orr.w	r3, r3, #4
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	4b5e      	ldr	r3, [pc, #376]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a5d      	ldr	r2, [pc, #372]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
 80033aa:	e00b      	b.n	80033c4 <HAL_RCC_OscConfig+0x324>
 80033ac:	4b5a      	ldr	r3, [pc, #360]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a59      	ldr	r2, [pc, #356]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
 80033b8:	4b57      	ldr	r3, [pc, #348]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a56      	ldr	r2, [pc, #344]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80033be:	f023 0304 	bic.w	r3, r3, #4
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fd fee0 	bl	8001190 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fd fedc 	bl	8001190 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e0d7      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ea:	4b4b      	ldr	r3, [pc, #300]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0ee      	beq.n	80033d4 <HAL_RCC_OscConfig+0x334>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fd feca 	bl	8001190 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7fd fec6 	bl	8001190 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0c1      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003416:	4b40      	ldr	r3, [pc, #256]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ee      	bne.n	8003400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d105      	bne.n	8003434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003428:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	4a3a      	ldr	r2, [pc, #232]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 800342e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003432:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80ad 	beq.w	8003598 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800343e:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b08      	cmp	r3, #8
 8003448:	d060      	beq.n	800350c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d145      	bne.n	80034de <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003452:	4b33      	ldr	r3, [pc, #204]	; (8003520 <HAL_RCC_OscConfig+0x480>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd fe9a 	bl	8001190 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003460:	f7fd fe96 	bl	8001190 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e093      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	4b29      	ldr	r3, [pc, #164]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	3b01      	subs	r3, #1
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	071b      	lsls	r3, r3, #28
 80034aa:	491b      	ldr	r1, [pc, #108]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b0:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_RCC_OscConfig+0x480>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b6:	f7fd fe6b 	bl	8001190 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034be:	f7fd fe67 	bl	8001190 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e064      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x41e>
 80034dc:	e05c      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_RCC_OscConfig+0x480>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd fe54 	bl	8001190 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd fe50 	bl	8001190 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e04d      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x44c>
 800350a:	e045      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d107      	bne.n	8003524 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e040      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
 8003518:	40023800 	.word	0x40023800
 800351c:	40007000 	.word	0x40007000
 8003520:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003524:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <HAL_RCC_OscConfig+0x504>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d030      	beq.n	8003594 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d129      	bne.n	8003594 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d122      	bne.n	8003594 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003554:	4013      	ands	r3, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800355a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800355c:	4293      	cmp	r3, r2
 800355e:	d119      	bne.n	8003594 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	3b01      	subs	r3, #1
 800356e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d10f      	bne.n	8003594 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d107      	bne.n	8003594 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800

080035a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e03f      	b.n	800363a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd fba8 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2224      	movs	r2, #36	; 0x24
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f929 	bl	8003844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b08a      	sub	sp, #40	; 0x28
 8003646:	af02      	add	r7, sp, #8
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b20      	cmp	r3, #32
 8003660:	d17c      	bne.n	800375c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HAL_UART_Transmit+0x2c>
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e075      	b.n	800375e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_UART_Transmit+0x3e>
 800367c:	2302      	movs	r3, #2
 800367e:	e06e      	b.n	800375e <HAL_UART_Transmit+0x11c>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2221      	movs	r2, #33	; 0x21
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003696:	f7fd fd7b 	bl	8001190 <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	88fa      	ldrh	r2, [r7, #6]
 80036a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b0:	d108      	bne.n	80036c4 <HAL_UART_Transmit+0x82>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e003      	b.n	80036cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036d4:	e02a      	b.n	800372c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2200      	movs	r2, #0
 80036de:	2180      	movs	r1, #128	; 0x80
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f840 	bl	8003766 <UART_WaitOnFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e036      	b.n	800375e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003704:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	3302      	adds	r3, #2
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	e007      	b.n	800371e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	3301      	adds	r3, #1
 800371c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1cf      	bne.n	80036d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2200      	movs	r2, #0
 800373e:	2140      	movs	r1, #64	; 0x40
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f810 	bl	8003766 <UART_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e006      	b.n	800375e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b090      	sub	sp, #64	; 0x40
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	4613      	mov	r3, r2
 8003774:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003776:	e050      	b.n	800381a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d04c      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x30>
 8003786:	f7fd fd03 	bl	8001190 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003792:	429a      	cmp	r2, r3
 8003794:	d241      	bcs.n	800381a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037b6:	637a      	str	r2, [r7, #52]	; 0x34
 80037b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e5      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	613b      	str	r3, [r7, #16]
   return(result);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3314      	adds	r3, #20
 80037e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ea:	623a      	str	r2, [r7, #32]
 80037ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	69f9      	ldr	r1, [r7, #28]
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e5      	bne.n	80037ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e00f      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	429a      	cmp	r2, r3
 8003836:	d09f      	beq.n	8003778 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3740      	adds	r7, #64	; 0x40
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b0c0      	sub	sp, #256	; 0x100
 800384a:	af00      	add	r7, sp, #0
 800384c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	68d9      	ldr	r1, [r3, #12]
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	ea40 0301 	orr.w	r3, r0, r1
 800386c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	431a      	orrs	r2, r3
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	431a      	orrs	r2, r3
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800389c:	f021 010c 	bic.w	r1, r1, #12
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038aa:	430b      	orrs	r3, r1
 80038ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038be:	6999      	ldr	r1, [r3, #24]
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	ea40 0301 	orr.w	r3, r0, r1
 80038ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b8f      	ldr	r3, [pc, #572]	; (8003b10 <UART_SetConfig+0x2cc>)
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d005      	beq.n	80038e4 <UART_SetConfig+0xa0>
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b8d      	ldr	r3, [pc, #564]	; (8003b14 <UART_SetConfig+0x2d0>)
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d104      	bne.n	80038ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038e4:	f7ff f9fa 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 80038e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038ec:	e003      	b.n	80038f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ee:	f7ff f9e1 	bl	8002cb4 <HAL_RCC_GetPCLK1Freq>
 80038f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003900:	f040 810c 	bne.w	8003b1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003908:	2200      	movs	r2, #0
 800390a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800390e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003912:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003916:	4622      	mov	r2, r4
 8003918:	462b      	mov	r3, r5
 800391a:	1891      	adds	r1, r2, r2
 800391c:	65b9      	str	r1, [r7, #88]	; 0x58
 800391e:	415b      	adcs	r3, r3
 8003920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003922:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003926:	4621      	mov	r1, r4
 8003928:	eb12 0801 	adds.w	r8, r2, r1
 800392c:	4629      	mov	r1, r5
 800392e:	eb43 0901 	adc.w	r9, r3, r1
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003946:	4690      	mov	r8, r2
 8003948:	4699      	mov	r9, r3
 800394a:	4623      	mov	r3, r4
 800394c:	eb18 0303 	adds.w	r3, r8, r3
 8003950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003954:	462b      	mov	r3, r5
 8003956:	eb49 0303 	adc.w	r3, r9, r3
 800395a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800396a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800396e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003972:	460b      	mov	r3, r1
 8003974:	18db      	adds	r3, r3, r3
 8003976:	653b      	str	r3, [r7, #80]	; 0x50
 8003978:	4613      	mov	r3, r2
 800397a:	eb42 0303 	adc.w	r3, r2, r3
 800397e:	657b      	str	r3, [r7, #84]	; 0x54
 8003980:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003984:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003988:	f7fc fc9a 	bl	80002c0 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4b61      	ldr	r3, [pc, #388]	; (8003b18 <UART_SetConfig+0x2d4>)
 8003992:	fba3 2302 	umull	r2, r3, r3, r2
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	011c      	lsls	r4, r3, #4
 800399a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	1891      	adds	r1, r2, r2
 80039b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80039b4:	415b      	adcs	r3, r3
 80039b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039bc:	4641      	mov	r1, r8
 80039be:	eb12 0a01 	adds.w	sl, r2, r1
 80039c2:	4649      	mov	r1, r9
 80039c4:	eb43 0b01 	adc.w	fp, r3, r1
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039dc:	4692      	mov	sl, r2
 80039de:	469b      	mov	fp, r3
 80039e0:	4643      	mov	r3, r8
 80039e2:	eb1a 0303 	adds.w	r3, sl, r3
 80039e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ea:	464b      	mov	r3, r9
 80039ec:	eb4b 0303 	adc.w	r3, fp, r3
 80039f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	18db      	adds	r3, r3, r3
 8003a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a0e:	4613      	mov	r3, r2
 8003a10:	eb42 0303 	adc.w	r3, r2, r3
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
 8003a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a1e:	f7fc fc4f 	bl	80002c0 <__aeabi_uldivmod>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4611      	mov	r1, r2
 8003a28:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <UART_SetConfig+0x2d4>)
 8003a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	2264      	movs	r2, #100	; 0x64
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
 8003a36:	1acb      	subs	r3, r1, r3
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a3e:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <UART_SetConfig+0x2d4>)
 8003a40:	fba3 2302 	umull	r2, r3, r3, r2
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a4c:	441c      	add	r4, r3
 8003a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a60:	4642      	mov	r2, r8
 8003a62:	464b      	mov	r3, r9
 8003a64:	1891      	adds	r1, r2, r2
 8003a66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a68:	415b      	adcs	r3, r3
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a70:	4641      	mov	r1, r8
 8003a72:	1851      	adds	r1, r2, r1
 8003a74:	6339      	str	r1, [r7, #48]	; 0x30
 8003a76:	4649      	mov	r1, r9
 8003a78:	414b      	adcs	r3, r1
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a88:	4659      	mov	r1, fp
 8003a8a:	00cb      	lsls	r3, r1, #3
 8003a8c:	4651      	mov	r1, sl
 8003a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a92:	4651      	mov	r1, sl
 8003a94:	00ca      	lsls	r2, r1, #3
 8003a96:	4610      	mov	r0, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	189b      	adds	r3, r3, r2
 8003aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	460a      	mov	r2, r1
 8003aa8:	eb42 0303 	adc.w	r3, r2, r3
 8003aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003abc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	18db      	adds	r3, r3, r3
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aca:	4613      	mov	r3, r2
 8003acc:	eb42 0303 	adc.w	r3, r2, r3
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ada:	f7fc fbf1 	bl	80002c0 <__aeabi_uldivmod>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <UART_SetConfig+0x2d4>)
 8003ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	2164      	movs	r1, #100	; 0x64
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	3332      	adds	r3, #50	; 0x32
 8003af6:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <UART_SetConfig+0x2d4>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	f003 0207 	and.w	r2, r3, #7
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4422      	add	r2, r4
 8003b0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b0c:	e105      	b.n	8003d1a <UART_SetConfig+0x4d6>
 8003b0e:	bf00      	nop
 8003b10:	40011000 	.word	0x40011000
 8003b14:	40011400 	.word	0x40011400
 8003b18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b2e:	4642      	mov	r2, r8
 8003b30:	464b      	mov	r3, r9
 8003b32:	1891      	adds	r1, r2, r2
 8003b34:	6239      	str	r1, [r7, #32]
 8003b36:	415b      	adcs	r3, r3
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b3e:	4641      	mov	r1, r8
 8003b40:	1854      	adds	r4, r2, r1
 8003b42:	4649      	mov	r1, r9
 8003b44:	eb43 0501 	adc.w	r5, r3, r1
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	00eb      	lsls	r3, r5, #3
 8003b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b56:	00e2      	lsls	r2, r4, #3
 8003b58:	4614      	mov	r4, r2
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	4643      	mov	r3, r8
 8003b5e:	18e3      	adds	r3, r4, r3
 8003b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b64:	464b      	mov	r3, r9
 8003b66:	eb45 0303 	adc.w	r3, r5, r3
 8003b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	008b      	lsls	r3, r1, #2
 8003b8e:	4621      	mov	r1, r4
 8003b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b94:	4621      	mov	r1, r4
 8003b96:	008a      	lsls	r2, r1, #2
 8003b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b9c:	f7fc fb90 	bl	80002c0 <__aeabi_uldivmod>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4b60      	ldr	r3, [pc, #384]	; (8003d28 <UART_SetConfig+0x4e4>)
 8003ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	011c      	lsls	r4, r3, #4
 8003bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	61b9      	str	r1, [r7, #24]
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	1851      	adds	r1, r2, r1
 8003bd4:	6139      	str	r1, [r7, #16]
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	414b      	adcs	r3, r1
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be8:	4659      	mov	r1, fp
 8003bea:	00cb      	lsls	r3, r1, #3
 8003bec:	4651      	mov	r1, sl
 8003bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	00ca      	lsls	r2, r1, #3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	189b      	adds	r3, r3, r2
 8003c00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c04:	464b      	mov	r3, r9
 8003c06:	460a      	mov	r2, r1
 8003c08:	eb42 0303 	adc.w	r3, r2, r3
 8003c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c28:	4649      	mov	r1, r9
 8003c2a:	008b      	lsls	r3, r1, #2
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c32:	4641      	mov	r1, r8
 8003c34:	008a      	lsls	r2, r1, #2
 8003c36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c3a:	f7fc fb41 	bl	80002c0 <__aeabi_uldivmod>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <UART_SetConfig+0x4e4>)
 8003c44:	fba3 1302 	umull	r1, r3, r3, r2
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	2164      	movs	r1, #100	; 0x64
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	3332      	adds	r3, #50	; 0x32
 8003c56:	4a34      	ldr	r2, [pc, #208]	; (8003d28 <UART_SetConfig+0x4e4>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c62:	441c      	add	r4, r3
 8003c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c68:	2200      	movs	r2, #0
 8003c6a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c6c:	677a      	str	r2, [r7, #116]	; 0x74
 8003c6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c72:	4642      	mov	r2, r8
 8003c74:	464b      	mov	r3, r9
 8003c76:	1891      	adds	r1, r2, r2
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	415b      	adcs	r3, r3
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c82:	4641      	mov	r1, r8
 8003c84:	1851      	adds	r1, r2, r1
 8003c86:	6039      	str	r1, [r7, #0]
 8003c88:	4649      	mov	r1, r9
 8003c8a:	414b      	adcs	r3, r1
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c9a:	4659      	mov	r1, fp
 8003c9c:	00cb      	lsls	r3, r1, #3
 8003c9e:	4651      	mov	r1, sl
 8003ca0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	00ca      	lsls	r2, r1, #3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	4603      	mov	r3, r0
 8003cae:	4642      	mov	r2, r8
 8003cb0:	189b      	adds	r3, r3, r2
 8003cb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cb4:	464b      	mov	r3, r9
 8003cb6:	460a      	mov	r2, r1
 8003cb8:	eb42 0303 	adc.w	r3, r2, r3
 8003cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc8:	667a      	str	r2, [r7, #100]	; 0x64
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	008b      	lsls	r3, r1, #2
 8003cda:	4641      	mov	r1, r8
 8003cdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	008a      	lsls	r2, r1, #2
 8003ce4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ce8:	f7fc faea 	bl	80002c0 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <UART_SetConfig+0x4e4>)
 8003cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2164      	movs	r1, #100	; 0x64
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	3332      	adds	r3, #50	; 0x32
 8003d04:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <UART_SetConfig+0x4e4>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	f003 020f 	and.w	r2, r3, #15
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4422      	add	r2, r4
 8003d18:	609a      	str	r2, [r3, #8]
}
 8003d1a:	bf00      	nop
 8003d1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	51eb851f 	.word	0x51eb851f

08003d2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	f107 001c 	add.w	r0, r7, #28
 8003d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d122      	bne.n	8003d8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d105      	bne.n	8003d7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fa9c 	bl	80042bc <USB_CoreReset>
 8003d84:	4603      	mov	r3, r0
 8003d86:	73fb      	strb	r3, [r7, #15]
 8003d88:	e01a      	b.n	8003dc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fa90 	bl	80042bc <USB_CoreReset>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	639a      	str	r2, [r3, #56]	; 0x38
 8003db2:	e005      	b.n	8003dc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10b      	bne.n	8003dde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f043 0206 	orr.w	r2, r3, #6
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f043 0220 	orr.w	r2, r3, #32
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dea:	b004      	add	sp, #16
 8003dec:	4770      	bx	lr

08003dee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d115      	bne.n	8003e5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e3e:	2001      	movs	r0, #1
 8003e40:	f7fd f9b2 	bl	80011a8 <HAL_Delay>
      ms++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3301      	adds	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa28 	bl	80042a0 <USB_GetMode>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d01e      	beq.n	8003e94 <USB_SetCurrentMode+0x84>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b31      	cmp	r3, #49	; 0x31
 8003e5a:	d9f0      	bls.n	8003e3e <USB_SetCurrentMode+0x2e>
 8003e5c:	e01a      	b.n	8003e94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d115      	bne.n	8003e90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e70:	2001      	movs	r0, #1
 8003e72:	f7fd f999 	bl	80011a8 <HAL_Delay>
      ms++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fa0f 	bl	80042a0 <USB_GetMode>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <USB_SetCurrentMode+0x84>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b31      	cmp	r3, #49	; 0x31
 8003e8c:	d9f0      	bls.n	8003e70 <USB_SetCurrentMode+0x60>
 8003e8e:	e001      	b.n	8003e94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e005      	b.n	8003ea0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b32      	cmp	r3, #50	; 0x32
 8003e98:	d101      	bne.n	8003e9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	e009      	b.n	8003edc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3340      	adds	r3, #64	; 0x40
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b0e      	cmp	r3, #14
 8003ee0:	d9f2      	bls.n	8003ec8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d11c      	bne.n	8003f22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e005      	b.n	8003f2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f34:	461a      	mov	r2, r3
 8003f36:	2300      	movs	r3, #0
 8003f38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f40:	4619      	mov	r1, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f48:	461a      	mov	r2, r3
 8003f4a:	680b      	ldr	r3, [r1, #0]
 8003f4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10c      	bne.n	8003f6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d104      	bne.n	8003f64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f965 	bl	800422c <USB_SetDevSpeed>
 8003f62:	e008      	b.n	8003f76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f64:	2101      	movs	r1, #1
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f960 	bl	800422c <USB_SetDevSpeed>
 8003f6c:	e003      	b.n	8003f76 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f6e:	2103      	movs	r1, #3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f95b 	bl	800422c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f76:	2110      	movs	r1, #16
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f8f3 	bl	8004164 <USB_FlushTxFifo>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f91f 	bl	80041cc <USB_FlushRxFifo>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003faa:	461a      	mov	r2, r3
 8003fac:	2300      	movs	r3, #0
 8003fae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	e043      	b.n	800404a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd8:	d118      	bne.n	800400c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fec:	461a      	mov	r2, r3
 8003fee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	e013      	b.n	800401e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	461a      	mov	r2, r3
 8004004:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e008      	b.n	800401e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004018:	461a      	mov	r2, r3
 800401a:	2300      	movs	r3, #0
 800401c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402a:	461a      	mov	r2, r3
 800402c:	2300      	movs	r3, #0
 800402e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	461a      	mov	r2, r3
 800403e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004042:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	3301      	adds	r3, #1
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	429a      	cmp	r2, r3
 8004050:	d3b7      	bcc.n	8003fc2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	e043      	b.n	80040e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800406a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800406e:	d118      	bne.n	80040a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004082:	461a      	mov	r2, r3
 8004084:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e013      	b.n	80040b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	461a      	mov	r2, r3
 800409a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e008      	b.n	80040b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ae:	461a      	mov	r2, r3
 80040b0:	2300      	movs	r3, #0
 80040b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c0:	461a      	mov	r2, r3
 80040c2:	2300      	movs	r3, #0
 80040c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	461a      	mov	r2, r3
 80040d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	3301      	adds	r3, #1
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d3b7      	bcc.n	8004058 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004108:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f043 0210 	orr.w	r2, r3, #16
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699a      	ldr	r2, [r3, #24]
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <USB_DevInit+0x2b8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f043 0208 	orr.w	r2, r3, #8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800413a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d107      	bne.n	8004150 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004148:	f043 0304 	orr.w	r3, r3, #4
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004150:	7dfb      	ldrb	r3, [r7, #23]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800415c:	b004      	add	sp, #16
 800415e:	4770      	bx	lr
 8004160:	803c3800 	.word	0x803c3800

08004164 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3301      	adds	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <USB_FlushTxFifo+0x64>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d901      	bls.n	8004184 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e01b      	b.n	80041bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	daf2      	bge.n	8004172 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	019b      	lsls	r3, r3, #6
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4a08      	ldr	r2, [pc, #32]	; (80041c8 <USB_FlushTxFifo+0x64>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e006      	b.n	80041bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d0f0      	beq.n	800419c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	00030d40 	.word	0x00030d40

080041cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3301      	adds	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4a11      	ldr	r2, [pc, #68]	; (8004228 <USB_FlushRxFifo+0x5c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e018      	b.n	800421c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	daf2      	bge.n	80041d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2210      	movs	r2, #16
 80041fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3301      	adds	r3, #1
 8004200:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a08      	ldr	r2, [pc, #32]	; (8004228 <USB_FlushRxFifo+0x5c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e006      	b.n	800421c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b10      	cmp	r3, #16
 8004218:	d0f0      	beq.n	80041fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	00030d40 	.word	0x00030d40

0800422c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004278:	f023 0303 	bic.w	r3, r3, #3
 800427c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428c:	f043 0302 	orr.w	r3, r3, #2
 8004290:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f003 0301 	and.w	r3, r3, #1
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a13      	ldr	r2, [pc, #76]	; (8004320 <USB_CoreReset+0x64>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e01b      	b.n	8004312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	daf2      	bge.n	80042c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f043 0201 	orr.w	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3301      	adds	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a09      	ldr	r2, [pc, #36]	; (8004320 <USB_CoreReset+0x64>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d901      	bls.n	8004304 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e006      	b.n	8004312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	d0f0      	beq.n	80042f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	00030d40 	.word	0x00030d40

08004324 <__errno>:
 8004324:	4b01      	ldr	r3, [pc, #4]	; (800432c <__errno+0x8>)
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	2000000c 	.word	0x2000000c

08004330 <__libc_init_array>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	4d0d      	ldr	r5, [pc, #52]	; (8004368 <__libc_init_array+0x38>)
 8004334:	4c0d      	ldr	r4, [pc, #52]	; (800436c <__libc_init_array+0x3c>)
 8004336:	1b64      	subs	r4, r4, r5
 8004338:	10a4      	asrs	r4, r4, #2
 800433a:	2600      	movs	r6, #0
 800433c:	42a6      	cmp	r6, r4
 800433e:	d109      	bne.n	8004354 <__libc_init_array+0x24>
 8004340:	4d0b      	ldr	r5, [pc, #44]	; (8004370 <__libc_init_array+0x40>)
 8004342:	4c0c      	ldr	r4, [pc, #48]	; (8004374 <__libc_init_array+0x44>)
 8004344:	f000 fc9e 	bl	8004c84 <_init>
 8004348:	1b64      	subs	r4, r4, r5
 800434a:	10a4      	asrs	r4, r4, #2
 800434c:	2600      	movs	r6, #0
 800434e:	42a6      	cmp	r6, r4
 8004350:	d105      	bne.n	800435e <__libc_init_array+0x2e>
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	f855 3b04 	ldr.w	r3, [r5], #4
 8004358:	4798      	blx	r3
 800435a:	3601      	adds	r6, #1
 800435c:	e7ee      	b.n	800433c <__libc_init_array+0xc>
 800435e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004362:	4798      	blx	r3
 8004364:	3601      	adds	r6, #1
 8004366:	e7f2      	b.n	800434e <__libc_init_array+0x1e>
 8004368:	08004d30 	.word	0x08004d30
 800436c:	08004d30 	.word	0x08004d30
 8004370:	08004d30 	.word	0x08004d30
 8004374:	08004d34 	.word	0x08004d34

08004378 <malloc>:
 8004378:	4b02      	ldr	r3, [pc, #8]	; (8004384 <malloc+0xc>)
 800437a:	4601      	mov	r1, r0
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	f000 b87f 	b.w	8004480 <_malloc_r>
 8004382:	bf00      	nop
 8004384:	2000000c 	.word	0x2000000c

08004388 <free>:
 8004388:	4b02      	ldr	r3, [pc, #8]	; (8004394 <free+0xc>)
 800438a:	4601      	mov	r1, r0
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	f000 b80b 	b.w	80043a8 <_free_r>
 8004392:	bf00      	nop
 8004394:	2000000c 	.word	0x2000000c

08004398 <memset>:
 8004398:	4402      	add	r2, r0
 800439a:	4603      	mov	r3, r0
 800439c:	4293      	cmp	r3, r2
 800439e:	d100      	bne.n	80043a2 <memset+0xa>
 80043a0:	4770      	bx	lr
 80043a2:	f803 1b01 	strb.w	r1, [r3], #1
 80043a6:	e7f9      	b.n	800439c <memset+0x4>

080043a8 <_free_r>:
 80043a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043aa:	2900      	cmp	r1, #0
 80043ac:	d044      	beq.n	8004438 <_free_r+0x90>
 80043ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b2:	9001      	str	r0, [sp, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f1a1 0404 	sub.w	r4, r1, #4
 80043ba:	bfb8      	it	lt
 80043bc:	18e4      	addlt	r4, r4, r3
 80043be:	f000 f903 	bl	80045c8 <__malloc_lock>
 80043c2:	4a1e      	ldr	r2, [pc, #120]	; (800443c <_free_r+0x94>)
 80043c4:	9801      	ldr	r0, [sp, #4]
 80043c6:	6813      	ldr	r3, [r2, #0]
 80043c8:	b933      	cbnz	r3, 80043d8 <_free_r+0x30>
 80043ca:	6063      	str	r3, [r4, #4]
 80043cc:	6014      	str	r4, [r2, #0]
 80043ce:	b003      	add	sp, #12
 80043d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043d4:	f000 b8fe 	b.w	80045d4 <__malloc_unlock>
 80043d8:	42a3      	cmp	r3, r4
 80043da:	d908      	bls.n	80043ee <_free_r+0x46>
 80043dc:	6825      	ldr	r5, [r4, #0]
 80043de:	1961      	adds	r1, r4, r5
 80043e0:	428b      	cmp	r3, r1
 80043e2:	bf01      	itttt	eq
 80043e4:	6819      	ldreq	r1, [r3, #0]
 80043e6:	685b      	ldreq	r3, [r3, #4]
 80043e8:	1949      	addeq	r1, r1, r5
 80043ea:	6021      	streq	r1, [r4, #0]
 80043ec:	e7ed      	b.n	80043ca <_free_r+0x22>
 80043ee:	461a      	mov	r2, r3
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	b10b      	cbz	r3, 80043f8 <_free_r+0x50>
 80043f4:	42a3      	cmp	r3, r4
 80043f6:	d9fa      	bls.n	80043ee <_free_r+0x46>
 80043f8:	6811      	ldr	r1, [r2, #0]
 80043fa:	1855      	adds	r5, r2, r1
 80043fc:	42a5      	cmp	r5, r4
 80043fe:	d10b      	bne.n	8004418 <_free_r+0x70>
 8004400:	6824      	ldr	r4, [r4, #0]
 8004402:	4421      	add	r1, r4
 8004404:	1854      	adds	r4, r2, r1
 8004406:	42a3      	cmp	r3, r4
 8004408:	6011      	str	r1, [r2, #0]
 800440a:	d1e0      	bne.n	80043ce <_free_r+0x26>
 800440c:	681c      	ldr	r4, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	6053      	str	r3, [r2, #4]
 8004412:	4421      	add	r1, r4
 8004414:	6011      	str	r1, [r2, #0]
 8004416:	e7da      	b.n	80043ce <_free_r+0x26>
 8004418:	d902      	bls.n	8004420 <_free_r+0x78>
 800441a:	230c      	movs	r3, #12
 800441c:	6003      	str	r3, [r0, #0]
 800441e:	e7d6      	b.n	80043ce <_free_r+0x26>
 8004420:	6825      	ldr	r5, [r4, #0]
 8004422:	1961      	adds	r1, r4, r5
 8004424:	428b      	cmp	r3, r1
 8004426:	bf04      	itt	eq
 8004428:	6819      	ldreq	r1, [r3, #0]
 800442a:	685b      	ldreq	r3, [r3, #4]
 800442c:	6063      	str	r3, [r4, #4]
 800442e:	bf04      	itt	eq
 8004430:	1949      	addeq	r1, r1, r5
 8004432:	6021      	streq	r1, [r4, #0]
 8004434:	6054      	str	r4, [r2, #4]
 8004436:	e7ca      	b.n	80043ce <_free_r+0x26>
 8004438:	b003      	add	sp, #12
 800443a:	bd30      	pop	{r4, r5, pc}
 800443c:	20000730 	.word	0x20000730

08004440 <sbrk_aligned>:
 8004440:	b570      	push	{r4, r5, r6, lr}
 8004442:	4e0e      	ldr	r6, [pc, #56]	; (800447c <sbrk_aligned+0x3c>)
 8004444:	460c      	mov	r4, r1
 8004446:	6831      	ldr	r1, [r6, #0]
 8004448:	4605      	mov	r5, r0
 800444a:	b911      	cbnz	r1, 8004452 <sbrk_aligned+0x12>
 800444c:	f000 f88c 	bl	8004568 <_sbrk_r>
 8004450:	6030      	str	r0, [r6, #0]
 8004452:	4621      	mov	r1, r4
 8004454:	4628      	mov	r0, r5
 8004456:	f000 f887 	bl	8004568 <_sbrk_r>
 800445a:	1c43      	adds	r3, r0, #1
 800445c:	d00a      	beq.n	8004474 <sbrk_aligned+0x34>
 800445e:	1cc4      	adds	r4, r0, #3
 8004460:	f024 0403 	bic.w	r4, r4, #3
 8004464:	42a0      	cmp	r0, r4
 8004466:	d007      	beq.n	8004478 <sbrk_aligned+0x38>
 8004468:	1a21      	subs	r1, r4, r0
 800446a:	4628      	mov	r0, r5
 800446c:	f000 f87c 	bl	8004568 <_sbrk_r>
 8004470:	3001      	adds	r0, #1
 8004472:	d101      	bne.n	8004478 <sbrk_aligned+0x38>
 8004474:	f04f 34ff 	mov.w	r4, #4294967295
 8004478:	4620      	mov	r0, r4
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	20000734 	.word	0x20000734

08004480 <_malloc_r>:
 8004480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004484:	1ccd      	adds	r5, r1, #3
 8004486:	f025 0503 	bic.w	r5, r5, #3
 800448a:	3508      	adds	r5, #8
 800448c:	2d0c      	cmp	r5, #12
 800448e:	bf38      	it	cc
 8004490:	250c      	movcc	r5, #12
 8004492:	2d00      	cmp	r5, #0
 8004494:	4607      	mov	r7, r0
 8004496:	db01      	blt.n	800449c <_malloc_r+0x1c>
 8004498:	42a9      	cmp	r1, r5
 800449a:	d905      	bls.n	80044a8 <_malloc_r+0x28>
 800449c:	230c      	movs	r3, #12
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	2600      	movs	r6, #0
 80044a2:	4630      	mov	r0, r6
 80044a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a8:	4e2e      	ldr	r6, [pc, #184]	; (8004564 <_malloc_r+0xe4>)
 80044aa:	f000 f88d 	bl	80045c8 <__malloc_lock>
 80044ae:	6833      	ldr	r3, [r6, #0]
 80044b0:	461c      	mov	r4, r3
 80044b2:	bb34      	cbnz	r4, 8004502 <_malloc_r+0x82>
 80044b4:	4629      	mov	r1, r5
 80044b6:	4638      	mov	r0, r7
 80044b8:	f7ff ffc2 	bl	8004440 <sbrk_aligned>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	4604      	mov	r4, r0
 80044c0:	d14d      	bne.n	800455e <_malloc_r+0xde>
 80044c2:	6834      	ldr	r4, [r6, #0]
 80044c4:	4626      	mov	r6, r4
 80044c6:	2e00      	cmp	r6, #0
 80044c8:	d140      	bne.n	800454c <_malloc_r+0xcc>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	4631      	mov	r1, r6
 80044ce:	4638      	mov	r0, r7
 80044d0:	eb04 0803 	add.w	r8, r4, r3
 80044d4:	f000 f848 	bl	8004568 <_sbrk_r>
 80044d8:	4580      	cmp	r8, r0
 80044da:	d13a      	bne.n	8004552 <_malloc_r+0xd2>
 80044dc:	6821      	ldr	r1, [r4, #0]
 80044de:	3503      	adds	r5, #3
 80044e0:	1a6d      	subs	r5, r5, r1
 80044e2:	f025 0503 	bic.w	r5, r5, #3
 80044e6:	3508      	adds	r5, #8
 80044e8:	2d0c      	cmp	r5, #12
 80044ea:	bf38      	it	cc
 80044ec:	250c      	movcc	r5, #12
 80044ee:	4629      	mov	r1, r5
 80044f0:	4638      	mov	r0, r7
 80044f2:	f7ff ffa5 	bl	8004440 <sbrk_aligned>
 80044f6:	3001      	adds	r0, #1
 80044f8:	d02b      	beq.n	8004552 <_malloc_r+0xd2>
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	442b      	add	r3, r5
 80044fe:	6023      	str	r3, [r4, #0]
 8004500:	e00e      	b.n	8004520 <_malloc_r+0xa0>
 8004502:	6822      	ldr	r2, [r4, #0]
 8004504:	1b52      	subs	r2, r2, r5
 8004506:	d41e      	bmi.n	8004546 <_malloc_r+0xc6>
 8004508:	2a0b      	cmp	r2, #11
 800450a:	d916      	bls.n	800453a <_malloc_r+0xba>
 800450c:	1961      	adds	r1, r4, r5
 800450e:	42a3      	cmp	r3, r4
 8004510:	6025      	str	r5, [r4, #0]
 8004512:	bf18      	it	ne
 8004514:	6059      	strne	r1, [r3, #4]
 8004516:	6863      	ldr	r3, [r4, #4]
 8004518:	bf08      	it	eq
 800451a:	6031      	streq	r1, [r6, #0]
 800451c:	5162      	str	r2, [r4, r5]
 800451e:	604b      	str	r3, [r1, #4]
 8004520:	4638      	mov	r0, r7
 8004522:	f104 060b 	add.w	r6, r4, #11
 8004526:	f000 f855 	bl	80045d4 <__malloc_unlock>
 800452a:	f026 0607 	bic.w	r6, r6, #7
 800452e:	1d23      	adds	r3, r4, #4
 8004530:	1af2      	subs	r2, r6, r3
 8004532:	d0b6      	beq.n	80044a2 <_malloc_r+0x22>
 8004534:	1b9b      	subs	r3, r3, r6
 8004536:	50a3      	str	r3, [r4, r2]
 8004538:	e7b3      	b.n	80044a2 <_malloc_r+0x22>
 800453a:	6862      	ldr	r2, [r4, #4]
 800453c:	42a3      	cmp	r3, r4
 800453e:	bf0c      	ite	eq
 8004540:	6032      	streq	r2, [r6, #0]
 8004542:	605a      	strne	r2, [r3, #4]
 8004544:	e7ec      	b.n	8004520 <_malloc_r+0xa0>
 8004546:	4623      	mov	r3, r4
 8004548:	6864      	ldr	r4, [r4, #4]
 800454a:	e7b2      	b.n	80044b2 <_malloc_r+0x32>
 800454c:	4634      	mov	r4, r6
 800454e:	6876      	ldr	r6, [r6, #4]
 8004550:	e7b9      	b.n	80044c6 <_malloc_r+0x46>
 8004552:	230c      	movs	r3, #12
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4638      	mov	r0, r7
 8004558:	f000 f83c 	bl	80045d4 <__malloc_unlock>
 800455c:	e7a1      	b.n	80044a2 <_malloc_r+0x22>
 800455e:	6025      	str	r5, [r4, #0]
 8004560:	e7de      	b.n	8004520 <_malloc_r+0xa0>
 8004562:	bf00      	nop
 8004564:	20000730 	.word	0x20000730

08004568 <_sbrk_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4d06      	ldr	r5, [pc, #24]	; (8004584 <_sbrk_r+0x1c>)
 800456c:	2300      	movs	r3, #0
 800456e:	4604      	mov	r4, r0
 8004570:	4608      	mov	r0, r1
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	f7fc fd34 	bl	8000fe0 <_sbrk>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_sbrk_r+0x1a>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b103      	cbz	r3, 8004582 <_sbrk_r+0x1a>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	20000738 	.word	0x20000738

08004588 <siprintf>:
 8004588:	b40e      	push	{r1, r2, r3}
 800458a:	b500      	push	{lr}
 800458c:	b09c      	sub	sp, #112	; 0x70
 800458e:	ab1d      	add	r3, sp, #116	; 0x74
 8004590:	9002      	str	r0, [sp, #8]
 8004592:	9006      	str	r0, [sp, #24]
 8004594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004598:	4809      	ldr	r0, [pc, #36]	; (80045c0 <siprintf+0x38>)
 800459a:	9107      	str	r1, [sp, #28]
 800459c:	9104      	str	r1, [sp, #16]
 800459e:	4909      	ldr	r1, [pc, #36]	; (80045c4 <siprintf+0x3c>)
 80045a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a4:	9105      	str	r1, [sp, #20]
 80045a6:	6800      	ldr	r0, [r0, #0]
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	a902      	add	r1, sp, #8
 80045ac:	f000 f874 	bl	8004698 <_svfiprintf_r>
 80045b0:	9b02      	ldr	r3, [sp, #8]
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	b01c      	add	sp, #112	; 0x70
 80045b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045bc:	b003      	add	sp, #12
 80045be:	4770      	bx	lr
 80045c0:	2000000c 	.word	0x2000000c
 80045c4:	ffff0208 	.word	0xffff0208

080045c8 <__malloc_lock>:
 80045c8:	4801      	ldr	r0, [pc, #4]	; (80045d0 <__malloc_lock+0x8>)
 80045ca:	f000 baf9 	b.w	8004bc0 <__retarget_lock_acquire_recursive>
 80045ce:	bf00      	nop
 80045d0:	2000073c 	.word	0x2000073c

080045d4 <__malloc_unlock>:
 80045d4:	4801      	ldr	r0, [pc, #4]	; (80045dc <__malloc_unlock+0x8>)
 80045d6:	f000 baf4 	b.w	8004bc2 <__retarget_lock_release_recursive>
 80045da:	bf00      	nop
 80045dc:	2000073c 	.word	0x2000073c

080045e0 <__ssputs_r>:
 80045e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e4:	688e      	ldr	r6, [r1, #8]
 80045e6:	429e      	cmp	r6, r3
 80045e8:	4682      	mov	sl, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	4690      	mov	r8, r2
 80045ee:	461f      	mov	r7, r3
 80045f0:	d838      	bhi.n	8004664 <__ssputs_r+0x84>
 80045f2:	898a      	ldrh	r2, [r1, #12]
 80045f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045f8:	d032      	beq.n	8004660 <__ssputs_r+0x80>
 80045fa:	6825      	ldr	r5, [r4, #0]
 80045fc:	6909      	ldr	r1, [r1, #16]
 80045fe:	eba5 0901 	sub.w	r9, r5, r1
 8004602:	6965      	ldr	r5, [r4, #20]
 8004604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004608:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800460c:	3301      	adds	r3, #1
 800460e:	444b      	add	r3, r9
 8004610:	106d      	asrs	r5, r5, #1
 8004612:	429d      	cmp	r5, r3
 8004614:	bf38      	it	cc
 8004616:	461d      	movcc	r5, r3
 8004618:	0553      	lsls	r3, r2, #21
 800461a:	d531      	bpl.n	8004680 <__ssputs_r+0xa0>
 800461c:	4629      	mov	r1, r5
 800461e:	f7ff ff2f 	bl	8004480 <_malloc_r>
 8004622:	4606      	mov	r6, r0
 8004624:	b950      	cbnz	r0, 800463c <__ssputs_r+0x5c>
 8004626:	230c      	movs	r3, #12
 8004628:	f8ca 3000 	str.w	r3, [sl]
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004632:	81a3      	strh	r3, [r4, #12]
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463c:	6921      	ldr	r1, [r4, #16]
 800463e:	464a      	mov	r2, r9
 8004640:	f000 fac0 	bl	8004bc4 <memcpy>
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800464a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464e:	81a3      	strh	r3, [r4, #12]
 8004650:	6126      	str	r6, [r4, #16]
 8004652:	6165      	str	r5, [r4, #20]
 8004654:	444e      	add	r6, r9
 8004656:	eba5 0509 	sub.w	r5, r5, r9
 800465a:	6026      	str	r6, [r4, #0]
 800465c:	60a5      	str	r5, [r4, #8]
 800465e:	463e      	mov	r6, r7
 8004660:	42be      	cmp	r6, r7
 8004662:	d900      	bls.n	8004666 <__ssputs_r+0x86>
 8004664:	463e      	mov	r6, r7
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	4632      	mov	r2, r6
 800466a:	4641      	mov	r1, r8
 800466c:	f000 fab8 	bl	8004be0 <memmove>
 8004670:	68a3      	ldr	r3, [r4, #8]
 8004672:	1b9b      	subs	r3, r3, r6
 8004674:	60a3      	str	r3, [r4, #8]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	4433      	add	r3, r6
 800467a:	6023      	str	r3, [r4, #0]
 800467c:	2000      	movs	r0, #0
 800467e:	e7db      	b.n	8004638 <__ssputs_r+0x58>
 8004680:	462a      	mov	r2, r5
 8004682:	f000 fac7 	bl	8004c14 <_realloc_r>
 8004686:	4606      	mov	r6, r0
 8004688:	2800      	cmp	r0, #0
 800468a:	d1e1      	bne.n	8004650 <__ssputs_r+0x70>
 800468c:	6921      	ldr	r1, [r4, #16]
 800468e:	4650      	mov	r0, sl
 8004690:	f7ff fe8a 	bl	80043a8 <_free_r>
 8004694:	e7c7      	b.n	8004626 <__ssputs_r+0x46>
	...

08004698 <_svfiprintf_r>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	4698      	mov	r8, r3
 800469e:	898b      	ldrh	r3, [r1, #12]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	b09d      	sub	sp, #116	; 0x74
 80046a4:	4607      	mov	r7, r0
 80046a6:	460d      	mov	r5, r1
 80046a8:	4614      	mov	r4, r2
 80046aa:	d50e      	bpl.n	80046ca <_svfiprintf_r+0x32>
 80046ac:	690b      	ldr	r3, [r1, #16]
 80046ae:	b963      	cbnz	r3, 80046ca <_svfiprintf_r+0x32>
 80046b0:	2140      	movs	r1, #64	; 0x40
 80046b2:	f7ff fee5 	bl	8004480 <_malloc_r>
 80046b6:	6028      	str	r0, [r5, #0]
 80046b8:	6128      	str	r0, [r5, #16]
 80046ba:	b920      	cbnz	r0, 80046c6 <_svfiprintf_r+0x2e>
 80046bc:	230c      	movs	r3, #12
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	e0d1      	b.n	800486a <_svfiprintf_r+0x1d2>
 80046c6:	2340      	movs	r3, #64	; 0x40
 80046c8:	616b      	str	r3, [r5, #20]
 80046ca:	2300      	movs	r3, #0
 80046cc:	9309      	str	r3, [sp, #36]	; 0x24
 80046ce:	2320      	movs	r3, #32
 80046d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80046d8:	2330      	movs	r3, #48	; 0x30
 80046da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004884 <_svfiprintf_r+0x1ec>
 80046de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046e2:	f04f 0901 	mov.w	r9, #1
 80046e6:	4623      	mov	r3, r4
 80046e8:	469a      	mov	sl, r3
 80046ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ee:	b10a      	cbz	r2, 80046f4 <_svfiprintf_r+0x5c>
 80046f0:	2a25      	cmp	r2, #37	; 0x25
 80046f2:	d1f9      	bne.n	80046e8 <_svfiprintf_r+0x50>
 80046f4:	ebba 0b04 	subs.w	fp, sl, r4
 80046f8:	d00b      	beq.n	8004712 <_svfiprintf_r+0x7a>
 80046fa:	465b      	mov	r3, fp
 80046fc:	4622      	mov	r2, r4
 80046fe:	4629      	mov	r1, r5
 8004700:	4638      	mov	r0, r7
 8004702:	f7ff ff6d 	bl	80045e0 <__ssputs_r>
 8004706:	3001      	adds	r0, #1
 8004708:	f000 80aa 	beq.w	8004860 <_svfiprintf_r+0x1c8>
 800470c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800470e:	445a      	add	r2, fp
 8004710:	9209      	str	r2, [sp, #36]	; 0x24
 8004712:	f89a 3000 	ldrb.w	r3, [sl]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80a2 	beq.w	8004860 <_svfiprintf_r+0x1c8>
 800471c:	2300      	movs	r3, #0
 800471e:	f04f 32ff 	mov.w	r2, #4294967295
 8004722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004726:	f10a 0a01 	add.w	sl, sl, #1
 800472a:	9304      	str	r3, [sp, #16]
 800472c:	9307      	str	r3, [sp, #28]
 800472e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004732:	931a      	str	r3, [sp, #104]	; 0x68
 8004734:	4654      	mov	r4, sl
 8004736:	2205      	movs	r2, #5
 8004738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800473c:	4851      	ldr	r0, [pc, #324]	; (8004884 <_svfiprintf_r+0x1ec>)
 800473e:	f7fb fd6f 	bl	8000220 <memchr>
 8004742:	9a04      	ldr	r2, [sp, #16]
 8004744:	b9d8      	cbnz	r0, 800477e <_svfiprintf_r+0xe6>
 8004746:	06d0      	lsls	r0, r2, #27
 8004748:	bf44      	itt	mi
 800474a:	2320      	movmi	r3, #32
 800474c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004750:	0711      	lsls	r1, r2, #28
 8004752:	bf44      	itt	mi
 8004754:	232b      	movmi	r3, #43	; 0x2b
 8004756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800475a:	f89a 3000 	ldrb.w	r3, [sl]
 800475e:	2b2a      	cmp	r3, #42	; 0x2a
 8004760:	d015      	beq.n	800478e <_svfiprintf_r+0xf6>
 8004762:	9a07      	ldr	r2, [sp, #28]
 8004764:	4654      	mov	r4, sl
 8004766:	2000      	movs	r0, #0
 8004768:	f04f 0c0a 	mov.w	ip, #10
 800476c:	4621      	mov	r1, r4
 800476e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004772:	3b30      	subs	r3, #48	; 0x30
 8004774:	2b09      	cmp	r3, #9
 8004776:	d94e      	bls.n	8004816 <_svfiprintf_r+0x17e>
 8004778:	b1b0      	cbz	r0, 80047a8 <_svfiprintf_r+0x110>
 800477a:	9207      	str	r2, [sp, #28]
 800477c:	e014      	b.n	80047a8 <_svfiprintf_r+0x110>
 800477e:	eba0 0308 	sub.w	r3, r0, r8
 8004782:	fa09 f303 	lsl.w	r3, r9, r3
 8004786:	4313      	orrs	r3, r2
 8004788:	9304      	str	r3, [sp, #16]
 800478a:	46a2      	mov	sl, r4
 800478c:	e7d2      	b.n	8004734 <_svfiprintf_r+0x9c>
 800478e:	9b03      	ldr	r3, [sp, #12]
 8004790:	1d19      	adds	r1, r3, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	9103      	str	r1, [sp, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	bfbb      	ittet	lt
 800479a:	425b      	neglt	r3, r3
 800479c:	f042 0202 	orrlt.w	r2, r2, #2
 80047a0:	9307      	strge	r3, [sp, #28]
 80047a2:	9307      	strlt	r3, [sp, #28]
 80047a4:	bfb8      	it	lt
 80047a6:	9204      	strlt	r2, [sp, #16]
 80047a8:	7823      	ldrb	r3, [r4, #0]
 80047aa:	2b2e      	cmp	r3, #46	; 0x2e
 80047ac:	d10c      	bne.n	80047c8 <_svfiprintf_r+0x130>
 80047ae:	7863      	ldrb	r3, [r4, #1]
 80047b0:	2b2a      	cmp	r3, #42	; 0x2a
 80047b2:	d135      	bne.n	8004820 <_svfiprintf_r+0x188>
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	1d1a      	adds	r2, r3, #4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	9203      	str	r2, [sp, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bfb8      	it	lt
 80047c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80047c4:	3402      	adds	r4, #2
 80047c6:	9305      	str	r3, [sp, #20]
 80047c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004894 <_svfiprintf_r+0x1fc>
 80047cc:	7821      	ldrb	r1, [r4, #0]
 80047ce:	2203      	movs	r2, #3
 80047d0:	4650      	mov	r0, sl
 80047d2:	f7fb fd25 	bl	8000220 <memchr>
 80047d6:	b140      	cbz	r0, 80047ea <_svfiprintf_r+0x152>
 80047d8:	2340      	movs	r3, #64	; 0x40
 80047da:	eba0 000a 	sub.w	r0, r0, sl
 80047de:	fa03 f000 	lsl.w	r0, r3, r0
 80047e2:	9b04      	ldr	r3, [sp, #16]
 80047e4:	4303      	orrs	r3, r0
 80047e6:	3401      	adds	r4, #1
 80047e8:	9304      	str	r3, [sp, #16]
 80047ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ee:	4826      	ldr	r0, [pc, #152]	; (8004888 <_svfiprintf_r+0x1f0>)
 80047f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047f4:	2206      	movs	r2, #6
 80047f6:	f7fb fd13 	bl	8000220 <memchr>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d038      	beq.n	8004870 <_svfiprintf_r+0x1d8>
 80047fe:	4b23      	ldr	r3, [pc, #140]	; (800488c <_svfiprintf_r+0x1f4>)
 8004800:	bb1b      	cbnz	r3, 800484a <_svfiprintf_r+0x1b2>
 8004802:	9b03      	ldr	r3, [sp, #12]
 8004804:	3307      	adds	r3, #7
 8004806:	f023 0307 	bic.w	r3, r3, #7
 800480a:	3308      	adds	r3, #8
 800480c:	9303      	str	r3, [sp, #12]
 800480e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004810:	4433      	add	r3, r6
 8004812:	9309      	str	r3, [sp, #36]	; 0x24
 8004814:	e767      	b.n	80046e6 <_svfiprintf_r+0x4e>
 8004816:	fb0c 3202 	mla	r2, ip, r2, r3
 800481a:	460c      	mov	r4, r1
 800481c:	2001      	movs	r0, #1
 800481e:	e7a5      	b.n	800476c <_svfiprintf_r+0xd4>
 8004820:	2300      	movs	r3, #0
 8004822:	3401      	adds	r4, #1
 8004824:	9305      	str	r3, [sp, #20]
 8004826:	4619      	mov	r1, r3
 8004828:	f04f 0c0a 	mov.w	ip, #10
 800482c:	4620      	mov	r0, r4
 800482e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004832:	3a30      	subs	r2, #48	; 0x30
 8004834:	2a09      	cmp	r2, #9
 8004836:	d903      	bls.n	8004840 <_svfiprintf_r+0x1a8>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0c5      	beq.n	80047c8 <_svfiprintf_r+0x130>
 800483c:	9105      	str	r1, [sp, #20]
 800483e:	e7c3      	b.n	80047c8 <_svfiprintf_r+0x130>
 8004840:	fb0c 2101 	mla	r1, ip, r1, r2
 8004844:	4604      	mov	r4, r0
 8004846:	2301      	movs	r3, #1
 8004848:	e7f0      	b.n	800482c <_svfiprintf_r+0x194>
 800484a:	ab03      	add	r3, sp, #12
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	462a      	mov	r2, r5
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <_svfiprintf_r+0x1f8>)
 8004852:	a904      	add	r1, sp, #16
 8004854:	4638      	mov	r0, r7
 8004856:	f3af 8000 	nop.w
 800485a:	1c42      	adds	r2, r0, #1
 800485c:	4606      	mov	r6, r0
 800485e:	d1d6      	bne.n	800480e <_svfiprintf_r+0x176>
 8004860:	89ab      	ldrh	r3, [r5, #12]
 8004862:	065b      	lsls	r3, r3, #25
 8004864:	f53f af2c 	bmi.w	80046c0 <_svfiprintf_r+0x28>
 8004868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800486a:	b01d      	add	sp, #116	; 0x74
 800486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004870:	ab03      	add	r3, sp, #12
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	462a      	mov	r2, r5
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <_svfiprintf_r+0x1f8>)
 8004878:	a904      	add	r1, sp, #16
 800487a:	4638      	mov	r0, r7
 800487c:	f000 f87a 	bl	8004974 <_printf_i>
 8004880:	e7eb      	b.n	800485a <_svfiprintf_r+0x1c2>
 8004882:	bf00      	nop
 8004884:	08004cf4 	.word	0x08004cf4
 8004888:	08004cfe 	.word	0x08004cfe
 800488c:	00000000 	.word	0x00000000
 8004890:	080045e1 	.word	0x080045e1
 8004894:	08004cfa 	.word	0x08004cfa

08004898 <_printf_common>:
 8004898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800489c:	4616      	mov	r6, r2
 800489e:	4699      	mov	r9, r3
 80048a0:	688a      	ldr	r2, [r1, #8]
 80048a2:	690b      	ldr	r3, [r1, #16]
 80048a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a8:	4293      	cmp	r3, r2
 80048aa:	bfb8      	it	lt
 80048ac:	4613      	movlt	r3, r2
 80048ae:	6033      	str	r3, [r6, #0]
 80048b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048b4:	4607      	mov	r7, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	b10a      	cbz	r2, 80048be <_printf_common+0x26>
 80048ba:	3301      	adds	r3, #1
 80048bc:	6033      	str	r3, [r6, #0]
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	0699      	lsls	r1, r3, #26
 80048c2:	bf42      	ittt	mi
 80048c4:	6833      	ldrmi	r3, [r6, #0]
 80048c6:	3302      	addmi	r3, #2
 80048c8:	6033      	strmi	r3, [r6, #0]
 80048ca:	6825      	ldr	r5, [r4, #0]
 80048cc:	f015 0506 	ands.w	r5, r5, #6
 80048d0:	d106      	bne.n	80048e0 <_printf_common+0x48>
 80048d2:	f104 0a19 	add.w	sl, r4, #25
 80048d6:	68e3      	ldr	r3, [r4, #12]
 80048d8:	6832      	ldr	r2, [r6, #0]
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	42ab      	cmp	r3, r5
 80048de:	dc26      	bgt.n	800492e <_printf_common+0x96>
 80048e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048e4:	1e13      	subs	r3, r2, #0
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	bf18      	it	ne
 80048ea:	2301      	movne	r3, #1
 80048ec:	0692      	lsls	r2, r2, #26
 80048ee:	d42b      	bmi.n	8004948 <_printf_common+0xb0>
 80048f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048f4:	4649      	mov	r1, r9
 80048f6:	4638      	mov	r0, r7
 80048f8:	47c0      	blx	r8
 80048fa:	3001      	adds	r0, #1
 80048fc:	d01e      	beq.n	800493c <_printf_common+0xa4>
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	68e5      	ldr	r5, [r4, #12]
 8004902:	6832      	ldr	r2, [r6, #0]
 8004904:	f003 0306 	and.w	r3, r3, #6
 8004908:	2b04      	cmp	r3, #4
 800490a:	bf08      	it	eq
 800490c:	1aad      	subeq	r5, r5, r2
 800490e:	68a3      	ldr	r3, [r4, #8]
 8004910:	6922      	ldr	r2, [r4, #16]
 8004912:	bf0c      	ite	eq
 8004914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004918:	2500      	movne	r5, #0
 800491a:	4293      	cmp	r3, r2
 800491c:	bfc4      	itt	gt
 800491e:	1a9b      	subgt	r3, r3, r2
 8004920:	18ed      	addgt	r5, r5, r3
 8004922:	2600      	movs	r6, #0
 8004924:	341a      	adds	r4, #26
 8004926:	42b5      	cmp	r5, r6
 8004928:	d11a      	bne.n	8004960 <_printf_common+0xc8>
 800492a:	2000      	movs	r0, #0
 800492c:	e008      	b.n	8004940 <_printf_common+0xa8>
 800492e:	2301      	movs	r3, #1
 8004930:	4652      	mov	r2, sl
 8004932:	4649      	mov	r1, r9
 8004934:	4638      	mov	r0, r7
 8004936:	47c0      	blx	r8
 8004938:	3001      	adds	r0, #1
 800493a:	d103      	bne.n	8004944 <_printf_common+0xac>
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004944:	3501      	adds	r5, #1
 8004946:	e7c6      	b.n	80048d6 <_printf_common+0x3e>
 8004948:	18e1      	adds	r1, r4, r3
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	2030      	movs	r0, #48	; 0x30
 800494e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004952:	4422      	add	r2, r4
 8004954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800495c:	3302      	adds	r3, #2
 800495e:	e7c7      	b.n	80048f0 <_printf_common+0x58>
 8004960:	2301      	movs	r3, #1
 8004962:	4622      	mov	r2, r4
 8004964:	4649      	mov	r1, r9
 8004966:	4638      	mov	r0, r7
 8004968:	47c0      	blx	r8
 800496a:	3001      	adds	r0, #1
 800496c:	d0e6      	beq.n	800493c <_printf_common+0xa4>
 800496e:	3601      	adds	r6, #1
 8004970:	e7d9      	b.n	8004926 <_printf_common+0x8e>
	...

08004974 <_printf_i>:
 8004974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	7e0f      	ldrb	r7, [r1, #24]
 800497a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800497c:	2f78      	cmp	r7, #120	; 0x78
 800497e:	4691      	mov	r9, r2
 8004980:	4680      	mov	r8, r0
 8004982:	460c      	mov	r4, r1
 8004984:	469a      	mov	sl, r3
 8004986:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800498a:	d807      	bhi.n	800499c <_printf_i+0x28>
 800498c:	2f62      	cmp	r7, #98	; 0x62
 800498e:	d80a      	bhi.n	80049a6 <_printf_i+0x32>
 8004990:	2f00      	cmp	r7, #0
 8004992:	f000 80d8 	beq.w	8004b46 <_printf_i+0x1d2>
 8004996:	2f58      	cmp	r7, #88	; 0x58
 8004998:	f000 80a3 	beq.w	8004ae2 <_printf_i+0x16e>
 800499c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049a4:	e03a      	b.n	8004a1c <_printf_i+0xa8>
 80049a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049aa:	2b15      	cmp	r3, #21
 80049ac:	d8f6      	bhi.n	800499c <_printf_i+0x28>
 80049ae:	a101      	add	r1, pc, #4	; (adr r1, 80049b4 <_printf_i+0x40>)
 80049b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049b4:	08004a0d 	.word	0x08004a0d
 80049b8:	08004a21 	.word	0x08004a21
 80049bc:	0800499d 	.word	0x0800499d
 80049c0:	0800499d 	.word	0x0800499d
 80049c4:	0800499d 	.word	0x0800499d
 80049c8:	0800499d 	.word	0x0800499d
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	0800499d 	.word	0x0800499d
 80049d4:	0800499d 	.word	0x0800499d
 80049d8:	0800499d 	.word	0x0800499d
 80049dc:	0800499d 	.word	0x0800499d
 80049e0:	08004b2d 	.word	0x08004b2d
 80049e4:	08004a51 	.word	0x08004a51
 80049e8:	08004b0f 	.word	0x08004b0f
 80049ec:	0800499d 	.word	0x0800499d
 80049f0:	0800499d 	.word	0x0800499d
 80049f4:	08004b4f 	.word	0x08004b4f
 80049f8:	0800499d 	.word	0x0800499d
 80049fc:	08004a51 	.word	0x08004a51
 8004a00:	0800499d 	.word	0x0800499d
 8004a04:	0800499d 	.word	0x0800499d
 8004a08:	08004b17 	.word	0x08004b17
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	1d1a      	adds	r2, r3, #4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	602a      	str	r2, [r5, #0]
 8004a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0a3      	b.n	8004b68 <_printf_i+0x1f4>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	6829      	ldr	r1, [r5, #0]
 8004a24:	0606      	lsls	r6, r0, #24
 8004a26:	f101 0304 	add.w	r3, r1, #4
 8004a2a:	d50a      	bpl.n	8004a42 <_printf_i+0xce>
 8004a2c:	680e      	ldr	r6, [r1, #0]
 8004a2e:	602b      	str	r3, [r5, #0]
 8004a30:	2e00      	cmp	r6, #0
 8004a32:	da03      	bge.n	8004a3c <_printf_i+0xc8>
 8004a34:	232d      	movs	r3, #45	; 0x2d
 8004a36:	4276      	negs	r6, r6
 8004a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a3c:	485e      	ldr	r0, [pc, #376]	; (8004bb8 <_printf_i+0x244>)
 8004a3e:	230a      	movs	r3, #10
 8004a40:	e019      	b.n	8004a76 <_printf_i+0x102>
 8004a42:	680e      	ldr	r6, [r1, #0]
 8004a44:	602b      	str	r3, [r5, #0]
 8004a46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a4a:	bf18      	it	ne
 8004a4c:	b236      	sxthne	r6, r6
 8004a4e:	e7ef      	b.n	8004a30 <_printf_i+0xbc>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	6820      	ldr	r0, [r4, #0]
 8004a54:	1d19      	adds	r1, r3, #4
 8004a56:	6029      	str	r1, [r5, #0]
 8004a58:	0601      	lsls	r1, r0, #24
 8004a5a:	d501      	bpl.n	8004a60 <_printf_i+0xec>
 8004a5c:	681e      	ldr	r6, [r3, #0]
 8004a5e:	e002      	b.n	8004a66 <_printf_i+0xf2>
 8004a60:	0646      	lsls	r6, r0, #25
 8004a62:	d5fb      	bpl.n	8004a5c <_printf_i+0xe8>
 8004a64:	881e      	ldrh	r6, [r3, #0]
 8004a66:	4854      	ldr	r0, [pc, #336]	; (8004bb8 <_printf_i+0x244>)
 8004a68:	2f6f      	cmp	r7, #111	; 0x6f
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2308      	moveq	r3, #8
 8004a6e:	230a      	movne	r3, #10
 8004a70:	2100      	movs	r1, #0
 8004a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a76:	6865      	ldr	r5, [r4, #4]
 8004a78:	60a5      	str	r5, [r4, #8]
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	bfa2      	ittt	ge
 8004a7e:	6821      	ldrge	r1, [r4, #0]
 8004a80:	f021 0104 	bicge.w	r1, r1, #4
 8004a84:	6021      	strge	r1, [r4, #0]
 8004a86:	b90e      	cbnz	r6, 8004a8c <_printf_i+0x118>
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	d04d      	beq.n	8004b28 <_printf_i+0x1b4>
 8004a8c:	4615      	mov	r5, r2
 8004a8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a92:	fb03 6711 	mls	r7, r3, r1, r6
 8004a96:	5dc7      	ldrb	r7, [r0, r7]
 8004a98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a9c:	4637      	mov	r7, r6
 8004a9e:	42bb      	cmp	r3, r7
 8004aa0:	460e      	mov	r6, r1
 8004aa2:	d9f4      	bls.n	8004a8e <_printf_i+0x11a>
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d10b      	bne.n	8004ac0 <_printf_i+0x14c>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	07de      	lsls	r6, r3, #31
 8004aac:	d508      	bpl.n	8004ac0 <_printf_i+0x14c>
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	6861      	ldr	r1, [r4, #4]
 8004ab2:	4299      	cmp	r1, r3
 8004ab4:	bfde      	ittt	le
 8004ab6:	2330      	movle	r3, #48	; 0x30
 8004ab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004abc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ac0:	1b52      	subs	r2, r2, r5
 8004ac2:	6122      	str	r2, [r4, #16]
 8004ac4:	f8cd a000 	str.w	sl, [sp]
 8004ac8:	464b      	mov	r3, r9
 8004aca:	aa03      	add	r2, sp, #12
 8004acc:	4621      	mov	r1, r4
 8004ace:	4640      	mov	r0, r8
 8004ad0:	f7ff fee2 	bl	8004898 <_printf_common>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d14c      	bne.n	8004b72 <_printf_i+0x1fe>
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	b004      	add	sp, #16
 8004ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae2:	4835      	ldr	r0, [pc, #212]	; (8004bb8 <_printf_i+0x244>)
 8004ae4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ae8:	6829      	ldr	r1, [r5, #0]
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	f851 6b04 	ldr.w	r6, [r1], #4
 8004af0:	6029      	str	r1, [r5, #0]
 8004af2:	061d      	lsls	r5, r3, #24
 8004af4:	d514      	bpl.n	8004b20 <_printf_i+0x1ac>
 8004af6:	07df      	lsls	r7, r3, #31
 8004af8:	bf44      	itt	mi
 8004afa:	f043 0320 	orrmi.w	r3, r3, #32
 8004afe:	6023      	strmi	r3, [r4, #0]
 8004b00:	b91e      	cbnz	r6, 8004b0a <_printf_i+0x196>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	f023 0320 	bic.w	r3, r3, #32
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	e7b0      	b.n	8004a70 <_printf_i+0xfc>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	f043 0320 	orr.w	r3, r3, #32
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	2378      	movs	r3, #120	; 0x78
 8004b18:	4828      	ldr	r0, [pc, #160]	; (8004bbc <_printf_i+0x248>)
 8004b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b1e:	e7e3      	b.n	8004ae8 <_printf_i+0x174>
 8004b20:	0659      	lsls	r1, r3, #25
 8004b22:	bf48      	it	mi
 8004b24:	b2b6      	uxthmi	r6, r6
 8004b26:	e7e6      	b.n	8004af6 <_printf_i+0x182>
 8004b28:	4615      	mov	r5, r2
 8004b2a:	e7bb      	b.n	8004aa4 <_printf_i+0x130>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	6826      	ldr	r6, [r4, #0]
 8004b30:	6961      	ldr	r1, [r4, #20]
 8004b32:	1d18      	adds	r0, r3, #4
 8004b34:	6028      	str	r0, [r5, #0]
 8004b36:	0635      	lsls	r5, r6, #24
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	d501      	bpl.n	8004b40 <_printf_i+0x1cc>
 8004b3c:	6019      	str	r1, [r3, #0]
 8004b3e:	e002      	b.n	8004b46 <_printf_i+0x1d2>
 8004b40:	0670      	lsls	r0, r6, #25
 8004b42:	d5fb      	bpl.n	8004b3c <_printf_i+0x1c8>
 8004b44:	8019      	strh	r1, [r3, #0]
 8004b46:	2300      	movs	r3, #0
 8004b48:	6123      	str	r3, [r4, #16]
 8004b4a:	4615      	mov	r5, r2
 8004b4c:	e7ba      	b.n	8004ac4 <_printf_i+0x150>
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	1d1a      	adds	r2, r3, #4
 8004b52:	602a      	str	r2, [r5, #0]
 8004b54:	681d      	ldr	r5, [r3, #0]
 8004b56:	6862      	ldr	r2, [r4, #4]
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f7fb fb60 	bl	8000220 <memchr>
 8004b60:	b108      	cbz	r0, 8004b66 <_printf_i+0x1f2>
 8004b62:	1b40      	subs	r0, r0, r5
 8004b64:	6060      	str	r0, [r4, #4]
 8004b66:	6863      	ldr	r3, [r4, #4]
 8004b68:	6123      	str	r3, [r4, #16]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b70:	e7a8      	b.n	8004ac4 <_printf_i+0x150>
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	462a      	mov	r2, r5
 8004b76:	4649      	mov	r1, r9
 8004b78:	4640      	mov	r0, r8
 8004b7a:	47d0      	blx	sl
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d0ab      	beq.n	8004ad8 <_printf_i+0x164>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	079b      	lsls	r3, r3, #30
 8004b84:	d413      	bmi.n	8004bae <_printf_i+0x23a>
 8004b86:	68e0      	ldr	r0, [r4, #12]
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	4298      	cmp	r0, r3
 8004b8c:	bfb8      	it	lt
 8004b8e:	4618      	movlt	r0, r3
 8004b90:	e7a4      	b.n	8004adc <_printf_i+0x168>
 8004b92:	2301      	movs	r3, #1
 8004b94:	4632      	mov	r2, r6
 8004b96:	4649      	mov	r1, r9
 8004b98:	4640      	mov	r0, r8
 8004b9a:	47d0      	blx	sl
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d09b      	beq.n	8004ad8 <_printf_i+0x164>
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	68e3      	ldr	r3, [r4, #12]
 8004ba4:	9903      	ldr	r1, [sp, #12]
 8004ba6:	1a5b      	subs	r3, r3, r1
 8004ba8:	42ab      	cmp	r3, r5
 8004baa:	dcf2      	bgt.n	8004b92 <_printf_i+0x21e>
 8004bac:	e7eb      	b.n	8004b86 <_printf_i+0x212>
 8004bae:	2500      	movs	r5, #0
 8004bb0:	f104 0619 	add.w	r6, r4, #25
 8004bb4:	e7f5      	b.n	8004ba2 <_printf_i+0x22e>
 8004bb6:	bf00      	nop
 8004bb8:	08004d05 	.word	0x08004d05
 8004bbc:	08004d16 	.word	0x08004d16

08004bc0 <__retarget_lock_acquire_recursive>:
 8004bc0:	4770      	bx	lr

08004bc2 <__retarget_lock_release_recursive>:
 8004bc2:	4770      	bx	lr

08004bc4 <memcpy>:
 8004bc4:	440a      	add	r2, r1
 8004bc6:	4291      	cmp	r1, r2
 8004bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bcc:	d100      	bne.n	8004bd0 <memcpy+0xc>
 8004bce:	4770      	bx	lr
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bda:	4291      	cmp	r1, r2
 8004bdc:	d1f9      	bne.n	8004bd2 <memcpy+0xe>
 8004bde:	bd10      	pop	{r4, pc}

08004be0 <memmove>:
 8004be0:	4288      	cmp	r0, r1
 8004be2:	b510      	push	{r4, lr}
 8004be4:	eb01 0402 	add.w	r4, r1, r2
 8004be8:	d902      	bls.n	8004bf0 <memmove+0x10>
 8004bea:	4284      	cmp	r4, r0
 8004bec:	4623      	mov	r3, r4
 8004bee:	d807      	bhi.n	8004c00 <memmove+0x20>
 8004bf0:	1e43      	subs	r3, r0, #1
 8004bf2:	42a1      	cmp	r1, r4
 8004bf4:	d008      	beq.n	8004c08 <memmove+0x28>
 8004bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bfe:	e7f8      	b.n	8004bf2 <memmove+0x12>
 8004c00:	4402      	add	r2, r0
 8004c02:	4601      	mov	r1, r0
 8004c04:	428a      	cmp	r2, r1
 8004c06:	d100      	bne.n	8004c0a <memmove+0x2a>
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c12:	e7f7      	b.n	8004c04 <memmove+0x24>

08004c14 <_realloc_r>:
 8004c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c18:	4680      	mov	r8, r0
 8004c1a:	4614      	mov	r4, r2
 8004c1c:	460e      	mov	r6, r1
 8004c1e:	b921      	cbnz	r1, 8004c2a <_realloc_r+0x16>
 8004c20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c24:	4611      	mov	r1, r2
 8004c26:	f7ff bc2b 	b.w	8004480 <_malloc_r>
 8004c2a:	b92a      	cbnz	r2, 8004c38 <_realloc_r+0x24>
 8004c2c:	f7ff fbbc 	bl	80043a8 <_free_r>
 8004c30:	4625      	mov	r5, r4
 8004c32:	4628      	mov	r0, r5
 8004c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c38:	f000 f81b 	bl	8004c72 <_malloc_usable_size_r>
 8004c3c:	4284      	cmp	r4, r0
 8004c3e:	4607      	mov	r7, r0
 8004c40:	d802      	bhi.n	8004c48 <_realloc_r+0x34>
 8004c42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c46:	d812      	bhi.n	8004c6e <_realloc_r+0x5a>
 8004c48:	4621      	mov	r1, r4
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	f7ff fc18 	bl	8004480 <_malloc_r>
 8004c50:	4605      	mov	r5, r0
 8004c52:	2800      	cmp	r0, #0
 8004c54:	d0ed      	beq.n	8004c32 <_realloc_r+0x1e>
 8004c56:	42bc      	cmp	r4, r7
 8004c58:	4622      	mov	r2, r4
 8004c5a:	4631      	mov	r1, r6
 8004c5c:	bf28      	it	cs
 8004c5e:	463a      	movcs	r2, r7
 8004c60:	f7ff ffb0 	bl	8004bc4 <memcpy>
 8004c64:	4631      	mov	r1, r6
 8004c66:	4640      	mov	r0, r8
 8004c68:	f7ff fb9e 	bl	80043a8 <_free_r>
 8004c6c:	e7e1      	b.n	8004c32 <_realloc_r+0x1e>
 8004c6e:	4635      	mov	r5, r6
 8004c70:	e7df      	b.n	8004c32 <_realloc_r+0x1e>

08004c72 <_malloc_usable_size_r>:
 8004c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c76:	1f18      	subs	r0, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bfbc      	itt	lt
 8004c7c:	580b      	ldrlt	r3, [r1, r0]
 8004c7e:	18c0      	addlt	r0, r0, r3
 8004c80:	4770      	bx	lr
	...

08004c84 <_init>:
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c86:	bf00      	nop
 8004c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8a:	bc08      	pop	{r3}
 8004c8c:	469e      	mov	lr, r3
 8004c8e:	4770      	bx	lr

08004c90 <_fini>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	bf00      	nop
 8004c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c96:	bc08      	pop	{r3}
 8004c98:	469e      	mov	lr, r3
 8004c9a:	4770      	bx	lr
